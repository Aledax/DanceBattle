
slave_de1.elf:     file format elf32-littlenios2
slave_de1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x0000367c memsz 0x0000367c flags r-x
    LOAD off    0x0000469c vaddr 0x0000b69c paddr 0x0000b794 align 2**12
         filesz 0x000000f8 memsz 0x000000f8 flags rw-
    LOAD off    0x0000488c vaddr 0x0000b88c paddr 0x0000b88c align 2**12
         filesz 0x00000000 memsz 0x00000030 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00004794  2**0
                  CONTENTS
  2 .text         00003374  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000308  0000b394  0000b394  00004394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f8  0000b69c  0000b794  0000469c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000030  0000b88c  0000b88c  0000488c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000b8bc  0000b8bc  00004794  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00004794  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000540  00000000  00000000  000047b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00008903  00000000  00000000  00004cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002b41  00000000  00000000  0000d5fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003580  00000000  00000000  0001013c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000954  00000000  00000000  000136bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000195b  00000000  00000000  00014010  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000060b4  00000000  00000000  0001596b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0001ba20  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000007c0  00000000  00000000  0001ba60  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001d93a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001d93d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001d949  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001d94a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0001d94b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0001d956  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0001d961  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  0001d96c  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000030  00000000  00000000  0001d978  2**0
                  CONTENTS, READONLY
 26 .jdi          000053cc  00000000  00000000  0001d9a8  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003863e  00000000  00000000  00022d74  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
0000b394 l    d  .rodata	00000000 .rodata
0000b69c l    d  .rwdata	00000000 .rwdata
0000b88c l    d  .bss	00000000 .bss
0000b8bc l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../slave_de1_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 esp.c
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
0000b8a4 l     O .bss	00000008 _randbits
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000a1fc l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vfprintf.c
0000a7b0 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 impure.c
0000b69c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00009f7c g     F .text	0000001c putchar
0000b214 g     F .text	0000002c alt_main
0000a1b4 g     F .text	0000002c strcpy
00009f98 g     F .text	00000080 _puts_r
0000b794 g       *ABS*	00000000 __flash_rwdata_start
00009f28 g     F .text	0000004c printf
0000aec4 g     F .text	00000060 memmove
0000805c g     F .text	00000040 reset_esp
0000b38c g     F .text	00000008 altera_nios2_gen2_irq_init
0000ae1c g     F .text	000000a8 __sfvwrite_small_str
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000b8ac g     O .bss	00000004 errno
0000b8b4 g     O .bss	00000004 alt_argv
0001377c g       *ABS*	00000000 _gp
0000b240 g     F .text	00000004 usleep
0000b894 g     O .bss	00000004 UART_RXDATA_REG
00009f74 g     F .text	00000008 _putchar_r
0000883c g     F .text	000000e0 uart_output
00009d84 g     F .text	000000dc .hidden __floatsidf
0000a018 g     F .text	00000014 puts
00009eec g     F .text	0000003c _printf_r
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008a4c g     F .text	00000064 .hidden __udivsi3
00008b08 g     F .text	000008ac .hidden __adddf3
0000b780 g     O .rwdata	00000004 _global_impure_ptr
0000b8bc g       *ABS*	00000000 __bss_end
0000849c g     F .text	0000001c updateCoords
0000b384 g     F .text	00000004 alt_dcache_flush_all
0000809c g     F .text	00000064 init_connection
0000b794 g       *ABS*	00000000 __ram_rwdata_end
0000b244 g     F .text	00000060 write
0000af78 g     F .text	00000058 _putc_r
0000b69c g       *ABS*	00000000 __ram_rodata_end
0000b78c g     O .rwdata	00000004 jtag_uart_0
00008ab0 g     F .text	00000058 .hidden __umodsi3
0000b898 g     O .bss	00000004 UART_CONTROL_REG
0000b8bc g       *ABS*	00000000 end
00008460 g     F .text	0000003c writeThresholds
000086c0 g     F .text	000000d4 uart_wait_for_messages
00010000 g       *ABS*	00000000 __alt_stack_pointer
00009e60 g     F .text	00000064 .hidden __clzsi2
0000b2c8 g     F .text	00000034 altera_avalon_jtag_uart_write
0000891c g     F .text	00000038 uart_init
0000a81c g     F .text	0000052c ___vfprintf_internal_r
0000a0a0 g     F .text	00000064 _sprintf_r
00008020 g     F .text	0000003c _start
0000a040 g     F .text	00000060 rand
0000b2c4 g     F .text	00000004 alt_sys_init
00009ec4 g     F .text	00000028 .hidden __mulsi3
0000b69c g       *ABS*	00000000 __ram_rwdata_start
0000b394 g       *ABS*	00000000 __ram_rodata_start
0000b89c g     O .bss	00000004 UART_TXDATA_REG
0000b77c g     O .rwdata	00000004 camera_base
0000b2fc g     F .text	00000088 alt_busy_sleep
00008574 g     F .text	0000003c uart_read_byte
0000b8bc g       *ABS*	00000000 __alt_stack_base
000093b4 g     F .text	000009d0 .hidden __divdf3
0000a268 g     F .text	0000052c ___svfprintf_internal_r
0000ad64 g     F .text	000000b8 __sfvwrite_small_dev
0000b88c g       *ABS*	00000000 __bss_start
000084b8 g     F .text	000000bc main
0000b8b0 g     O .bss	00000004 alt_envp
0000b788 g     O .rwdata	00000004 uart_0
0000a02c g     F .text	00000014 srand
00008620 g     F .text	000000a0 uart_read_data
0000b790 g     O .rwdata	00000004 alt_errno
00008794 g     F .text	000000a8 uart_send_command
0000af24 g     F .text	00000054 putc
00008954 g     F .text	00000084 .hidden __divsi3
0000a17c g     F .text	00000038 strcmp
0000b394 g       *ABS*	00000000 __flash_rodata_start
0000b2a4 g     F .text	00000020 alt_irq_init
0000b8a0 g     O .bss	00000004 UART_STATUS_REG
0000a104 g     F .text	00000078 sprintf
0000b59b g     O .rodata	00000100 .hidden __clz_tab
0000afd0 g     F .text	00000058 _write_r
000085d8 g     F .text	00000048 uart_write_data
0000b784 g     O .rwdata	00000004 _impure_ptr
0000b8b8 g     O .bss	00000004 alt_argc
0000a794 g     F .text	0000001c __vfprintf_internal_unused
0000b88c g     O .bss	00000008 coords
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000b794 g       *ABS*	00000000 _edata
0000b8bc g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
000089d8 g     F .text	00000074 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
000081c4 g     F .text	0000029c esp_run
0000800c g       .entry	00000000 _exit
0000b028 g     F .text	0000010c .hidden __muldi3
0000a1e0 g     F .text	0000001c strlen
00008100 g     F .text	000000c4 esp_init
0000b388 g     F .text	00000004 alt_icache_flush_all
0000ad48 g     F .text	0000001c __vfprintf_internal
0000b134 g     F .text	000000e0 alt_load
000085b0 g     F .text	00000028 uart_write_byte



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d68ddf14 	ori	gp,gp,14204
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10ae2314 	ori	r2,r2,47244

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18ee2f14 	ori	r3,r3,47292

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff48c8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	000b1340 	call	b134 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	000b2140 	call	b214 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff48dc>

0000805c <reset_esp>:
bool init_connection(char* serverIP);

// Function Definitions
void reset_esp() {
  // Reset the ESP
  uart_send_command(ESP_RESET_COMMAND, NULL, 0);
    805c:	01000074 	movhi	r4,1

void reset_esp(void);
bool init_connection(char* serverIP);

// Function Definitions
void reset_esp() {
    8060:	defffe04 	addi	sp,sp,-8
  // Reset the ESP
  uart_send_command(ESP_RESET_COMMAND, NULL, 0);
    8064:	000d883a 	mov	r6,zero
    8068:	000b883a 	mov	r5,zero
    806c:	212ce504 	addi	r4,r4,-19564

void reset_esp(void);
bool init_connection(char* serverIP);

// Function Definitions
void reset_esp() {
    8070:	dfc00115 	stw	ra,4(sp)
  // Reset the ESP
  uart_send_command(ESP_RESET_COMMAND, NULL, 0);
    8074:	00087940 	call	8794 <uart_send_command>
  uart_wait_for_messages((char*[]){ESP_INIT_COMMAND}, 1);
    8078:	00800074 	movhi	r2,1
    807c:	10ace604 	addi	r2,r2,-19560
    8080:	01400044 	movi	r5,1
    8084:	d809883a 	mov	r4,sp
    8088:	d8800015 	stw	r2,0(sp)
    808c:	00086c00 	call	86c0 <uart_wait_for_messages>
}
    8090:	dfc00117 	ldw	ra,4(sp)
    8094:	dec00204 	addi	sp,sp,8
    8098:	f800283a 	ret

0000809c <init_connection>:

bool init_connection(char* serverIP) {
    809c:	defffb04 	addi	sp,sp,-20
    80a0:	dc000315 	stw	r16,12(sp)
  // Connect to the backend
  uart_send_command(ESP_CONNECT_BACKEND_COMMAND, (char*[]){serverIP}, 1);
    80a4:	04000074 	movhi	r16,1
    80a8:	842ce704 	addi	r16,r16,-19556
    80ac:	01800044 	movi	r6,1
    80b0:	d9000215 	stw	r4,8(sp)
    80b4:	d9400204 	addi	r5,sp,8
    80b8:	8009883a 	mov	r4,r16
  // Reset the ESP
  uart_send_command(ESP_RESET_COMMAND, NULL, 0);
  uart_wait_for_messages((char*[]){ESP_INIT_COMMAND}, 1);
}

bool init_connection(char* serverIP) {
    80bc:	dfc00415 	stw	ra,16(sp)
  // Connect to the backend
  uart_send_command(ESP_CONNECT_BACKEND_COMMAND, (char*[]){serverIP}, 1);
    80c0:	00087940 	call	8794 <uart_send_command>
  char* yieldedMessage = uart_wait_for_messages((char*[]){ESP_READY_COMMAND, ESP_CLOSE_COMMAND}, 2);
    80c4:	00800074 	movhi	r2,1
    80c8:	d809883a 	mov	r4,sp
    80cc:	10ace504 	addi	r2,r2,-19564
    80d0:	01400084 	movi	r5,2
    80d4:	d8800015 	stw	r2,0(sp)
    80d8:	dc000115 	stw	r16,4(sp)
    80dc:	00086c00 	call	86c0 <uart_wait_for_messages>

  if (strcmp(yieldedMessage, ESP_CLOSE_COMMAND) == 0) {
    80e0:	800b883a 	mov	r5,r16
    80e4:	1009883a 	mov	r4,r2
    80e8:	000a17c0 	call	a17c <strcmp>
    80ec:	1004c03a 	cmpne	r2,r2,zero
    return false;
  }

  return true;
}
    80f0:	dfc00417 	ldw	ra,16(sp)
    80f4:	dc000317 	ldw	r16,12(sp)
    80f8:	dec00504 	addi	sp,sp,20
    80fc:	f800283a 	ret

00008100 <esp_init>:

bool esp_init(int argc, char** argv) {
    8100:	defff904 	addi	sp,sp,-28
    8104:	dcc00315 	stw	r19,12(sp)
    8108:	2027883a 	mov	r19,r4
  #ifdef DEBUG
    printf("ESP Init\n");
    810c:	01000074 	movhi	r4,1
    8110:	212ced04 	addi	r4,r4,-19532
  }

  return true;
}

bool esp_init(int argc, char** argv) {
    8114:	dfc00615 	stw	ra,24(sp)
    8118:	dd400515 	stw	r21,20(sp)
    811c:	dd000415 	stw	r20,16(sp)
    8120:	dc800215 	stw	r18,8(sp)
    8124:	dc000015 	stw	r16,0(sp)
    8128:	2829883a 	mov	r20,r5
    812c:	dc400115 	stw	r17,4(sp)
  #ifdef DEBUG
    printf("ESP Init\n");
    8130:	000a0180 	call	a018 <puts>
  #endif
  
  reset_esp();
    8134:	000805c0 	call	805c <reset_esp>

  unsigned int failCount = 0;
    8138:	0021883a 	mov	r16,zero
  bool connected = false;

  do {
    connected = init_connection(argc > 1 ? argv[1] : SERVER_IP);
    813c:	05400044 	movi	r21,1
    if (!connected && failCount > 0) {
      printf("Failed to connect to backend %d/10 times. Retrying ...\n",
             failCount);
    }

  } while (!connected && failCount < 10);
    8140:	04800244 	movi	r18,9

  unsigned int failCount = 0;
  bool connected = false;

  do {
    connected = init_connection(argc > 1 ? argv[1] : SERVER_IP);
    8144:	acc0020e 	bge	r21,r19,8150 <esp_init+0x50>
    8148:	a1000117 	ldw	r4,4(r20)
    814c:	00000206 	br	8158 <esp_init+0x58>
    8150:	01000074 	movhi	r4,1
    8154:	212ce804 	addi	r4,r4,-19552
    8158:	000809c0 	call	809c <init_connection>
    815c:	1023883a 	mov	r17,r2
    failCount += !connected;

    if (!connected && failCount > 0) {
    8160:	10803fcc 	andi	r2,r2,255
    8164:	10000a1e 	bne	r2,zero,8190 <esp_init+0x90>
  unsigned int failCount = 0;
  bool connected = false;

  do {
    connected = init_connection(argc > 1 ? argv[1] : SERVER_IP);
    failCount += !connected;
    8168:	84000044 	addi	r16,r16,1

    if (!connected && failCount > 0) {
    816c:	803ff526 	beq	r16,zero,8144 <_gp+0xffff49c8>
      printf("Failed to connect to backend %d/10 times. Retrying ...\n",
    8170:	01000074 	movhi	r4,1
    8174:	800b883a 	mov	r5,r16
    8178:	212cf004 	addi	r4,r4,-19520
    817c:	0009f280 	call	9f28 <printf>
             failCount);
    }

  } while (!connected && failCount < 10);
    8180:	943ff02e 	bgeu	r18,r16,8144 <_gp+0xffff49c8>

  #ifdef DEBUG
  if (!connected) {
    printf("ESP Failed to connect to backend. Quitting ...\n");
    8184:	01000074 	movhi	r4,1
    8188:	212cfe04 	addi	r4,r4,-19464
    818c:	00000206 	br	8198 <esp_init+0x98>
  } else {
    printf("Connected to backend\n");
    8190:	01000074 	movhi	r4,1
    8194:	212d0a04 	addi	r4,r4,-19416
    8198:	000a0180 	call	a018 <puts>
  }
  #endif

  return connected;
}
    819c:	8805883a 	mov	r2,r17
    81a0:	dfc00617 	ldw	ra,24(sp)
    81a4:	dd400517 	ldw	r21,20(sp)
    81a8:	dd000417 	ldw	r20,16(sp)
    81ac:	dcc00317 	ldw	r19,12(sp)
    81b0:	dc800217 	ldw	r18,8(sp)
    81b4:	dc400117 	ldw	r17,4(sp)
    81b8:	dc000017 	ldw	r16,0(sp)
    81bc:	dec00704 	addi	sp,sp,28
    81c0:	f800283a 	ret

000081c4 <esp_run>:

void esp_run(void) {
  #ifdef DEBUG
    printf("Running ESP\n");
    81c4:	01000074 	movhi	r4,1
  #endif

  return connected;
}

void esp_run(void) {
    81c8:	defdf104 	addi	sp,sp,-2108
  #ifdef DEBUG
    printf("Running ESP\n");
    81cc:	212d1004 	addi	r4,r4,-19392
  #endif

  return connected;
}

void esp_run(void) {
    81d0:	dfc20e15 	stw	ra,2104(sp)
    81d4:	dc020615 	stw	r16,2072(sp)
    81d8:	ddc20d15 	stw	r23,2100(sp)
    81dc:	dd820c15 	stw	r22,2096(sp)
    81e0:	dd420b15 	stw	r21,2092(sp)
    81e4:	dd020a15 	stw	r20,2088(sp)
    81e8:	dcc20915 	stw	r19,2084(sp)
    81ec:	dc820815 	stw	r18,2080(sp)
    81f0:	dc420715 	stw	r17,2076(sp)
  #ifdef DEBUG
    printf("Running ESP\n");
    81f4:	000a0180 	call	a018 <puts>
  char recvBuffer[UART_BUFFER_SIZE];
  char sendBuffer[UART_BUFFER_SIZE];
  unsigned int count = 0;
  struct Pose pose;

  uart_send_command(ESP_TYPE_COMMAND, (char*[]){"ca"}, 1);
    81f8:	00800074 	movhi	r2,1
    81fc:	01000074 	movhi	r4,1
    8200:	10ad1304 	addi	r2,r2,-19380
    8204:	01800044 	movi	r6,1
    8208:	d9420504 	addi	r5,sp,2068
    820c:	212d1404 	addi	r4,r4,-19376
    8210:	d8820515 	stw	r2,2068(sp)
    8214:	04000284 	movi	r16,10
    8218:	00087940 	call	8794 <uart_send_command>

  while (count < 10) {

    pose.beat = (rand() % 1000) / (rand() % 100 + 1.0);
    821c:	000a0400 	call	a040 <rand>
    8220:	1023883a 	mov	r17,r2
    8224:	000a0400 	call	a040 <rand>
    8228:	0140fa04 	movi	r5,1000
    822c:	8809883a 	mov	r4,r17
    8230:	1027883a 	mov	r19,r2
    8234:	00089d80 	call	89d8 <__modsi3>
    8238:	1009883a 	mov	r4,r2
    823c:	0009d840 	call	9d84 <__floatsidf>
    8240:	01401904 	movi	r5,100
    8244:	9809883a 	mov	r4,r19
    8248:	1823883a 	mov	r17,r3
    824c:	1025883a 	mov	r18,r2
    8250:	00089d80 	call	89d8 <__modsi3>
    8254:	1009883a 	mov	r4,r2
    8258:	0009d840 	call	9d84 <__floatsidf>
    825c:	000d883a 	mov	r6,zero
    8260:	01cffc34 	movhi	r7,16368
    8264:	1009883a 	mov	r4,r2
    8268:	180b883a 	mov	r5,r3
    826c:	0008b080 	call	8b08 <__adddf3>
    8270:	100d883a 	mov	r6,r2
    8274:	180f883a 	mov	r7,r3
    8278:	9009883a 	mov	r4,r18
    827c:	880b883a 	mov	r5,r17
    8280:	00093b40 	call	93b4 <__divdf3>
    8284:	1823883a 	mov	r17,r3
    8288:	1025883a 	mov	r18,r2
    pose.hourAngle = (rand() % 1000) / (rand() % 100 + 1.0);
    828c:	000a0400 	call	a040 <rand>
    8290:	1027883a 	mov	r19,r2
    8294:	000a0400 	call	a040 <rand>
    8298:	0140fa04 	movi	r5,1000
    829c:	9809883a 	mov	r4,r19
    82a0:	102b883a 	mov	r21,r2
    82a4:	00089d80 	call	89d8 <__modsi3>
    82a8:	1009883a 	mov	r4,r2
    82ac:	0009d840 	call	9d84 <__floatsidf>
    82b0:	01401904 	movi	r5,100
    82b4:	a809883a 	mov	r4,r21
    82b8:	1827883a 	mov	r19,r3
    82bc:	1029883a 	mov	r20,r2
    82c0:	00089d80 	call	89d8 <__modsi3>
    82c4:	1009883a 	mov	r4,r2
    82c8:	0009d840 	call	9d84 <__floatsidf>
    82cc:	000d883a 	mov	r6,zero
    82d0:	01cffc34 	movhi	r7,16368
    82d4:	1009883a 	mov	r4,r2
    82d8:	180b883a 	mov	r5,r3
    82dc:	0008b080 	call	8b08 <__adddf3>
    82e0:	100d883a 	mov	r6,r2
    82e4:	180f883a 	mov	r7,r3
    82e8:	a009883a 	mov	r4,r20
    82ec:	980b883a 	mov	r5,r19
    82f0:	00093b40 	call	93b4 <__divdf3>
    82f4:	1827883a 	mov	r19,r3
    82f8:	1029883a 	mov	r20,r2
    pose.minuteAngle = (rand() % 1000) / (rand() % 100 + 1.0);
    82fc:	000a0400 	call	a040 <rand>
    8300:	102b883a 	mov	r21,r2
    8304:	000a0400 	call	a040 <rand>

    sprintf(sendBuffer, "%f %f %f", pose.beat, pose.hourAngle,
    8308:	0140fa04 	movi	r5,1000
    830c:	a809883a 	mov	r4,r21

  while (count < 10) {

    pose.beat = (rand() % 1000) / (rand() % 100 + 1.0);
    pose.hourAngle = (rand() % 1000) / (rand() % 100 + 1.0);
    pose.minuteAngle = (rand() % 1000) / (rand() % 100 + 1.0);
    8310:	102f883a 	mov	r23,r2

    sprintf(sendBuffer, "%f %f %f", pose.beat, pose.hourAngle,
    8314:	00089d80 	call	89d8 <__modsi3>
    8318:	1009883a 	mov	r4,r2
    831c:	0009d840 	call	9d84 <__floatsidf>
    8320:	01401904 	movi	r5,100
    8324:	b809883a 	mov	r4,r23
    8328:	182b883a 	mov	r21,r3
    832c:	102d883a 	mov	r22,r2
    8330:	00089d80 	call	89d8 <__modsi3>
    8334:	1009883a 	mov	r4,r2
    8338:	0009d840 	call	9d84 <__floatsidf>
    833c:	000d883a 	mov	r6,zero
    8340:	01cffc34 	movhi	r7,16368
    8344:	1009883a 	mov	r4,r2
    8348:	180b883a 	mov	r5,r3
    834c:	0008b080 	call	8b08 <__adddf3>
    8350:	100d883a 	mov	r6,r2
    8354:	180f883a 	mov	r7,r3
    8358:	b009883a 	mov	r4,r22
    835c:	a80b883a 	mov	r5,r21
    8360:	00093b40 	call	93b4 <__divdf3>
    8364:	01400074 	movhi	r5,1
    8368:	d8c00315 	stw	r3,12(sp)
    836c:	880f883a 	mov	r7,r17
    8370:	900d883a 	mov	r6,r18
    8374:	296d1504 	addi	r5,r5,-19372
    8378:	d9000404 	addi	r4,sp,16
    837c:	d8800215 	stw	r2,8(sp)
    8380:	dd000015 	stw	r20,0(sp)
    8384:	dcc00115 	stw	r19,4(sp)
    8388:	000a1040 	call	a104 <sprintf>
            pose.minuteAngle);

    uart_send_command(ESP_POSE_COMMAND, (char*[]){sendBuffer}, 1);
    838c:	01000074 	movhi	r4,1
    8390:	d8800404 	addi	r2,sp,16
    8394:	01800044 	movi	r6,1
    8398:	d9420404 	addi	r5,sp,2064
    839c:	212d1804 	addi	r4,r4,-19360
    83a0:	d8820415 	stw	r2,2064(sp)
    83a4:	00087940 	call	8794 <uart_send_command>

    unsigned int len = uart_read_data(recvBuffer, UART_BUFFER_SIZE);
    83a8:	01410004 	movi	r5,1024
    83ac:	d9010404 	addi	r4,sp,1040
    83b0:	00086200 	call	8620 <uart_read_data>
    printf("[%d] %s\n", len, recvBuffer);
    83b4:	01000074 	movhi	r4,1
    83b8:	d9810404 	addi	r6,sp,1040
    83bc:	100b883a 	mov	r5,r2
    83c0:	212d1904 	addi	r4,r4,-19356
    83c4:	0009f280 	call	9f28 <printf>

    len = uart_read_data(recvBuffer, UART_BUFFER_SIZE);
    83c8:	01410004 	movi	r5,1024
    83cc:	d9010404 	addi	r4,sp,1040
    83d0:	00086200 	call	8620 <uart_read_data>
    printf("[%d] %s\n", len, recvBuffer);
    83d4:	01000074 	movhi	r4,1
    83d8:	d9810404 	addi	r6,sp,1040
    83dc:	100b883a 	mov	r5,r2
    83e0:	212d1904 	addi	r4,r4,-19356
    83e4:	0009f280 	call	9f28 <printf>

    len = uart_read_data(recvBuffer, UART_BUFFER_SIZE);
    83e8:	01410004 	movi	r5,1024
    83ec:	d9010404 	addi	r4,sp,1040
    83f0:	00086200 	call	8620 <uart_read_data>
    printf("[%d] %s\n", len, recvBuffer);
    83f4:	01000074 	movhi	r4,1
    83f8:	d9810404 	addi	r6,sp,1040
    83fc:	100b883a 	mov	r5,r2
    8400:	212d1904 	addi	r4,r4,-19356
    8404:	0009f280 	call	9f28 <printf>

    len = uart_read_data(recvBuffer, UART_BUFFER_SIZE);
    8408:	01410004 	movi	r5,1024
    840c:	d9010404 	addi	r4,sp,1040
    8410:	00086200 	call	8620 <uart_read_data>
    printf("[%d] %s\n", len, recvBuffer);
    8414:	01000074 	movhi	r4,1
    8418:	d9810404 	addi	r6,sp,1040
    841c:	100b883a 	mov	r5,r2
    8420:	212d1904 	addi	r4,r4,-19356
    8424:	0009f280 	call	9f28 <printf>

    count++;

    usleep(1000000);
    8428:	010003f4 	movhi	r4,15
    842c:	21109004 	addi	r4,r4,16960
    8430:	843fffc4 	addi	r16,r16,-1
    8434:	000b2400 	call	b240 <usleep>
  unsigned int count = 0;
  struct Pose pose;

  uart_send_command(ESP_TYPE_COMMAND, (char*[]){"ca"}, 1);

  while (count < 10) {
    8438:	803f781e 	bne	r16,zero,821c <_gp+0xffff4aa0>

    usleep(1000000);
  }

  while (1) {
    unsigned int len = uart_read_data(recvBuffer, UART_BUFFER_SIZE);
    843c:	d9010404 	addi	r4,sp,1040
    8440:	01410004 	movi	r5,1024
    8444:	00086200 	call	8620 <uart_read_data>
    printf("[%d] %s\n", len, recvBuffer);
    8448:	01000074 	movhi	r4,1
    844c:	d9810404 	addi	r6,sp,1040
    8450:	100b883a 	mov	r5,r2
    8454:	212d1904 	addi	r4,r4,-19356
    8458:	0009f280 	call	9f28 <printf>
    845c:	003ff706 	br	843c <_gp+0xffff4cc0>

00008460 <writeThresholds>:
uint32_t coords[NUM_POINT_FINDERS]; 
volatile uint32_t *camera_base = (uint32_t*)COORDS_SLAVE_0_BASE;

void writeThresholds(int i, uint8_t cbLow, uint8_t cbHigh, uint8_t crLow, uint8_t crHigh)
{
	*(camera_base + i) = (cbLow << 24) | (cbHigh << 16) | (crLow << 8) | crHigh;
    8460:	d0a00017 	ldw	r2,-32768(gp)
    8464:	2109883a 	add	r4,r4,r4
    8468:	2109883a 	add	r4,r4,r4
    846c:	39c03fcc 	andi	r7,r7,255
    8470:	1109883a 	add	r4,r2,r4
    8474:	380e923a 	slli	r7,r7,8
    8478:	d8800003 	ldbu	r2,0(sp)
    847c:	31803fcc 	andi	r6,r6,255
    8480:	300c943a 	slli	r6,r6,16
    8484:	280a963a 	slli	r5,r5,24
    8488:	388eb03a 	or	r7,r7,r2
    848c:	398cb03a 	or	r6,r7,r6
    8490:	314cb03a 	or	r6,r6,r5
    8494:	21800015 	stw	r6,0(r4)
    8498:	f800283a 	ret

0000849c <updateCoords>:
}

void updateCoords() {	
	for (int i = 0; i < NUM_POINT_FINDERS; i++) {
		coords[i] = *(camera_base + i);
    849c:	d0e00017 	ldw	r3,-32768(gp)
    84a0:	d0a04404 	addi	r2,gp,-32496
    84a4:	19000017 	ldw	r4,0(r3)
    84a8:	11000015 	stw	r4,0(r2)
    84ac:	18c00117 	ldw	r3,4(r3)
    84b0:	10c00115 	stw	r3,4(r2)
    84b4:	f800283a 	ret

000084b8 <main>:
	}
}

int main(int argc, char** argv)
{
    84b8:	defffd04 	addi	sp,sp,-12
    84bc:	dc000015 	stw	r16,0(sp)
    84c0:	2021883a 	mov	r16,r4
	const int __programNumber__ = 420;
	printf("\n === Program start number: %i === \n", __programNumber__);
    84c4:	01000074 	movhi	r4,1
    84c8:	212d1c04 	addi	r4,r4,-19344
		coords[i] = *(camera_base + i);
	}
}

int main(int argc, char** argv)
{
    84cc:	dc400115 	stw	r17,4(sp)
    84d0:	2823883a 	mov	r17,r5
	const int __programNumber__ = 420;
	printf("\n === Program start number: %i === \n", __programNumber__);
    84d4:	01406904 	movi	r5,420
		coords[i] = *(camera_base + i);
	}
}

int main(int argc, char** argv)
{
    84d8:	dfc00215 	stw	ra,8(sp)
	const int __programNumber__ = 420;
	printf("\n === Program start number: %i === \n", __programNumber__);
    84dc:	0009f280 	call	9f28 <printf>

  uart_init();
    84e0:	000891c0 	call	891c <uart_init>
  uart_output();
    84e4:	000883c0 	call	883c <uart_output>

  if (!esp_init(argc, argv)) {
    84e8:	880b883a 	mov	r5,r17
    84ec:	8009883a 	mov	r4,r16
    84f0:	00081000 	call	8100 <esp_init>
    84f4:	10803fcc 	andi	r2,r2,255
    84f8:	1000011e 	bne	r2,zero,8500 <main+0x48>
    84fc:	003fff06 	br	84fc <_gp+0xffff4d80>
    while(1)
      ;
    return;
  };

  esp_run();
    8500:	00081c40 	call	81c4 <esp_run>
uint32_t coords[NUM_POINT_FINDERS]; 
volatile uint32_t *camera_base = (uint32_t*)COORDS_SLAVE_0_BASE;

void writeThresholds(int i, uint8_t cbLow, uint8_t cbHigh, uint8_t crLow, uint8_t crHigh)
{
	*(camera_base + i) = (cbLow << 24) | (cbHigh << 16) | (crLow << 8) | crHigh;
    8504:	d0a00017 	ldw	r2,-32768(gp)
    8508:	00c03ff4 	movhi	r3,255
    850c:	18c03fc4 	addi	r3,r3,255
    8510:	10c00015 	stw	r3,0(r2)
    8514:	00e4a834 	movhi	r3,37536
    8518:	18cf5544 	addi	r3,r3,15701
    851c:	10c00015 	stw	r3,0(r2)
    8520:	00d017b4 	movhi	r3,16478
    8524:	18e72bc4 	addi	r3,r3,-25425
    8528:	10c00115 	stw	r3,4(r2)

	writeThresholds(0, 0, 255, 0, 255);
	writeThresholds(0, 146, 160, 61, 85); // Leon's Blue
	writeThresholds(1, 64, 93, 156, 175); // Kerry's Dark Red
    while (1) {
		updateCoords();
    852c:	000849c0 	call	849c <updateCoords>
    	for (int i = 0; i < NUM_POINT_FINDERS; i++) {
			uint32_t raw_coords = coords[i];
    8530:	d1a04417 	ldw	r6,-32496(gp)
			uint16_t smallUpBigDown = raw_coords >> 16;
			uint16_t smallLeftBigRight = raw_coords & 0xFFFF;
			printf("%i: (%i, %i), ", i, smallLeftBigRight, smallUpBigDown);
    8534:	01000074 	movhi	r4,1
    8538:	000b883a 	mov	r5,zero
    853c:	300ed43a 	srli	r7,r6,16
    8540:	212d2604 	addi	r4,r4,-19304
    8544:	31bfffcc 	andi	r6,r6,65535
    8548:	0009f280 	call	9f28 <printf>
	writeThresholds(0, 146, 160, 61, 85); // Leon's Blue
	writeThresholds(1, 64, 93, 156, 175); // Kerry's Dark Red
    while (1) {
		updateCoords();
    	for (int i = 0; i < NUM_POINT_FINDERS; i++) {
			uint32_t raw_coords = coords[i];
    854c:	d1a04517 	ldw	r6,-32492(gp)
			uint16_t smallUpBigDown = raw_coords >> 16;
			uint16_t smallLeftBigRight = raw_coords & 0xFFFF;
			printf("%i: (%i, %i), ", i, smallLeftBigRight, smallUpBigDown);
    8550:	01000074 	movhi	r4,1
    8554:	01400044 	movi	r5,1
    8558:	300ed43a 	srli	r7,r6,16
    855c:	212d2604 	addi	r4,r4,-19304
    8560:	31bfffcc 	andi	r6,r6,65535
    8564:	0009f280 	call	9f28 <printf>
		}
		printf("\n");
    8568:	01000284 	movi	r4,10
    856c:	0009f7c0 	call	9f7c <putchar>
    8570:	003fee06 	br	852c <_gp+0xffff4db0>

00008574 <uart_read_byte>:
int uart_read_byte(uint8_t *data) {
#ifdef DEBUG_SEVERE
  printf("uart_read_byte - %x \n", IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE));
#endif

  if ((IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & UART_ROE_MASK) == 1) {
    8574:	00800074 	movhi	r2,1
    8578:	10850204 	addi	r2,r2,5128
    857c:	10c00037 	ldwio	r3,0(r2)
    // if (uart_read_command(UART_STATUS_REG, UART_ROE_MASK) != 0) {
    printf("uart_read_data - ROE\n");
  }
  // Poll until the previous bit has been shifted
  while ((IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & UART_RRDY_MASK) == 0)
    8580:	10c00037 	ldwio	r3,0(r2)
    8584:	18c0200c 	andi	r3,r3,128
    8588:	183ffd26 	beq	r3,zero,8580 <_gp+0xffff4e04>
    ;
  // while (uart_read_command(UART_STATUS_REG, UART_RRDY_MASK) == 0);

  // Read the data from the data register
  *data = IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
    858c:	00800074 	movhi	r2,1
    8590:	10850004 	addi	r2,r2,5120
    8594:	10800037 	ldwio	r2,0(r2)
    8598:	20800005 	stb	r2,0(r4)
  // *data = uart_read_command(UART_RXDATA_REG, UART_RXDATA_MASK);

  if ((IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & UART_ROE_MASK) == 1) {
    859c:	00800074 	movhi	r2,1
    85a0:	10850204 	addi	r2,r2,5128
    85a4:	10800037 	ldwio	r2,0(r2)
    // if (uart_read_command(UART_STATUS_REG, UART_ROE_MASK) != 0) {
    printf("uart_read_data - ROE\n");
  }

  return 0;
}
    85a8:	0005883a 	mov	r2,zero
    85ac:	f800283a 	ret

000085b0 <uart_write_byte>:
  printf("uart_write_byte - %c | %x\n", value,
         IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE));
#endif

  // Poll until the previous bit has been shifted
  while ((IORD_ALTERA_AVALON_UART_STATUS(UART_0_BASE) & UART_TRDY_MASK) == 0)
    85b0:	00c00074 	movhi	r3,1
    85b4:	18c50204 	addi	r3,r3,5128
    85b8:	18800037 	ldwio	r2,0(r3)
    85bc:	1080100c 	andi	r2,r2,64
    85c0:	103ffd26 	beq	r2,zero,85b8 <_gp+0xffff4e3c>
    ;
  // while (uart_read_command(UART_STATUS_REG, UART_TRDY_MASK) == 0);

  // Write the data to the data register
  IOWR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE, value);
    85c4:	00800074 	movhi	r2,1
    85c8:	21003fcc 	andi	r4,r4,255
    85cc:	10850104 	addi	r2,r2,5124
    85d0:	11000035 	stwio	r4,0(r2)
    85d4:	f800283a 	ret

000085d8 <uart_write_data>:
  // *UART_STATUS_REG = 0;

  uart_output();
}

void uart_write_data(char *str) {
    85d8:	defffe04 	addi	sp,sp,-8
    85dc:	dc000015 	stw	r16,0(sp)
    85e0:	dfc00115 	stw	ra,4(sp)
    85e4:	2021883a 	mov	r16,r4
  while (*str != '\0') {
    85e8:	81000003 	ldbu	r4,0(r16)
    85ec:	20803fcc 	andi	r2,r4,255
    85f0:	1080201c 	xori	r2,r2,128
    85f4:	10bfe004 	addi	r2,r2,-128
    85f8:	10000426 	beq	r2,zero,860c <uart_write_data+0x34>
    uart_write_byte((uint16_t)*str);
    85fc:	21003fcc 	andi	r4,r4,255
    8600:	00085b00 	call	85b0 <uart_write_byte>
    str++;
    8604:	84000044 	addi	r16,r16,1
    8608:	003ff706 	br	85e8 <_gp+0xffff4e6c>
  }
  uart_write_byte('\r');
    860c:	01000344 	movi	r4,13
}
    8610:	dfc00117 	ldw	ra,4(sp)
    8614:	dc000017 	ldw	r16,0(sp)
    8618:	dec00204 	addi	sp,sp,8
void uart_write_data(char *str) {
  while (*str != '\0') {
    uart_write_byte((uint16_t)*str);
    str++;
  }
  uart_write_byte('\r');
    861c:	00085b01 	jmpi	85b0 <uart_write_byte>

00008620 <uart_read_data>:
}

int uart_read_data(char *str, int len) {
    8620:	defffb04 	addi	sp,sp,-20
    8624:	dcc00315 	stw	r19,12(sp)
    8628:	dc800215 	stw	r18,8(sp)
    862c:	dc400115 	stw	r17,4(sp)
    8630:	dc000015 	stw	r16,0(sp)
    8634:	dfc00415 	stw	ra,16(sp)
    8638:	2023883a 	mov	r17,r4
    863c:	2825883a 	mov	r18,r5
  unsigned int actualLen = 0;
    8640:	0021883a 	mov	r16,zero

  // Read from UART and store in buffer
  while (*str != '\n' && actualLen < len) {
    8644:	04c00284 	movi	r19,10
    8648:	88800007 	ldb	r2,0(r17)
    864c:	14c00b1e 	bne	r2,r19,867c <uart_read_data+0x5c>
    uart_read_byte((uint8_t *)str);
    str += *str != '\n';
    actualLen += *str != '\n';
  }

  *(str - (actualLen == len)) = '\0';
    8650:	8485003a 	cmpeq	r2,r16,r18
    8654:	88a3c83a 	sub	r17,r17,r2
    8658:	88000005 	stb	zero,0(r17)

  if (actualLen < len) {
    return actualLen;
    865c:	8005883a 	mov	r2,r16
    actualLen += *str != '\n';
  }

  *(str - (actualLen == len)) = '\0';

  if (actualLen < len) {
    8660:	84801036 	bltu	r16,r18,86a4 <uart_read_data+0x84>
    return actualLen;
  } else {
    printf("Buffer Overflow - %d\n", actualLen);
    8664:	01000074 	movhi	r4,1
    8668:	800b883a 	mov	r5,r16
    866c:	212d2a04 	addi	r4,r4,-19288
    8670:	0009f280 	call	9f28 <printf>
    return -1;
    8674:	00bfffc4 	movi	r2,-1
    8678:	00000a06 	br	86a4 <uart_read_data+0x84>

int uart_read_data(char *str, int len) {
  unsigned int actualLen = 0;

  // Read from UART and store in buffer
  while (*str != '\n' && actualLen < len) {
    867c:	84bff42e 	bgeu	r16,r18,8650 <_gp+0xffff4ed4>
    uart_read_byte((uint8_t *)str);
    8680:	8809883a 	mov	r4,r17
    8684:	00085740 	call	8574 <uart_read_byte>
    str += *str != '\n';
    8688:	88800007 	ldb	r2,0(r17)
    868c:	10800298 	cmpnei	r2,r2,10
    8690:	88a3883a 	add	r17,r17,r2
    actualLen += *str != '\n';
    8694:	88800007 	ldb	r2,0(r17)
    8698:	10800298 	cmpnei	r2,r2,10
    869c:	80a1883a 	add	r16,r16,r2
    86a0:	003fe906 	br	8648 <_gp+0xffff4ecc>
    return actualLen;
  } else {
    printf("Buffer Overflow - %d\n", actualLen);
    return -1;
  }
}
    86a4:	dfc00417 	ldw	ra,16(sp)
    86a8:	dcc00317 	ldw	r19,12(sp)
    86ac:	dc800217 	ldw	r18,8(sp)
    86b0:	dc400117 	ldw	r17,4(sp)
    86b4:	dc000017 	ldw	r16,0(sp)
    86b8:	dec00504 	addi	sp,sp,20
    86bc:	f800283a 	ret

000086c0 <uart_wait_for_messages>:

char *uart_wait_for_messages(char **messages, unsigned int numMessages) {
    86c0:	defef904 	addi	sp,sp,-1052
    86c4:	dcc10315 	stw	r19,1036(sp)
    86c8:	2027883a 	mov	r19,r4
#ifdef DEBUG
  printf("Waiting for messages: ");
    86cc:	01000074 	movhi	r4,1
    86d0:	212d3004 	addi	r4,r4,-19264
    printf("Buffer Overflow - %d\n", actualLen);
    return -1;
  }
}

char *uart_wait_for_messages(char **messages, unsigned int numMessages) {
    86d4:	dd010415 	stw	r20,1040(sp)
    86d8:	dc410115 	stw	r17,1028(sp)
    86dc:	dc010015 	stw	r16,1024(sp)
    86e0:	dfc10615 	stw	ra,1048(sp)
    86e4:	dd410515 	stw	r21,1044(sp)
    86e8:	dc810215 	stw	r18,1032(sp)
    86ec:	2829883a 	mov	r20,r5
#ifdef DEBUG
  printf("Waiting for messages: ");
  for (unsigned int i = 0; i < numMessages; i++) {
    86f0:	9823883a 	mov	r17,r19
  }
}

char *uart_wait_for_messages(char **messages, unsigned int numMessages) {
#ifdef DEBUG
  printf("Waiting for messages: ");
    86f4:	0009f280 	call	9f28 <printf>
  for (unsigned int i = 0; i < numMessages; i++) {
    86f8:	0021883a 	mov	r16,zero
    86fc:	85000726 	beq	r16,r20,871c <uart_wait_for_messages+0x5c>
    printf("%s, ", messages[i]);
    8700:	89400017 	ldw	r5,0(r17)
    8704:	01000074 	movhi	r4,1
    8708:	212d3604 	addi	r4,r4,-19240
    870c:	0009f280 	call	9f28 <printf>
}

char *uart_wait_for_messages(char **messages, unsigned int numMessages) {
#ifdef DEBUG
  printf("Waiting for messages: ");
  for (unsigned int i = 0; i < numMessages; i++) {
    8710:	84000044 	addi	r16,r16,1
    8714:	8c400104 	addi	r17,r17,4
    8718:	003ff806 	br	86fc <_gp+0xffff4f80>
    printf("%s, ", messages[i]);
  }
  printf("\n");
    871c:	01000284 	movi	r4,10
    8720:	0009f7c0 	call	9f7c <putchar>
#endif

  char recvBuffer[UART_BUFFER_SIZE];
  char *yieldedMessage = NULL;
  do {
    uart_read_data(recvBuffer, UART_BUFFER_SIZE);
    8724:	01410004 	movi	r5,1024
    8728:	d809883a 	mov	r4,sp
    872c:	00086200 	call	8620 <uart_read_data>
    for (unsigned int i = 0; i < numMessages && !yieldedMessage; i++) {
    8730:	9825883a 	mov	r18,r19
    8734:	0023883a 	mov	r17,zero
    8738:	0021883a 	mov	r16,zero
    873c:	8d000a26 	beq	r17,r20,8768 <uart_wait_for_messages+0xa8>
    8740:	80000a1e 	bne	r16,zero,876c <uart_wait_for_messages+0xac>
      yieldedMessage =
          strcmp(recvBuffer, messages[i]) == 0 ? messages[i] : NULL;
    8744:	95400017 	ldw	r21,0(r18)
    8748:	d809883a 	mov	r4,sp
    874c:	a80b883a 	mov	r5,r21
    8750:	000a17c0 	call	a17c <strcmp>
    8754:	1000011e 	bne	r2,zero,875c <uart_wait_for_messages+0x9c>
    8758:	a821883a 	mov	r16,r21

  char recvBuffer[UART_BUFFER_SIZE];
  char *yieldedMessage = NULL;
  do {
    uart_read_data(recvBuffer, UART_BUFFER_SIZE);
    for (unsigned int i = 0; i < numMessages && !yieldedMessage; i++) {
    875c:	8c400044 	addi	r17,r17,1
    8760:	94800104 	addi	r18,r18,4
    8764:	003ff506 	br	873c <_gp+0xffff4fc0>
      yieldedMessage =
          strcmp(recvBuffer, messages[i]) == 0 ? messages[i] : NULL;
    }
  } while (!yieldedMessage);
    8768:	803fee26 	beq	r16,zero,8724 <_gp+0xffff4fa8>
  return yieldedMessage;
}
    876c:	8005883a 	mov	r2,r16
    8770:	dfc10617 	ldw	ra,1048(sp)
    8774:	dd410517 	ldw	r21,1044(sp)
    8778:	dd010417 	ldw	r20,1040(sp)
    877c:	dcc10317 	ldw	r19,1036(sp)
    8780:	dc810217 	ldw	r18,1032(sp)
    8784:	dc410117 	ldw	r17,1028(sp)
    8788:	dc010017 	ldw	r16,1024(sp)
    878c:	dec10704 	addi	sp,sp,1052
    8790:	f800283a 	ret

00008794 <uart_send_command>:

void uart_send_command(char *cmd, char **args, unsigned int numArgs) {
    8794:	defefc04 	addi	sp,sp,-1040
    8798:	dc410115 	stw	r17,1028(sp)
    879c:	dc010015 	stw	r16,1024(sp)
    87a0:	2023883a 	mov	r17,r4
    87a4:	2821883a 	mov	r16,r5
  char sendBuffer[UART_BUFFER_SIZE];
#ifdef DEBUG
  printf("Parsing Command: %s |", cmd);
    87a8:	200b883a 	mov	r5,r4
    87ac:	01000074 	movhi	r4,1
    87b0:	212d3804 	addi	r4,r4,-19232
    }
  } while (!yieldedMessage);
  return yieldedMessage;
}

void uart_send_command(char *cmd, char **args, unsigned int numArgs) {
    87b4:	dfc10315 	stw	ra,1036(sp)
    87b8:	dc810215 	stw	r18,1032(sp)
    87bc:	3025883a 	mov	r18,r6
  char sendBuffer[UART_BUFFER_SIZE];
#ifdef DEBUG
  printf("Parsing Command: %s |", cmd);
    87c0:	0009f280 	call	9f28 <printf>
#endif
  sprintf(sendBuffer, "%s", cmd);
    87c4:	880b883a 	mov	r5,r17
    87c8:	d809883a 	mov	r4,sp
    87cc:	000a1b40 	call	a1b4 <strcpy>
  for (unsigned int i = 0; i < numArgs; i++) {
    87d0:	0023883a 	mov	r17,zero
    87d4:	8c800d26 	beq	r17,r18,880c <uart_send_command+0x78>
#ifdef DEBUG
    printf(" %s,", args[i]);
    87d8:	81400017 	ldw	r5,0(r16)
    87dc:	01000074 	movhi	r4,1
    87e0:	212d3e04 	addi	r4,r4,-19208
    87e4:	0009f280 	call	9f28 <printf>
#endif
    sprintf(sendBuffer, "%s%s ", sendBuffer, args[i]);
    87e8:	81c00017 	ldw	r7,0(r16)
    87ec:	01400074 	movhi	r5,1
    87f0:	d80d883a 	mov	r6,sp
    87f4:	296d4004 	addi	r5,r5,-19200
    87f8:	d809883a 	mov	r4,sp
    87fc:	000a1040 	call	a104 <sprintf>
  char sendBuffer[UART_BUFFER_SIZE];
#ifdef DEBUG
  printf("Parsing Command: %s |", cmd);
#endif
  sprintf(sendBuffer, "%s", cmd);
  for (unsigned int i = 0; i < numArgs; i++) {
    8800:	8c400044 	addi	r17,r17,1
    8804:	84000104 	addi	r16,r16,4
    8808:	003ff206 	br	87d4 <_gp+0xffff5058>
#endif
    sprintf(sendBuffer, "%s%s ", sendBuffer, args[i]);
  }

#ifdef DEBUG
  printf("\nSending Command: %s\n", sendBuffer);
    880c:	01000074 	movhi	r4,1
    8810:	d80b883a 	mov	r5,sp
    8814:	212d4204 	addi	r4,r4,-19192
    8818:	0009f280 	call	9f28 <printf>
#endif
  uart_write_data(sendBuffer);
    881c:	d809883a 	mov	r4,sp
    8820:	00085d80 	call	85d8 <uart_write_data>
}
    8824:	dfc10317 	ldw	ra,1036(sp)
    8828:	dc810217 	ldw	r18,1032(sp)
    882c:	dc410117 	ldw	r17,1028(sp)
    8830:	dc010017 	ldw	r16,1024(sp)
    8834:	dec10404 	addi	sp,sp,1040
    8838:	f800283a 	ret

0000883c <uart_output>:

void uart_output(void) {
#ifdef DEBUG
  printf("----- UART REG ADDRS -----\n");
    883c:	01000074 	movhi	r4,1
  printf("\nSending Command: %s\n", sendBuffer);
#endif
  uart_write_data(sendBuffer);
}

void uart_output(void) {
    8840:	defffd04 	addi	sp,sp,-12
#ifdef DEBUG
  printf("----- UART REG ADDRS -----\n");
    8844:	212d4804 	addi	r4,r4,-19168
  printf("\nSending Command: %s\n", sendBuffer);
#endif
  uart_write_data(sendBuffer);
}

void uart_output(void) {
    8848:	dfc00215 	stw	ra,8(sp)
    884c:	dc000115 	stw	r16,4(sp)
#ifdef DEBUG
  printf("----- UART REG ADDRS -----\n");
    8850:	000a0180 	call	a018 <puts>
  printf("%p | %p | %p | %p\n", UART_RXDATA_REG, UART_TXDATA_REG,
    8854:	d0a04717 	ldw	r2,-32484(gp)
    8858:	d1e04917 	ldw	r7,-32476(gp)
    885c:	d1a04817 	ldw	r6,-32480(gp)
    8860:	d1604617 	ldw	r5,-32488(gp)
    8864:	01000074 	movhi	r4,1
    8868:	d8800015 	stw	r2,0(sp)
    886c:	212d4f04 	addi	r4,r4,-19140
    8870:	0009f280 	call	9f28 <printf>
         UART_STATUS_REG, UART_CONTROL_REG);

  printf("----- UART REGS -----\n");
    8874:	01000074 	movhi	r4,1
    8878:	212d5404 	addi	r4,r4,-19120
    887c:	000a0180 	call	a018 <puts>
  printf("%x | %x | %x | %x\n", *UART_RXDATA_REG, *UART_TXDATA_REG,
    8880:	d0a04617 	ldw	r2,-32488(gp)
    8884:	04000074 	movhi	r16,1
    8888:	842d5a04 	addi	r16,r16,-19096
    888c:	1140000b 	ldhu	r5,0(r2)
    8890:	d0a04817 	ldw	r2,-32480(gp)
    8894:	8009883a 	mov	r4,r16
    8898:	297fffcc 	andi	r5,r5,65535
    889c:	1180000b 	ldhu	r6,0(r2)
         *UART_STATUS_REG, *UART_CONTROL_REG);
    88a0:	d0a04917 	ldw	r2,-32476(gp)
  printf("----- UART REG ADDRS -----\n");
  printf("%p | %p | %p | %p\n", UART_RXDATA_REG, UART_TXDATA_REG,
         UART_STATUS_REG, UART_CONTROL_REG);

  printf("----- UART REGS -----\n");
  printf("%x | %x | %x | %x\n", *UART_RXDATA_REG, *UART_TXDATA_REG,
    88a4:	31bfffcc 	andi	r6,r6,65535
         *UART_STATUS_REG, *UART_CONTROL_REG);
    88a8:	11c0000b 	ldhu	r7,0(r2)
    88ac:	d0a04717 	ldw	r2,-32484(gp)
  printf("----- UART REG ADDRS -----\n");
  printf("%p | %p | %p | %p\n", UART_RXDATA_REG, UART_TXDATA_REG,
         UART_STATUS_REG, UART_CONTROL_REG);

  printf("----- UART REGS -----\n");
  printf("%x | %x | %x | %x\n", *UART_RXDATA_REG, *UART_TXDATA_REG,
    88b0:	39ffffcc 	andi	r7,r7,65535
         *UART_STATUS_REG, *UART_CONTROL_REG);
    88b4:	1080000b 	ldhu	r2,0(r2)
  printf("----- UART REG ADDRS -----\n");
  printf("%p | %p | %p | %p\n", UART_RXDATA_REG, UART_TXDATA_REG,
         UART_STATUS_REG, UART_CONTROL_REG);

  printf("----- UART REGS -----\n");
  printf("%x | %x | %x | %x\n", *UART_RXDATA_REG, *UART_TXDATA_REG,
    88b8:	10bfffcc 	andi	r2,r2,65535
    88bc:	d8800015 	stw	r2,0(sp)
    88c0:	0009f280 	call	9f28 <printf>
         *UART_STATUS_REG, *UART_CONTROL_REG);

  printf("----- UART REGS COMMANDS -----\n");
    88c4:	01000074 	movhi	r4,1
    88c8:	212d5f04 	addi	r4,r4,-19076
    88cc:	000a0180 	call	a018 <puts>
  printf("%x | %x | %x | %x\n", IORD_ALTERA_AVALON_UART_RXDATA(UART_0_BASE),
    88d0:	00800074 	movhi	r2,1
    88d4:	10850004 	addi	r2,r2,5120
    88d8:	11400037 	ldwio	r5,0(r2)
    88dc:	00800074 	movhi	r2,1
    88e0:	10850104 	addi	r2,r2,5124
    88e4:	11800037 	ldwio	r6,0(r2)
    88e8:	00800074 	movhi	r2,1
    88ec:	10850204 	addi	r2,r2,5128
    88f0:	11c00037 	ldwio	r7,0(r2)
    88f4:	00800074 	movhi	r2,1
    88f8:	10850304 	addi	r2,r2,5132
    88fc:	10800037 	ldwio	r2,0(r2)
    8900:	d8800015 	stw	r2,0(sp)
    8904:	8009883a 	mov	r4,r16
    8908:	0009f280 	call	9f28 <printf>
  // UART_RXDATA_MASK),
  //       uart_read_command(UART_TXDATA_REG, UART_TXDATA_MASK),
  //       uart_read_command(UART_STATUS_REG, UART_STATUS_MASK),
  //       uart_read_command(UART_CONTROL_REG, UART_CONTROL_MASK));
#endif
    890c:	dfc00217 	ldw	ra,8(sp)
    8910:	dc000117 	ldw	r16,4(sp)
    8914:	dec00304 	addi	sp,sp,12
    8918:	f800283a 	ret

0000891c <uart_init>:
}

// Global Function Definitions
void uart_init(void) {
  // Set the control register to enable the UART
  UART_RXDATA_REG = (uint16_t *)IOADDR_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
    891c:	00800074 	movhi	r2,1
    8920:	10850004 	addi	r2,r2,5120
    8924:	d0a04615 	stw	r2,-32488(gp)
  UART_TXDATA_REG = (uint16_t *)IOADDR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE);
    8928:	00800074 	movhi	r2,1
    892c:	10850104 	addi	r2,r2,5124
    8930:	d0a04815 	stw	r2,-32480(gp)
  UART_STATUS_REG = (uint16_t *)IOADDR_ALTERA_AVALON_UART_STATUS(UART_0_BASE);
  UART_CONTROL_REG = (uint16_t *)IOADDR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE);
    8934:	00c00074 	movhi	r3,1
// Global Function Definitions
void uart_init(void) {
  // Set the control register to enable the UART
  UART_RXDATA_REG = (uint16_t *)IOADDR_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
  UART_TXDATA_REG = (uint16_t *)IOADDR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE);
  UART_STATUS_REG = (uint16_t *)IOADDR_ALTERA_AVALON_UART_STATUS(UART_0_BASE);
    8938:	00800074 	movhi	r2,1
    893c:	10850204 	addi	r2,r2,5128
  UART_CONTROL_REG = (uint16_t *)IOADDR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE);
    8940:	18c50304 	addi	r3,r3,5132
// Global Function Definitions
void uart_init(void) {
  // Set the control register to enable the UART
  UART_RXDATA_REG = (uint16_t *)IOADDR_ALTERA_AVALON_UART_RXDATA(UART_0_BASE);
  UART_TXDATA_REG = (uint16_t *)IOADDR_ALTERA_AVALON_UART_TXDATA(UART_0_BASE);
  UART_STATUS_REG = (uint16_t *)IOADDR_ALTERA_AVALON_UART_STATUS(UART_0_BASE);
    8944:	d0a04915 	stw	r2,-32476(gp)
  UART_CONTROL_REG = (uint16_t *)IOADDR_ALTERA_AVALON_UART_CONTROL(UART_0_BASE);
    8948:	d0e04715 	stw	r3,-32484(gp)
  // UART_RXDATA_REG   =  (volatile uint16_t *)UART_0_BASE + UART_RXDATA_OFFSET;
  // UART_TXDATA_REG   =  (volatile uint16_t *)UART_0_BASE + UART_TXDATA_OFFSET;
  // UART_STATUS_REG   =  (volatile uint16_t *)UART_0_BASE + UART_STATUS_OFFSET;
  // UART_CONTROL_REG  =  (volatile uint16_t *)UART_0_BASE +
  // UART_CONTROL_OFFSET; Clear status register
  IOWR_ALTERA_AVALON_UART_STATUS(UART_0_BASE, 0);
    894c:	10000035 	stwio	zero,0(r2)
  // *UART_STATUS_REG = 0;

  uart_output();
    8950:	000883c1 	jmpi	883c <uart_output>

00008954 <__divsi3>:
    8954:	20001b16 	blt	r4,zero,89c4 <__divsi3+0x70>
    8958:	000f883a 	mov	r7,zero
    895c:	28001616 	blt	r5,zero,89b8 <__divsi3+0x64>
    8960:	200d883a 	mov	r6,r4
    8964:	29001a2e 	bgeu	r5,r4,89d0 <__divsi3+0x7c>
    8968:	00800804 	movi	r2,32
    896c:	00c00044 	movi	r3,1
    8970:	00000106 	br	8978 <__divsi3+0x24>
    8974:	10000d26 	beq	r2,zero,89ac <__divsi3+0x58>
    8978:	294b883a 	add	r5,r5,r5
    897c:	10bfffc4 	addi	r2,r2,-1
    8980:	18c7883a 	add	r3,r3,r3
    8984:	293ffb36 	bltu	r5,r4,8974 <_gp+0xffff51f8>
    8988:	0005883a 	mov	r2,zero
    898c:	18000726 	beq	r3,zero,89ac <__divsi3+0x58>
    8990:	0005883a 	mov	r2,zero
    8994:	31400236 	bltu	r6,r5,89a0 <__divsi3+0x4c>
    8998:	314dc83a 	sub	r6,r6,r5
    899c:	10c4b03a 	or	r2,r2,r3
    89a0:	1806d07a 	srli	r3,r3,1
    89a4:	280ad07a 	srli	r5,r5,1
    89a8:	183ffa1e 	bne	r3,zero,8994 <_gp+0xffff5218>
    89ac:	38000126 	beq	r7,zero,89b4 <__divsi3+0x60>
    89b0:	0085c83a 	sub	r2,zero,r2
    89b4:	f800283a 	ret
    89b8:	014bc83a 	sub	r5,zero,r5
    89bc:	39c0005c 	xori	r7,r7,1
    89c0:	003fe706 	br	8960 <_gp+0xffff51e4>
    89c4:	0109c83a 	sub	r4,zero,r4
    89c8:	01c00044 	movi	r7,1
    89cc:	003fe306 	br	895c <_gp+0xffff51e0>
    89d0:	00c00044 	movi	r3,1
    89d4:	003fee06 	br	8990 <_gp+0xffff5214>

000089d8 <__modsi3>:
    89d8:	20001716 	blt	r4,zero,8a38 <__modsi3+0x60>
    89dc:	000f883a 	mov	r7,zero
    89e0:	2005883a 	mov	r2,r4
    89e4:	28001216 	blt	r5,zero,8a30 <__modsi3+0x58>
    89e8:	2900162e 	bgeu	r5,r4,8a44 <__modsi3+0x6c>
    89ec:	01800804 	movi	r6,32
    89f0:	00c00044 	movi	r3,1
    89f4:	00000106 	br	89fc <__modsi3+0x24>
    89f8:	30000a26 	beq	r6,zero,8a24 <__modsi3+0x4c>
    89fc:	294b883a 	add	r5,r5,r5
    8a00:	31bfffc4 	addi	r6,r6,-1
    8a04:	18c7883a 	add	r3,r3,r3
    8a08:	293ffb36 	bltu	r5,r4,89f8 <_gp+0xffff527c>
    8a0c:	18000526 	beq	r3,zero,8a24 <__modsi3+0x4c>
    8a10:	1806d07a 	srli	r3,r3,1
    8a14:	11400136 	bltu	r2,r5,8a1c <__modsi3+0x44>
    8a18:	1145c83a 	sub	r2,r2,r5
    8a1c:	280ad07a 	srli	r5,r5,1
    8a20:	183ffb1e 	bne	r3,zero,8a10 <_gp+0xffff5294>
    8a24:	38000126 	beq	r7,zero,8a2c <__modsi3+0x54>
    8a28:	0085c83a 	sub	r2,zero,r2
    8a2c:	f800283a 	ret
    8a30:	014bc83a 	sub	r5,zero,r5
    8a34:	003fec06 	br	89e8 <_gp+0xffff526c>
    8a38:	0109c83a 	sub	r4,zero,r4
    8a3c:	01c00044 	movi	r7,1
    8a40:	003fe706 	br	89e0 <_gp+0xffff5264>
    8a44:	00c00044 	movi	r3,1
    8a48:	003ff106 	br	8a10 <_gp+0xffff5294>

00008a4c <__udivsi3>:
    8a4c:	200d883a 	mov	r6,r4
    8a50:	2900152e 	bgeu	r5,r4,8aa8 <__udivsi3+0x5c>
    8a54:	28001416 	blt	r5,zero,8aa8 <__udivsi3+0x5c>
    8a58:	00800804 	movi	r2,32
    8a5c:	00c00044 	movi	r3,1
    8a60:	00000206 	br	8a6c <__udivsi3+0x20>
    8a64:	10000e26 	beq	r2,zero,8aa0 <__udivsi3+0x54>
    8a68:	28000516 	blt	r5,zero,8a80 <__udivsi3+0x34>
    8a6c:	294b883a 	add	r5,r5,r5
    8a70:	10bfffc4 	addi	r2,r2,-1
    8a74:	18c7883a 	add	r3,r3,r3
    8a78:	293ffa36 	bltu	r5,r4,8a64 <_gp+0xffff52e8>
    8a7c:	18000826 	beq	r3,zero,8aa0 <__udivsi3+0x54>
    8a80:	0005883a 	mov	r2,zero
    8a84:	31400236 	bltu	r6,r5,8a90 <__udivsi3+0x44>
    8a88:	314dc83a 	sub	r6,r6,r5
    8a8c:	10c4b03a 	or	r2,r2,r3
    8a90:	1806d07a 	srli	r3,r3,1
    8a94:	280ad07a 	srli	r5,r5,1
    8a98:	183ffa1e 	bne	r3,zero,8a84 <_gp+0xffff5308>
    8a9c:	f800283a 	ret
    8aa0:	0005883a 	mov	r2,zero
    8aa4:	f800283a 	ret
    8aa8:	00c00044 	movi	r3,1
    8aac:	003ff406 	br	8a80 <_gp+0xffff5304>

00008ab0 <__umodsi3>:
    8ab0:	2005883a 	mov	r2,r4
    8ab4:	2900122e 	bgeu	r5,r4,8b00 <__umodsi3+0x50>
    8ab8:	28001116 	blt	r5,zero,8b00 <__umodsi3+0x50>
    8abc:	01800804 	movi	r6,32
    8ac0:	00c00044 	movi	r3,1
    8ac4:	00000206 	br	8ad0 <__umodsi3+0x20>
    8ac8:	30000c26 	beq	r6,zero,8afc <__umodsi3+0x4c>
    8acc:	28000516 	blt	r5,zero,8ae4 <__umodsi3+0x34>
    8ad0:	294b883a 	add	r5,r5,r5
    8ad4:	31bfffc4 	addi	r6,r6,-1
    8ad8:	18c7883a 	add	r3,r3,r3
    8adc:	293ffa36 	bltu	r5,r4,8ac8 <_gp+0xffff534c>
    8ae0:	18000626 	beq	r3,zero,8afc <__umodsi3+0x4c>
    8ae4:	1806d07a 	srli	r3,r3,1
    8ae8:	11400136 	bltu	r2,r5,8af0 <__umodsi3+0x40>
    8aec:	1145c83a 	sub	r2,r2,r5
    8af0:	280ad07a 	srli	r5,r5,1
    8af4:	183ffb1e 	bne	r3,zero,8ae4 <_gp+0xffff5368>
    8af8:	f800283a 	ret
    8afc:	f800283a 	ret
    8b00:	00c00044 	movi	r3,1
    8b04:	003ff706 	br	8ae4 <_gp+0xffff5368>

00008b08 <__adddf3>:
    8b08:	02c00434 	movhi	r11,16
    8b0c:	5affffc4 	addi	r11,r11,-1
    8b10:	2806d7fa 	srli	r3,r5,31
    8b14:	2ad4703a 	and	r10,r5,r11
    8b18:	3ad2703a 	and	r9,r7,r11
    8b1c:	3804d53a 	srli	r2,r7,20
    8b20:	3018d77a 	srli	r12,r6,29
    8b24:	280ad53a 	srli	r5,r5,20
    8b28:	501490fa 	slli	r10,r10,3
    8b2c:	2010d77a 	srli	r8,r4,29
    8b30:	481290fa 	slli	r9,r9,3
    8b34:	380ed7fa 	srli	r7,r7,31
    8b38:	defffb04 	addi	sp,sp,-20
    8b3c:	dc800215 	stw	r18,8(sp)
    8b40:	dc400115 	stw	r17,4(sp)
    8b44:	dc000015 	stw	r16,0(sp)
    8b48:	dfc00415 	stw	ra,16(sp)
    8b4c:	dcc00315 	stw	r19,12(sp)
    8b50:	1c803fcc 	andi	r18,r3,255
    8b54:	2c01ffcc 	andi	r16,r5,2047
    8b58:	5210b03a 	or	r8,r10,r8
    8b5c:	202290fa 	slli	r17,r4,3
    8b60:	1081ffcc 	andi	r2,r2,2047
    8b64:	4b12b03a 	or	r9,r9,r12
    8b68:	300c90fa 	slli	r6,r6,3
    8b6c:	91c07526 	beq	r18,r7,8d44 <__adddf3+0x23c>
    8b70:	8087c83a 	sub	r3,r16,r2
    8b74:	00c0ab0e 	bge	zero,r3,8e24 <__adddf3+0x31c>
    8b78:	10002a1e 	bne	r2,zero,8c24 <__adddf3+0x11c>
    8b7c:	4984b03a 	or	r2,r9,r6
    8b80:	1000961e 	bne	r2,zero,8ddc <__adddf3+0x2d4>
    8b84:	888001cc 	andi	r2,r17,7
    8b88:	10000726 	beq	r2,zero,8ba8 <__adddf3+0xa0>
    8b8c:	888003cc 	andi	r2,r17,15
    8b90:	00c00104 	movi	r3,4
    8b94:	10c00426 	beq	r2,r3,8ba8 <__adddf3+0xa0>
    8b98:	88c7883a 	add	r3,r17,r3
    8b9c:	1c63803a 	cmpltu	r17,r3,r17
    8ba0:	4451883a 	add	r8,r8,r17
    8ba4:	1823883a 	mov	r17,r3
    8ba8:	4080202c 	andhi	r2,r8,128
    8bac:	10005926 	beq	r2,zero,8d14 <__adddf3+0x20c>
    8bb0:	84000044 	addi	r16,r16,1
    8bb4:	0081ffc4 	movi	r2,2047
    8bb8:	8080ba26 	beq	r16,r2,8ea4 <__adddf3+0x39c>
    8bbc:	00bfe034 	movhi	r2,65408
    8bc0:	10bfffc4 	addi	r2,r2,-1
    8bc4:	4090703a 	and	r8,r8,r2
    8bc8:	4004977a 	slli	r2,r8,29
    8bcc:	4010927a 	slli	r8,r8,9
    8bd0:	8822d0fa 	srli	r17,r17,3
    8bd4:	8401ffcc 	andi	r16,r16,2047
    8bd8:	4010d33a 	srli	r8,r8,12
    8bdc:	9007883a 	mov	r3,r18
    8be0:	1444b03a 	or	r2,r2,r17
    8be4:	8401ffcc 	andi	r16,r16,2047
    8be8:	8020953a 	slli	r16,r16,20
    8bec:	18c03fcc 	andi	r3,r3,255
    8bf0:	01000434 	movhi	r4,16
    8bf4:	213fffc4 	addi	r4,r4,-1
    8bf8:	180697fa 	slli	r3,r3,31
    8bfc:	4110703a 	and	r8,r8,r4
    8c00:	4410b03a 	or	r8,r8,r16
    8c04:	40c6b03a 	or	r3,r8,r3
    8c08:	dfc00417 	ldw	ra,16(sp)
    8c0c:	dcc00317 	ldw	r19,12(sp)
    8c10:	dc800217 	ldw	r18,8(sp)
    8c14:	dc400117 	ldw	r17,4(sp)
    8c18:	dc000017 	ldw	r16,0(sp)
    8c1c:	dec00504 	addi	sp,sp,20
    8c20:	f800283a 	ret
    8c24:	0081ffc4 	movi	r2,2047
    8c28:	80bfd626 	beq	r16,r2,8b84 <_gp+0xffff5408>
    8c2c:	4a402034 	orhi	r9,r9,128
    8c30:	00800e04 	movi	r2,56
    8c34:	10c09f16 	blt	r2,r3,8eb4 <__adddf3+0x3ac>
    8c38:	008007c4 	movi	r2,31
    8c3c:	10c0c216 	blt	r2,r3,8f48 <__adddf3+0x440>
    8c40:	00800804 	movi	r2,32
    8c44:	10c5c83a 	sub	r2,r2,r3
    8c48:	488a983a 	sll	r5,r9,r2
    8c4c:	30c8d83a 	srl	r4,r6,r3
    8c50:	3084983a 	sll	r2,r6,r2
    8c54:	48c6d83a 	srl	r3,r9,r3
    8c58:	290cb03a 	or	r6,r5,r4
    8c5c:	1004c03a 	cmpne	r2,r2,zero
    8c60:	308cb03a 	or	r6,r6,r2
    8c64:	898dc83a 	sub	r6,r17,r6
    8c68:	89a3803a 	cmpltu	r17,r17,r6
    8c6c:	40d1c83a 	sub	r8,r8,r3
    8c70:	4451c83a 	sub	r8,r8,r17
    8c74:	3023883a 	mov	r17,r6
    8c78:	4080202c 	andhi	r2,r8,128
    8c7c:	10002326 	beq	r2,zero,8d0c <__adddf3+0x204>
    8c80:	04c02034 	movhi	r19,128
    8c84:	9cffffc4 	addi	r19,r19,-1
    8c88:	44e6703a 	and	r19,r8,r19
    8c8c:	98007626 	beq	r19,zero,8e68 <__adddf3+0x360>
    8c90:	9809883a 	mov	r4,r19
    8c94:	0009e600 	call	9e60 <__clzsi2>
    8c98:	10fffe04 	addi	r3,r2,-8
    8c9c:	010007c4 	movi	r4,31
    8ca0:	20c07716 	blt	r4,r3,8e80 <__adddf3+0x378>
    8ca4:	00800804 	movi	r2,32
    8ca8:	10c5c83a 	sub	r2,r2,r3
    8cac:	8884d83a 	srl	r2,r17,r2
    8cb0:	98d0983a 	sll	r8,r19,r3
    8cb4:	88e2983a 	sll	r17,r17,r3
    8cb8:	1204b03a 	or	r2,r2,r8
    8cbc:	1c007416 	blt	r3,r16,8e90 <__adddf3+0x388>
    8cc0:	1c21c83a 	sub	r16,r3,r16
    8cc4:	82000044 	addi	r8,r16,1
    8cc8:	00c007c4 	movi	r3,31
    8ccc:	1a009116 	blt	r3,r8,8f14 <__adddf3+0x40c>
    8cd0:	00c00804 	movi	r3,32
    8cd4:	1a07c83a 	sub	r3,r3,r8
    8cd8:	8a08d83a 	srl	r4,r17,r8
    8cdc:	88e2983a 	sll	r17,r17,r3
    8ce0:	10c6983a 	sll	r3,r2,r3
    8ce4:	1210d83a 	srl	r8,r2,r8
    8ce8:	8804c03a 	cmpne	r2,r17,zero
    8cec:	1906b03a 	or	r3,r3,r4
    8cf0:	18a2b03a 	or	r17,r3,r2
    8cf4:	0021883a 	mov	r16,zero
    8cf8:	003fa206 	br	8b84 <_gp+0xffff5408>
    8cfc:	1890b03a 	or	r8,r3,r2
    8d00:	40017d26 	beq	r8,zero,92f8 <__adddf3+0x7f0>
    8d04:	1011883a 	mov	r8,r2
    8d08:	1823883a 	mov	r17,r3
    8d0c:	888001cc 	andi	r2,r17,7
    8d10:	103f9e1e 	bne	r2,zero,8b8c <_gp+0xffff5410>
    8d14:	4004977a 	slli	r2,r8,29
    8d18:	8822d0fa 	srli	r17,r17,3
    8d1c:	4010d0fa 	srli	r8,r8,3
    8d20:	9007883a 	mov	r3,r18
    8d24:	1444b03a 	or	r2,r2,r17
    8d28:	0101ffc4 	movi	r4,2047
    8d2c:	81002426 	beq	r16,r4,8dc0 <__adddf3+0x2b8>
    8d30:	8120703a 	and	r16,r16,r4
    8d34:	01000434 	movhi	r4,16
    8d38:	213fffc4 	addi	r4,r4,-1
    8d3c:	4110703a 	and	r8,r8,r4
    8d40:	003fa806 	br	8be4 <_gp+0xffff5468>
    8d44:	8089c83a 	sub	r4,r16,r2
    8d48:	01005e0e 	bge	zero,r4,8ec4 <__adddf3+0x3bc>
    8d4c:	10002b26 	beq	r2,zero,8dfc <__adddf3+0x2f4>
    8d50:	0081ffc4 	movi	r2,2047
    8d54:	80bf8b26 	beq	r16,r2,8b84 <_gp+0xffff5408>
    8d58:	4a402034 	orhi	r9,r9,128
    8d5c:	00800e04 	movi	r2,56
    8d60:	1100a40e 	bge	r2,r4,8ff4 <__adddf3+0x4ec>
    8d64:	498cb03a 	or	r6,r9,r6
    8d68:	300ac03a 	cmpne	r5,r6,zero
    8d6c:	0013883a 	mov	r9,zero
    8d70:	2c4b883a 	add	r5,r5,r17
    8d74:	2c63803a 	cmpltu	r17,r5,r17
    8d78:	4a11883a 	add	r8,r9,r8
    8d7c:	8a11883a 	add	r8,r17,r8
    8d80:	2823883a 	mov	r17,r5
    8d84:	4080202c 	andhi	r2,r8,128
    8d88:	103fe026 	beq	r2,zero,8d0c <_gp+0xffff5590>
    8d8c:	84000044 	addi	r16,r16,1
    8d90:	0081ffc4 	movi	r2,2047
    8d94:	8080d226 	beq	r16,r2,90e0 <__adddf3+0x5d8>
    8d98:	00bfe034 	movhi	r2,65408
    8d9c:	10bfffc4 	addi	r2,r2,-1
    8da0:	4090703a 	and	r8,r8,r2
    8da4:	880ad07a 	srli	r5,r17,1
    8da8:	400897fa 	slli	r4,r8,31
    8dac:	88c0004c 	andi	r3,r17,1
    8db0:	28e2b03a 	or	r17,r5,r3
    8db4:	4010d07a 	srli	r8,r8,1
    8db8:	2462b03a 	or	r17,r4,r17
    8dbc:	003f7106 	br	8b84 <_gp+0xffff5408>
    8dc0:	4088b03a 	or	r4,r8,r2
    8dc4:	20014526 	beq	r4,zero,92dc <__adddf3+0x7d4>
    8dc8:	01000434 	movhi	r4,16
    8dcc:	42000234 	orhi	r8,r8,8
    8dd0:	213fffc4 	addi	r4,r4,-1
    8dd4:	4110703a 	and	r8,r8,r4
    8dd8:	003f8206 	br	8be4 <_gp+0xffff5468>
    8ddc:	18ffffc4 	addi	r3,r3,-1
    8de0:	1800491e 	bne	r3,zero,8f08 <__adddf3+0x400>
    8de4:	898bc83a 	sub	r5,r17,r6
    8de8:	8963803a 	cmpltu	r17,r17,r5
    8dec:	4251c83a 	sub	r8,r8,r9
    8df0:	4451c83a 	sub	r8,r8,r17
    8df4:	2823883a 	mov	r17,r5
    8df8:	003f9f06 	br	8c78 <_gp+0xffff54fc>
    8dfc:	4984b03a 	or	r2,r9,r6
    8e00:	103f6026 	beq	r2,zero,8b84 <_gp+0xffff5408>
    8e04:	213fffc4 	addi	r4,r4,-1
    8e08:	2000931e 	bne	r4,zero,9058 <__adddf3+0x550>
    8e0c:	898d883a 	add	r6,r17,r6
    8e10:	3463803a 	cmpltu	r17,r6,r17
    8e14:	4251883a 	add	r8,r8,r9
    8e18:	8a11883a 	add	r8,r17,r8
    8e1c:	3023883a 	mov	r17,r6
    8e20:	003fd806 	br	8d84 <_gp+0xffff5608>
    8e24:	1800541e 	bne	r3,zero,8f78 <__adddf3+0x470>
    8e28:	80800044 	addi	r2,r16,1
    8e2c:	1081ffcc 	andi	r2,r2,2047
    8e30:	00c00044 	movi	r3,1
    8e34:	1880a00e 	bge	r3,r2,90b8 <__adddf3+0x5b0>
    8e38:	8989c83a 	sub	r4,r17,r6
    8e3c:	8905803a 	cmpltu	r2,r17,r4
    8e40:	4267c83a 	sub	r19,r8,r9
    8e44:	98a7c83a 	sub	r19,r19,r2
    8e48:	9880202c 	andhi	r2,r19,128
    8e4c:	10006326 	beq	r2,zero,8fdc <__adddf3+0x4d4>
    8e50:	3463c83a 	sub	r17,r6,r17
    8e54:	4a07c83a 	sub	r3,r9,r8
    8e58:	344d803a 	cmpltu	r6,r6,r17
    8e5c:	19a7c83a 	sub	r19,r3,r6
    8e60:	3825883a 	mov	r18,r7
    8e64:	983f8a1e 	bne	r19,zero,8c90 <_gp+0xffff5514>
    8e68:	8809883a 	mov	r4,r17
    8e6c:	0009e600 	call	9e60 <__clzsi2>
    8e70:	10800804 	addi	r2,r2,32
    8e74:	10fffe04 	addi	r3,r2,-8
    8e78:	010007c4 	movi	r4,31
    8e7c:	20ff890e 	bge	r4,r3,8ca4 <_gp+0xffff5528>
    8e80:	10bff604 	addi	r2,r2,-40
    8e84:	8884983a 	sll	r2,r17,r2
    8e88:	0023883a 	mov	r17,zero
    8e8c:	1c3f8c0e 	bge	r3,r16,8cc0 <_gp+0xffff5544>
    8e90:	023fe034 	movhi	r8,65408
    8e94:	423fffc4 	addi	r8,r8,-1
    8e98:	80e1c83a 	sub	r16,r16,r3
    8e9c:	1210703a 	and	r8,r2,r8
    8ea0:	003f3806 	br	8b84 <_gp+0xffff5408>
    8ea4:	9007883a 	mov	r3,r18
    8ea8:	0011883a 	mov	r8,zero
    8eac:	0005883a 	mov	r2,zero
    8eb0:	003f4c06 	br	8be4 <_gp+0xffff5468>
    8eb4:	498cb03a 	or	r6,r9,r6
    8eb8:	300cc03a 	cmpne	r6,r6,zero
    8ebc:	0007883a 	mov	r3,zero
    8ec0:	003f6806 	br	8c64 <_gp+0xffff54e8>
    8ec4:	20009c1e 	bne	r4,zero,9138 <__adddf3+0x630>
    8ec8:	80800044 	addi	r2,r16,1
    8ecc:	1141ffcc 	andi	r5,r2,2047
    8ed0:	01000044 	movi	r4,1
    8ed4:	2140670e 	bge	r4,r5,9074 <__adddf3+0x56c>
    8ed8:	0101ffc4 	movi	r4,2047
    8edc:	11007f26 	beq	r2,r4,90dc <__adddf3+0x5d4>
    8ee0:	898d883a 	add	r6,r17,r6
    8ee4:	4247883a 	add	r3,r8,r9
    8ee8:	3451803a 	cmpltu	r8,r6,r17
    8eec:	40d1883a 	add	r8,r8,r3
    8ef0:	402297fa 	slli	r17,r8,31
    8ef4:	300cd07a 	srli	r6,r6,1
    8ef8:	4010d07a 	srli	r8,r8,1
    8efc:	1021883a 	mov	r16,r2
    8f00:	89a2b03a 	or	r17,r17,r6
    8f04:	003f1f06 	br	8b84 <_gp+0xffff5408>
    8f08:	0081ffc4 	movi	r2,2047
    8f0c:	80bf481e 	bne	r16,r2,8c30 <_gp+0xffff54b4>
    8f10:	003f1c06 	br	8b84 <_gp+0xffff5408>
    8f14:	843ff844 	addi	r16,r16,-31
    8f18:	01000804 	movi	r4,32
    8f1c:	1406d83a 	srl	r3,r2,r16
    8f20:	41005026 	beq	r8,r4,9064 <__adddf3+0x55c>
    8f24:	01001004 	movi	r4,64
    8f28:	2211c83a 	sub	r8,r4,r8
    8f2c:	1204983a 	sll	r2,r2,r8
    8f30:	88a2b03a 	or	r17,r17,r2
    8f34:	8822c03a 	cmpne	r17,r17,zero
    8f38:	1c62b03a 	or	r17,r3,r17
    8f3c:	0011883a 	mov	r8,zero
    8f40:	0021883a 	mov	r16,zero
    8f44:	003f7106 	br	8d0c <_gp+0xffff5590>
    8f48:	193ff804 	addi	r4,r3,-32
    8f4c:	00800804 	movi	r2,32
    8f50:	4908d83a 	srl	r4,r9,r4
    8f54:	18804526 	beq	r3,r2,906c <__adddf3+0x564>
    8f58:	00801004 	movi	r2,64
    8f5c:	10c5c83a 	sub	r2,r2,r3
    8f60:	4886983a 	sll	r3,r9,r2
    8f64:	198cb03a 	or	r6,r3,r6
    8f68:	300cc03a 	cmpne	r6,r6,zero
    8f6c:	218cb03a 	or	r6,r4,r6
    8f70:	0007883a 	mov	r3,zero
    8f74:	003f3b06 	br	8c64 <_gp+0xffff54e8>
    8f78:	80002a26 	beq	r16,zero,9024 <__adddf3+0x51c>
    8f7c:	0101ffc4 	movi	r4,2047
    8f80:	11006826 	beq	r2,r4,9124 <__adddf3+0x61c>
    8f84:	00c7c83a 	sub	r3,zero,r3
    8f88:	42002034 	orhi	r8,r8,128
    8f8c:	01000e04 	movi	r4,56
    8f90:	20c07c16 	blt	r4,r3,9184 <__adddf3+0x67c>
    8f94:	010007c4 	movi	r4,31
    8f98:	20c0da16 	blt	r4,r3,9304 <__adddf3+0x7fc>
    8f9c:	01000804 	movi	r4,32
    8fa0:	20c9c83a 	sub	r4,r4,r3
    8fa4:	4114983a 	sll	r10,r8,r4
    8fa8:	88cad83a 	srl	r5,r17,r3
    8fac:	8908983a 	sll	r4,r17,r4
    8fb0:	40c6d83a 	srl	r3,r8,r3
    8fb4:	5162b03a 	or	r17,r10,r5
    8fb8:	2008c03a 	cmpne	r4,r4,zero
    8fbc:	8922b03a 	or	r17,r17,r4
    8fc0:	3463c83a 	sub	r17,r6,r17
    8fc4:	48c7c83a 	sub	r3,r9,r3
    8fc8:	344d803a 	cmpltu	r6,r6,r17
    8fcc:	1991c83a 	sub	r8,r3,r6
    8fd0:	1021883a 	mov	r16,r2
    8fd4:	3825883a 	mov	r18,r7
    8fd8:	003f2706 	br	8c78 <_gp+0xffff54fc>
    8fdc:	24d0b03a 	or	r8,r4,r19
    8fe0:	40001b1e 	bne	r8,zero,9050 <__adddf3+0x548>
    8fe4:	0005883a 	mov	r2,zero
    8fe8:	0007883a 	mov	r3,zero
    8fec:	0021883a 	mov	r16,zero
    8ff0:	003f4d06 	br	8d28 <_gp+0xffff55ac>
    8ff4:	008007c4 	movi	r2,31
    8ff8:	11003c16 	blt	r2,r4,90ec <__adddf3+0x5e4>
    8ffc:	00800804 	movi	r2,32
    9000:	1105c83a 	sub	r2,r2,r4
    9004:	488e983a 	sll	r7,r9,r2
    9008:	310ad83a 	srl	r5,r6,r4
    900c:	3084983a 	sll	r2,r6,r2
    9010:	4912d83a 	srl	r9,r9,r4
    9014:	394ab03a 	or	r5,r7,r5
    9018:	1004c03a 	cmpne	r2,r2,zero
    901c:	288ab03a 	or	r5,r5,r2
    9020:	003f5306 	br	8d70 <_gp+0xffff55f4>
    9024:	4448b03a 	or	r4,r8,r17
    9028:	20003e26 	beq	r4,zero,9124 <__adddf3+0x61c>
    902c:	00c6303a 	nor	r3,zero,r3
    9030:	18003a1e 	bne	r3,zero,911c <__adddf3+0x614>
    9034:	3463c83a 	sub	r17,r6,r17
    9038:	4a07c83a 	sub	r3,r9,r8
    903c:	344d803a 	cmpltu	r6,r6,r17
    9040:	1991c83a 	sub	r8,r3,r6
    9044:	1021883a 	mov	r16,r2
    9048:	3825883a 	mov	r18,r7
    904c:	003f0a06 	br	8c78 <_gp+0xffff54fc>
    9050:	2023883a 	mov	r17,r4
    9054:	003f0d06 	br	8c8c <_gp+0xffff5510>
    9058:	0081ffc4 	movi	r2,2047
    905c:	80bf3f1e 	bne	r16,r2,8d5c <_gp+0xffff55e0>
    9060:	003ec806 	br	8b84 <_gp+0xffff5408>
    9064:	0005883a 	mov	r2,zero
    9068:	003fb106 	br	8f30 <_gp+0xffff57b4>
    906c:	0007883a 	mov	r3,zero
    9070:	003fbc06 	br	8f64 <_gp+0xffff57e8>
    9074:	4444b03a 	or	r2,r8,r17
    9078:	8000871e 	bne	r16,zero,9298 <__adddf3+0x790>
    907c:	1000ba26 	beq	r2,zero,9368 <__adddf3+0x860>
    9080:	4984b03a 	or	r2,r9,r6
    9084:	103ebf26 	beq	r2,zero,8b84 <_gp+0xffff5408>
    9088:	8985883a 	add	r2,r17,r6
    908c:	4247883a 	add	r3,r8,r9
    9090:	1451803a 	cmpltu	r8,r2,r17
    9094:	40d1883a 	add	r8,r8,r3
    9098:	40c0202c 	andhi	r3,r8,128
    909c:	1023883a 	mov	r17,r2
    90a0:	183f1a26 	beq	r3,zero,8d0c <_gp+0xffff5590>
    90a4:	00bfe034 	movhi	r2,65408
    90a8:	10bfffc4 	addi	r2,r2,-1
    90ac:	2021883a 	mov	r16,r4
    90b0:	4090703a 	and	r8,r8,r2
    90b4:	003eb306 	br	8b84 <_gp+0xffff5408>
    90b8:	4444b03a 	or	r2,r8,r17
    90bc:	8000291e 	bne	r16,zero,9164 <__adddf3+0x65c>
    90c0:	10004b1e 	bne	r2,zero,91f0 <__adddf3+0x6e8>
    90c4:	4990b03a 	or	r8,r9,r6
    90c8:	40008b26 	beq	r8,zero,92f8 <__adddf3+0x7f0>
    90cc:	4811883a 	mov	r8,r9
    90d0:	3023883a 	mov	r17,r6
    90d4:	3825883a 	mov	r18,r7
    90d8:	003eaa06 	br	8b84 <_gp+0xffff5408>
    90dc:	1021883a 	mov	r16,r2
    90e0:	0011883a 	mov	r8,zero
    90e4:	0005883a 	mov	r2,zero
    90e8:	003f0f06 	br	8d28 <_gp+0xffff55ac>
    90ec:	217ff804 	addi	r5,r4,-32
    90f0:	00800804 	movi	r2,32
    90f4:	494ad83a 	srl	r5,r9,r5
    90f8:	20807d26 	beq	r4,r2,92f0 <__adddf3+0x7e8>
    90fc:	00801004 	movi	r2,64
    9100:	1109c83a 	sub	r4,r2,r4
    9104:	4912983a 	sll	r9,r9,r4
    9108:	498cb03a 	or	r6,r9,r6
    910c:	300cc03a 	cmpne	r6,r6,zero
    9110:	298ab03a 	or	r5,r5,r6
    9114:	0013883a 	mov	r9,zero
    9118:	003f1506 	br	8d70 <_gp+0xffff55f4>
    911c:	0101ffc4 	movi	r4,2047
    9120:	113f9a1e 	bne	r2,r4,8f8c <_gp+0xffff5810>
    9124:	4811883a 	mov	r8,r9
    9128:	3023883a 	mov	r17,r6
    912c:	1021883a 	mov	r16,r2
    9130:	3825883a 	mov	r18,r7
    9134:	003e9306 	br	8b84 <_gp+0xffff5408>
    9138:	8000161e 	bne	r16,zero,9194 <__adddf3+0x68c>
    913c:	444ab03a 	or	r5,r8,r17
    9140:	28005126 	beq	r5,zero,9288 <__adddf3+0x780>
    9144:	0108303a 	nor	r4,zero,r4
    9148:	20004d1e 	bne	r4,zero,9280 <__adddf3+0x778>
    914c:	89a3883a 	add	r17,r17,r6
    9150:	4253883a 	add	r9,r8,r9
    9154:	898d803a 	cmpltu	r6,r17,r6
    9158:	3251883a 	add	r8,r6,r9
    915c:	1021883a 	mov	r16,r2
    9160:	003f0806 	br	8d84 <_gp+0xffff5608>
    9164:	1000301e 	bne	r2,zero,9228 <__adddf3+0x720>
    9168:	4984b03a 	or	r2,r9,r6
    916c:	10007126 	beq	r2,zero,9334 <__adddf3+0x82c>
    9170:	4811883a 	mov	r8,r9
    9174:	3023883a 	mov	r17,r6
    9178:	3825883a 	mov	r18,r7
    917c:	0401ffc4 	movi	r16,2047
    9180:	003e8006 	br	8b84 <_gp+0xffff5408>
    9184:	4462b03a 	or	r17,r8,r17
    9188:	8822c03a 	cmpne	r17,r17,zero
    918c:	0007883a 	mov	r3,zero
    9190:	003f8b06 	br	8fc0 <_gp+0xffff5844>
    9194:	0141ffc4 	movi	r5,2047
    9198:	11403b26 	beq	r2,r5,9288 <__adddf3+0x780>
    919c:	0109c83a 	sub	r4,zero,r4
    91a0:	42002034 	orhi	r8,r8,128
    91a4:	01400e04 	movi	r5,56
    91a8:	29006716 	blt	r5,r4,9348 <__adddf3+0x840>
    91ac:	014007c4 	movi	r5,31
    91b0:	29007016 	blt	r5,r4,9374 <__adddf3+0x86c>
    91b4:	01400804 	movi	r5,32
    91b8:	290bc83a 	sub	r5,r5,r4
    91bc:	4154983a 	sll	r10,r8,r5
    91c0:	890ed83a 	srl	r7,r17,r4
    91c4:	894a983a 	sll	r5,r17,r5
    91c8:	4108d83a 	srl	r4,r8,r4
    91cc:	51e2b03a 	or	r17,r10,r7
    91d0:	280ac03a 	cmpne	r5,r5,zero
    91d4:	8962b03a 	or	r17,r17,r5
    91d8:	89a3883a 	add	r17,r17,r6
    91dc:	2253883a 	add	r9,r4,r9
    91e0:	898d803a 	cmpltu	r6,r17,r6
    91e4:	3251883a 	add	r8,r6,r9
    91e8:	1021883a 	mov	r16,r2
    91ec:	003ee506 	br	8d84 <_gp+0xffff5608>
    91f0:	4984b03a 	or	r2,r9,r6
    91f4:	103e6326 	beq	r2,zero,8b84 <_gp+0xffff5408>
    91f8:	8987c83a 	sub	r3,r17,r6
    91fc:	88c9803a 	cmpltu	r4,r17,r3
    9200:	4245c83a 	sub	r2,r8,r9
    9204:	1105c83a 	sub	r2,r2,r4
    9208:	1100202c 	andhi	r4,r2,128
    920c:	203ebb26 	beq	r4,zero,8cfc <_gp+0xffff5580>
    9210:	3463c83a 	sub	r17,r6,r17
    9214:	4a07c83a 	sub	r3,r9,r8
    9218:	344d803a 	cmpltu	r6,r6,r17
    921c:	1991c83a 	sub	r8,r3,r6
    9220:	3825883a 	mov	r18,r7
    9224:	003e5706 	br	8b84 <_gp+0xffff5408>
    9228:	4984b03a 	or	r2,r9,r6
    922c:	10002e26 	beq	r2,zero,92e8 <__adddf3+0x7e0>
    9230:	4004d0fa 	srli	r2,r8,3
    9234:	8822d0fa 	srli	r17,r17,3
    9238:	4010977a 	slli	r8,r8,29
    923c:	10c0022c 	andhi	r3,r2,8
    9240:	4462b03a 	or	r17,r8,r17
    9244:	18000826 	beq	r3,zero,9268 <__adddf3+0x760>
    9248:	4808d0fa 	srli	r4,r9,3
    924c:	20c0022c 	andhi	r3,r4,8
    9250:	1800051e 	bne	r3,zero,9268 <__adddf3+0x760>
    9254:	300cd0fa 	srli	r6,r6,3
    9258:	4806977a 	slli	r3,r9,29
    925c:	2005883a 	mov	r2,r4
    9260:	3825883a 	mov	r18,r7
    9264:	19a2b03a 	or	r17,r3,r6
    9268:	8810d77a 	srli	r8,r17,29
    926c:	100490fa 	slli	r2,r2,3
    9270:	882290fa 	slli	r17,r17,3
    9274:	0401ffc4 	movi	r16,2047
    9278:	4090b03a 	or	r8,r8,r2
    927c:	003e4106 	br	8b84 <_gp+0xffff5408>
    9280:	0141ffc4 	movi	r5,2047
    9284:	117fc71e 	bne	r2,r5,91a4 <_gp+0xffff5a28>
    9288:	4811883a 	mov	r8,r9
    928c:	3023883a 	mov	r17,r6
    9290:	1021883a 	mov	r16,r2
    9294:	003e3b06 	br	8b84 <_gp+0xffff5408>
    9298:	10002f26 	beq	r2,zero,9358 <__adddf3+0x850>
    929c:	4984b03a 	or	r2,r9,r6
    92a0:	10001126 	beq	r2,zero,92e8 <__adddf3+0x7e0>
    92a4:	4004d0fa 	srli	r2,r8,3
    92a8:	8822d0fa 	srli	r17,r17,3
    92ac:	4010977a 	slli	r8,r8,29
    92b0:	10c0022c 	andhi	r3,r2,8
    92b4:	4462b03a 	or	r17,r8,r17
    92b8:	183feb26 	beq	r3,zero,9268 <_gp+0xffff5aec>
    92bc:	4808d0fa 	srli	r4,r9,3
    92c0:	20c0022c 	andhi	r3,r4,8
    92c4:	183fe81e 	bne	r3,zero,9268 <_gp+0xffff5aec>
    92c8:	300cd0fa 	srli	r6,r6,3
    92cc:	4806977a 	slli	r3,r9,29
    92d0:	2005883a 	mov	r2,r4
    92d4:	19a2b03a 	or	r17,r3,r6
    92d8:	003fe306 	br	9268 <_gp+0xffff5aec>
    92dc:	0011883a 	mov	r8,zero
    92e0:	0005883a 	mov	r2,zero
    92e4:	003e3f06 	br	8be4 <_gp+0xffff5468>
    92e8:	0401ffc4 	movi	r16,2047
    92ec:	003e2506 	br	8b84 <_gp+0xffff5408>
    92f0:	0013883a 	mov	r9,zero
    92f4:	003f8406 	br	9108 <_gp+0xffff598c>
    92f8:	0005883a 	mov	r2,zero
    92fc:	0007883a 	mov	r3,zero
    9300:	003e8906 	br	8d28 <_gp+0xffff55ac>
    9304:	197ff804 	addi	r5,r3,-32
    9308:	01000804 	movi	r4,32
    930c:	414ad83a 	srl	r5,r8,r5
    9310:	19002426 	beq	r3,r4,93a4 <__adddf3+0x89c>
    9314:	01001004 	movi	r4,64
    9318:	20c7c83a 	sub	r3,r4,r3
    931c:	40c6983a 	sll	r3,r8,r3
    9320:	1c46b03a 	or	r3,r3,r17
    9324:	1806c03a 	cmpne	r3,r3,zero
    9328:	28e2b03a 	or	r17,r5,r3
    932c:	0007883a 	mov	r3,zero
    9330:	003f2306 	br	8fc0 <_gp+0xffff5844>
    9334:	0007883a 	mov	r3,zero
    9338:	5811883a 	mov	r8,r11
    933c:	00bfffc4 	movi	r2,-1
    9340:	0401ffc4 	movi	r16,2047
    9344:	003e7806 	br	8d28 <_gp+0xffff55ac>
    9348:	4462b03a 	or	r17,r8,r17
    934c:	8822c03a 	cmpne	r17,r17,zero
    9350:	0009883a 	mov	r4,zero
    9354:	003fa006 	br	91d8 <_gp+0xffff5a5c>
    9358:	4811883a 	mov	r8,r9
    935c:	3023883a 	mov	r17,r6
    9360:	0401ffc4 	movi	r16,2047
    9364:	003e0706 	br	8b84 <_gp+0xffff5408>
    9368:	4811883a 	mov	r8,r9
    936c:	3023883a 	mov	r17,r6
    9370:	003e0406 	br	8b84 <_gp+0xffff5408>
    9374:	21fff804 	addi	r7,r4,-32
    9378:	01400804 	movi	r5,32
    937c:	41ced83a 	srl	r7,r8,r7
    9380:	21400a26 	beq	r4,r5,93ac <__adddf3+0x8a4>
    9384:	01401004 	movi	r5,64
    9388:	2909c83a 	sub	r4,r5,r4
    938c:	4108983a 	sll	r4,r8,r4
    9390:	2448b03a 	or	r4,r4,r17
    9394:	2008c03a 	cmpne	r4,r4,zero
    9398:	3922b03a 	or	r17,r7,r4
    939c:	0009883a 	mov	r4,zero
    93a0:	003f8d06 	br	91d8 <_gp+0xffff5a5c>
    93a4:	0007883a 	mov	r3,zero
    93a8:	003fdd06 	br	9320 <_gp+0xffff5ba4>
    93ac:	0009883a 	mov	r4,zero
    93b0:	003ff706 	br	9390 <_gp+0xffff5c14>

000093b4 <__divdf3>:
    93b4:	defff004 	addi	sp,sp,-64
    93b8:	dc800815 	stw	r18,32(sp)
    93bc:	2824d53a 	srli	r18,r5,20
    93c0:	dd800c15 	stw	r22,48(sp)
    93c4:	282cd7fa 	srli	r22,r5,31
    93c8:	dc000615 	stw	r16,24(sp)
    93cc:	04000434 	movhi	r16,16
    93d0:	843fffc4 	addi	r16,r16,-1
    93d4:	dfc00f15 	stw	ra,60(sp)
    93d8:	df000e15 	stw	fp,56(sp)
    93dc:	ddc00d15 	stw	r23,52(sp)
    93e0:	dd400b15 	stw	r21,44(sp)
    93e4:	dd000a15 	stw	r20,40(sp)
    93e8:	dcc00915 	stw	r19,36(sp)
    93ec:	dc400715 	stw	r17,28(sp)
    93f0:	9481ffcc 	andi	r18,r18,2047
    93f4:	2c20703a 	and	r16,r5,r16
    93f8:	b2003fcc 	andi	r8,r22,255
    93fc:	90006126 	beq	r18,zero,9584 <__divdf3+0x1d0>
    9400:	0081ffc4 	movi	r2,2047
    9404:	202b883a 	mov	r21,r4
    9408:	90803726 	beq	r18,r2,94e8 <__divdf3+0x134>
    940c:	80800434 	orhi	r2,r16,16
    9410:	100490fa 	slli	r2,r2,3
    9414:	2020d77a 	srli	r16,r4,29
    9418:	202a90fa 	slli	r21,r4,3
    941c:	94bf0044 	addi	r18,r18,-1023
    9420:	80a0b03a 	or	r16,r16,r2
    9424:	0013883a 	mov	r9,zero
    9428:	000b883a 	mov	r5,zero
    942c:	3806d53a 	srli	r3,r7,20
    9430:	382ed7fa 	srli	r23,r7,31
    9434:	04400434 	movhi	r17,16
    9438:	8c7fffc4 	addi	r17,r17,-1
    943c:	18c1ffcc 	andi	r3,r3,2047
    9440:	3029883a 	mov	r20,r6
    9444:	3c62703a 	and	r17,r7,r17
    9448:	bf003fcc 	andi	fp,r23,255
    944c:	18006e26 	beq	r3,zero,9608 <__divdf3+0x254>
    9450:	0081ffc4 	movi	r2,2047
    9454:	18806626 	beq	r3,r2,95f0 <__divdf3+0x23c>
    9458:	88800434 	orhi	r2,r17,16
    945c:	100490fa 	slli	r2,r2,3
    9460:	3022d77a 	srli	r17,r6,29
    9464:	302890fa 	slli	r20,r6,3
    9468:	18ff0044 	addi	r3,r3,-1023
    946c:	88a2b03a 	or	r17,r17,r2
    9470:	000f883a 	mov	r7,zero
    9474:	b5e6f03a 	xor	r19,r22,r23
    9478:	3a4cb03a 	or	r6,r7,r9
    947c:	008003c4 	movi	r2,15
    9480:	9809883a 	mov	r4,r19
    9484:	90c7c83a 	sub	r3,r18,r3
    9488:	9cc03fcc 	andi	r19,r19,255
    948c:	11809636 	bltu	r2,r6,96e8 <__divdf3+0x334>
    9490:	300c90ba 	slli	r6,r6,2
    9494:	00800074 	movhi	r2,1
    9498:	10a52a04 	addi	r2,r2,-27480
    949c:	308d883a 	add	r6,r6,r2
    94a0:	30800017 	ldw	r2,0(r6)
    94a4:	1000683a 	jmp	r2
    94a8:	000096e8 	cmpgeui	zero,zero,603
    94ac:	00009520 	cmpeqi	zero,zero,596
    94b0:	000096d8 	cmpnei	zero,zero,603
    94b4:	00009514 	movui	zero,596
    94b8:	000096d8 	cmpnei	zero,zero,603
    94bc:	000096ac 	andhi	zero,zero,602
    94c0:	000096d8 	cmpnei	zero,zero,603
    94c4:	00009514 	movui	zero,596
    94c8:	00009520 	cmpeqi	zero,zero,596
    94cc:	00009520 	cmpeqi	zero,zero,596
    94d0:	000096ac 	andhi	zero,zero,602
    94d4:	00009514 	movui	zero,596
    94d8:	00009504 	movi	zero,596
    94dc:	00009504 	movi	zero,596
    94e0:	00009504 	movi	zero,596
    94e4:	00009a70 	cmpltui	zero,zero,617
    94e8:	2404b03a 	or	r2,r4,r16
    94ec:	10006c1e 	bne	r2,zero,96a0 <__divdf3+0x2ec>
    94f0:	02400204 	movi	r9,8
    94f4:	0021883a 	mov	r16,zero
    94f8:	002b883a 	mov	r21,zero
    94fc:	01400084 	movi	r5,2
    9500:	003fca06 	br	942c <_gp+0xffff5cb0>
    9504:	8023883a 	mov	r17,r16
    9508:	a829883a 	mov	r20,r21
    950c:	4039883a 	mov	fp,r8
    9510:	280f883a 	mov	r7,r5
    9514:	00800084 	movi	r2,2
    9518:	3881601e 	bne	r7,r2,9a9c <__divdf3+0x6e8>
    951c:	e027883a 	mov	r19,fp
    9520:	9900004c 	andi	r4,r19,1
    9524:	0081ffc4 	movi	r2,2047
    9528:	0021883a 	mov	r16,zero
    952c:	002b883a 	mov	r21,zero
    9530:	1004953a 	slli	r2,r2,20
    9534:	20c03fcc 	andi	r3,r4,255
    9538:	01400434 	movhi	r5,16
    953c:	297fffc4 	addi	r5,r5,-1
    9540:	180697fa 	slli	r3,r3,31
    9544:	8160703a 	and	r16,r16,r5
    9548:	80a0b03a 	or	r16,r16,r2
    954c:	80c6b03a 	or	r3,r16,r3
    9550:	a805883a 	mov	r2,r21
    9554:	dfc00f17 	ldw	ra,60(sp)
    9558:	df000e17 	ldw	fp,56(sp)
    955c:	ddc00d17 	ldw	r23,52(sp)
    9560:	dd800c17 	ldw	r22,48(sp)
    9564:	dd400b17 	ldw	r21,44(sp)
    9568:	dd000a17 	ldw	r20,40(sp)
    956c:	dcc00917 	ldw	r19,36(sp)
    9570:	dc800817 	ldw	r18,32(sp)
    9574:	dc400717 	ldw	r17,28(sp)
    9578:	dc000617 	ldw	r16,24(sp)
    957c:	dec01004 	addi	sp,sp,64
    9580:	f800283a 	ret
    9584:	2404b03a 	or	r2,r4,r16
    9588:	2023883a 	mov	r17,r4
    958c:	10003f26 	beq	r2,zero,968c <__divdf3+0x2d8>
    9590:	80015e26 	beq	r16,zero,9b0c <__divdf3+0x758>
    9594:	8009883a 	mov	r4,r16
    9598:	d9800215 	stw	r6,8(sp)
    959c:	d9c00515 	stw	r7,20(sp)
    95a0:	da000415 	stw	r8,16(sp)
    95a4:	0009e600 	call	9e60 <__clzsi2>
    95a8:	d9800217 	ldw	r6,8(sp)
    95ac:	d9c00517 	ldw	r7,20(sp)
    95b0:	da000417 	ldw	r8,16(sp)
    95b4:	113ffd44 	addi	r4,r2,-11
    95b8:	00c00704 	movi	r3,28
    95bc:	19014f16 	blt	r3,r4,9afc <__divdf3+0x748>
    95c0:	00c00744 	movi	r3,29
    95c4:	157ffe04 	addi	r21,r2,-8
    95c8:	1907c83a 	sub	r3,r3,r4
    95cc:	8560983a 	sll	r16,r16,r21
    95d0:	88c6d83a 	srl	r3,r17,r3
    95d4:	8d6a983a 	sll	r21,r17,r21
    95d8:	1c20b03a 	or	r16,r3,r16
    95dc:	1080fcc4 	addi	r2,r2,1011
    95e0:	00a5c83a 	sub	r18,zero,r2
    95e4:	0013883a 	mov	r9,zero
    95e8:	000b883a 	mov	r5,zero
    95ec:	003f8f06 	br	942c <_gp+0xffff5cb0>
    95f0:	3444b03a 	or	r2,r6,r17
    95f4:	1000231e 	bne	r2,zero,9684 <__divdf3+0x2d0>
    95f8:	0023883a 	mov	r17,zero
    95fc:	0029883a 	mov	r20,zero
    9600:	01c00084 	movi	r7,2
    9604:	003f9b06 	br	9474 <_gp+0xffff5cf8>
    9608:	3444b03a 	or	r2,r6,r17
    960c:	10001926 	beq	r2,zero,9674 <__divdf3+0x2c0>
    9610:	88014b26 	beq	r17,zero,9b40 <__divdf3+0x78c>
    9614:	8809883a 	mov	r4,r17
    9618:	d9400115 	stw	r5,4(sp)
    961c:	d9800215 	stw	r6,8(sp)
    9620:	da000415 	stw	r8,16(sp)
    9624:	da400315 	stw	r9,12(sp)
    9628:	0009e600 	call	9e60 <__clzsi2>
    962c:	d9400117 	ldw	r5,4(sp)
    9630:	d9800217 	ldw	r6,8(sp)
    9634:	da000417 	ldw	r8,16(sp)
    9638:	da400317 	ldw	r9,12(sp)
    963c:	113ffd44 	addi	r4,r2,-11
    9640:	00c00704 	movi	r3,28
    9644:	19013a16 	blt	r3,r4,9b30 <__divdf3+0x77c>
    9648:	00c00744 	movi	r3,29
    964c:	153ffe04 	addi	r20,r2,-8
    9650:	1907c83a 	sub	r3,r3,r4
    9654:	8d22983a 	sll	r17,r17,r20
    9658:	30c6d83a 	srl	r3,r6,r3
    965c:	3528983a 	sll	r20,r6,r20
    9660:	1c62b03a 	or	r17,r3,r17
    9664:	1080fcc4 	addi	r2,r2,1011
    9668:	0087c83a 	sub	r3,zero,r2
    966c:	000f883a 	mov	r7,zero
    9670:	003f8006 	br	9474 <_gp+0xffff5cf8>
    9674:	0023883a 	mov	r17,zero
    9678:	0029883a 	mov	r20,zero
    967c:	01c00044 	movi	r7,1
    9680:	003f7c06 	br	9474 <_gp+0xffff5cf8>
    9684:	01c000c4 	movi	r7,3
    9688:	003f7a06 	br	9474 <_gp+0xffff5cf8>
    968c:	02400104 	movi	r9,4
    9690:	0021883a 	mov	r16,zero
    9694:	002b883a 	mov	r21,zero
    9698:	01400044 	movi	r5,1
    969c:	003f6306 	br	942c <_gp+0xffff5cb0>
    96a0:	02400304 	movi	r9,12
    96a4:	014000c4 	movi	r5,3
    96a8:	003f6006 	br	942c <_gp+0xffff5cb0>
    96ac:	04000434 	movhi	r16,16
    96b0:	0009883a 	mov	r4,zero
    96b4:	843fffc4 	addi	r16,r16,-1
    96b8:	057fffc4 	movi	r21,-1
    96bc:	0081ffc4 	movi	r2,2047
    96c0:	003f9b06 	br	9530 <_gp+0xffff5db4>
    96c4:	00c00044 	movi	r3,1
    96c8:	1887c83a 	sub	r3,r3,r2
    96cc:	01000e04 	movi	r4,56
    96d0:	20c1530e 	bge	r4,r3,9c20 <__divdf3+0x86c>
    96d4:	9900004c 	andi	r4,r19,1
    96d8:	0005883a 	mov	r2,zero
    96dc:	0021883a 	mov	r16,zero
    96e0:	002b883a 	mov	r21,zero
    96e4:	003f9206 	br	9530 <_gp+0xffff5db4>
    96e8:	8c012e36 	bltu	r17,r16,9ba4 <__divdf3+0x7f0>
    96ec:	84412c26 	beq	r16,r17,9ba0 <__divdf3+0x7ec>
    96f0:	a82f883a 	mov	r23,r21
    96f4:	18ffffc4 	addi	r3,r3,-1
    96f8:	002b883a 	mov	r21,zero
    96fc:	a004d63a 	srli	r2,r20,24
    9700:	8822923a 	slli	r17,r17,8
    9704:	a028923a 	slli	r20,r20,8
    9708:	8009883a 	mov	r4,r16
    970c:	88acb03a 	or	r22,r17,r2
    9710:	dd000015 	stw	r20,0(sp)
    9714:	b028d43a 	srli	r20,r22,16
    9718:	d8c00215 	stw	r3,8(sp)
    971c:	b4bfffcc 	andi	r18,r22,65535
    9720:	a00b883a 	mov	r5,r20
    9724:	0008a4c0 	call	8a4c <__udivsi3>
    9728:	100b883a 	mov	r5,r2
    972c:	9009883a 	mov	r4,r18
    9730:	1023883a 	mov	r17,r2
    9734:	0009ec40 	call	9ec4 <__mulsi3>
    9738:	8009883a 	mov	r4,r16
    973c:	a00b883a 	mov	r5,r20
    9740:	1039883a 	mov	fp,r2
    9744:	0008ab00 	call	8ab0 <__umodsi3>
    9748:	1004943a 	slli	r2,r2,16
    974c:	b808d43a 	srli	r4,r23,16
    9750:	d8c00217 	ldw	r3,8(sp)
    9754:	2084b03a 	or	r2,r4,r2
    9758:	1700062e 	bgeu	r2,fp,9774 <__divdf3+0x3c0>
    975c:	1585883a 	add	r2,r2,r22
    9760:	893fffc4 	addi	r4,r17,-1
    9764:	15811d36 	bltu	r2,r22,9bdc <__divdf3+0x828>
    9768:	17011c2e 	bgeu	r2,fp,9bdc <__divdf3+0x828>
    976c:	8c7fff84 	addi	r17,r17,-2
    9770:	1585883a 	add	r2,r2,r22
    9774:	1739c83a 	sub	fp,r2,fp
    9778:	a00b883a 	mov	r5,r20
    977c:	e009883a 	mov	r4,fp
    9780:	d8c00215 	stw	r3,8(sp)
    9784:	0008a4c0 	call	8a4c <__udivsi3>
    9788:	100b883a 	mov	r5,r2
    978c:	9009883a 	mov	r4,r18
    9790:	1021883a 	mov	r16,r2
    9794:	0009ec40 	call	9ec4 <__mulsi3>
    9798:	a00b883a 	mov	r5,r20
    979c:	e009883a 	mov	r4,fp
    97a0:	d8800415 	stw	r2,16(sp)
    97a4:	0008ab00 	call	8ab0 <__umodsi3>
    97a8:	1004943a 	slli	r2,r2,16
    97ac:	da000417 	ldw	r8,16(sp)
    97b0:	bdffffcc 	andi	r23,r23,65535
    97b4:	b884b03a 	or	r2,r23,r2
    97b8:	d8c00217 	ldw	r3,8(sp)
    97bc:	1200062e 	bgeu	r2,r8,97d8 <__divdf3+0x424>
    97c0:	1585883a 	add	r2,r2,r22
    97c4:	813fffc4 	addi	r4,r16,-1
    97c8:	15810236 	bltu	r2,r22,9bd4 <__divdf3+0x820>
    97cc:	1201012e 	bgeu	r2,r8,9bd4 <__divdf3+0x820>
    97d0:	843fff84 	addi	r16,r16,-2
    97d4:	1585883a 	add	r2,r2,r22
    97d8:	8822943a 	slli	r17,r17,16
    97dc:	d9800017 	ldw	r6,0(sp)
    97e0:	1211c83a 	sub	r8,r2,r8
    97e4:	8c22b03a 	or	r17,r17,r16
    97e8:	373fffcc 	andi	fp,r6,65535
    97ec:	8abfffcc 	andi	r10,r17,65535
    97f0:	8820d43a 	srli	r16,r17,16
    97f4:	5009883a 	mov	r4,r10
    97f8:	e00b883a 	mov	r5,fp
    97fc:	302ed43a 	srli	r23,r6,16
    9800:	d8c00215 	stw	r3,8(sp)
    9804:	da000415 	stw	r8,16(sp)
    9808:	da800115 	stw	r10,4(sp)
    980c:	0009ec40 	call	9ec4 <__mulsi3>
    9810:	800b883a 	mov	r5,r16
    9814:	e009883a 	mov	r4,fp
    9818:	d8800515 	stw	r2,20(sp)
    981c:	0009ec40 	call	9ec4 <__mulsi3>
    9820:	8009883a 	mov	r4,r16
    9824:	b80b883a 	mov	r5,r23
    9828:	d8800315 	stw	r2,12(sp)
    982c:	0009ec40 	call	9ec4 <__mulsi3>
    9830:	da800117 	ldw	r10,4(sp)
    9834:	b80b883a 	mov	r5,r23
    9838:	1021883a 	mov	r16,r2
    983c:	5009883a 	mov	r4,r10
    9840:	0009ec40 	call	9ec4 <__mulsi3>
    9844:	d9c00517 	ldw	r7,20(sp)
    9848:	da400317 	ldw	r9,12(sp)
    984c:	d8c00217 	ldw	r3,8(sp)
    9850:	3808d43a 	srli	r4,r7,16
    9854:	1245883a 	add	r2,r2,r9
    9858:	da000417 	ldw	r8,16(sp)
    985c:	2085883a 	add	r2,r4,r2
    9860:	1240022e 	bgeu	r2,r9,986c <__divdf3+0x4b8>
    9864:	01000074 	movhi	r4,1
    9868:	8121883a 	add	r16,r16,r4
    986c:	1008d43a 	srli	r4,r2,16
    9870:	1004943a 	slli	r2,r2,16
    9874:	39ffffcc 	andi	r7,r7,65535
    9878:	2409883a 	add	r4,r4,r16
    987c:	11c5883a 	add	r2,r2,r7
    9880:	4100bb36 	bltu	r8,r4,9b70 <__divdf3+0x7bc>
    9884:	4100d726 	beq	r8,r4,9be4 <__divdf3+0x830>
    9888:	4109c83a 	sub	r4,r8,r4
    988c:	a8a1c83a 	sub	r16,r21,r2
    9890:	ac2b803a 	cmpltu	r21,r21,r16
    9894:	256bc83a 	sub	r21,r4,r21
    9898:	b540d926 	beq	r22,r21,9c00 <__divdf3+0x84c>
    989c:	a00b883a 	mov	r5,r20
    98a0:	a809883a 	mov	r4,r21
    98a4:	d8c00215 	stw	r3,8(sp)
    98a8:	0008a4c0 	call	8a4c <__udivsi3>
    98ac:	100b883a 	mov	r5,r2
    98b0:	9009883a 	mov	r4,r18
    98b4:	d8800515 	stw	r2,20(sp)
    98b8:	0009ec40 	call	9ec4 <__mulsi3>
    98bc:	a809883a 	mov	r4,r21
    98c0:	a00b883a 	mov	r5,r20
    98c4:	d8800415 	stw	r2,16(sp)
    98c8:	0008ab00 	call	8ab0 <__umodsi3>
    98cc:	1004943a 	slli	r2,r2,16
    98d0:	8008d43a 	srli	r4,r16,16
    98d4:	da000417 	ldw	r8,16(sp)
    98d8:	d8c00217 	ldw	r3,8(sp)
    98dc:	2084b03a 	or	r2,r4,r2
    98e0:	d9c00517 	ldw	r7,20(sp)
    98e4:	1200062e 	bgeu	r2,r8,9900 <__divdf3+0x54c>
    98e8:	1585883a 	add	r2,r2,r22
    98ec:	393fffc4 	addi	r4,r7,-1
    98f0:	1580c536 	bltu	r2,r22,9c08 <__divdf3+0x854>
    98f4:	1200c42e 	bgeu	r2,r8,9c08 <__divdf3+0x854>
    98f8:	39ffff84 	addi	r7,r7,-2
    98fc:	1585883a 	add	r2,r2,r22
    9900:	122bc83a 	sub	r21,r2,r8
    9904:	a00b883a 	mov	r5,r20
    9908:	a809883a 	mov	r4,r21
    990c:	d8c00215 	stw	r3,8(sp)
    9910:	d9c00515 	stw	r7,20(sp)
    9914:	0008a4c0 	call	8a4c <__udivsi3>
    9918:	9009883a 	mov	r4,r18
    991c:	100b883a 	mov	r5,r2
    9920:	d8800415 	stw	r2,16(sp)
    9924:	0009ec40 	call	9ec4 <__mulsi3>
    9928:	a809883a 	mov	r4,r21
    992c:	a00b883a 	mov	r5,r20
    9930:	1025883a 	mov	r18,r2
    9934:	0008ab00 	call	8ab0 <__umodsi3>
    9938:	1004943a 	slli	r2,r2,16
    993c:	813fffcc 	andi	r4,r16,65535
    9940:	d8c00217 	ldw	r3,8(sp)
    9944:	20a0b03a 	or	r16,r4,r2
    9948:	d9c00517 	ldw	r7,20(sp)
    994c:	da000417 	ldw	r8,16(sp)
    9950:	8480062e 	bgeu	r16,r18,996c <__divdf3+0x5b8>
    9954:	85a1883a 	add	r16,r16,r22
    9958:	40bfffc4 	addi	r2,r8,-1
    995c:	8580ac36 	bltu	r16,r22,9c10 <__divdf3+0x85c>
    9960:	8480ab2e 	bgeu	r16,r18,9c10 <__divdf3+0x85c>
    9964:	423fff84 	addi	r8,r8,-2
    9968:	85a1883a 	add	r16,r16,r22
    996c:	3804943a 	slli	r2,r7,16
    9970:	84a1c83a 	sub	r16,r16,r18
    9974:	e009883a 	mov	r4,fp
    9978:	1228b03a 	or	r20,r2,r8
    997c:	a1ffffcc 	andi	r7,r20,65535
    9980:	a024d43a 	srli	r18,r20,16
    9984:	380b883a 	mov	r5,r7
    9988:	d8c00215 	stw	r3,8(sp)
    998c:	d9c00515 	stw	r7,20(sp)
    9990:	0009ec40 	call	9ec4 <__mulsi3>
    9994:	900b883a 	mov	r5,r18
    9998:	e009883a 	mov	r4,fp
    999c:	102b883a 	mov	r21,r2
    99a0:	0009ec40 	call	9ec4 <__mulsi3>
    99a4:	900b883a 	mov	r5,r18
    99a8:	b809883a 	mov	r4,r23
    99ac:	1039883a 	mov	fp,r2
    99b0:	0009ec40 	call	9ec4 <__mulsi3>
    99b4:	d9c00517 	ldw	r7,20(sp)
    99b8:	b80b883a 	mov	r5,r23
    99bc:	1025883a 	mov	r18,r2
    99c0:	3809883a 	mov	r4,r7
    99c4:	0009ec40 	call	9ec4 <__mulsi3>
    99c8:	a808d43a 	srli	r4,r21,16
    99cc:	1705883a 	add	r2,r2,fp
    99d0:	d8c00217 	ldw	r3,8(sp)
    99d4:	2085883a 	add	r2,r4,r2
    99d8:	1700022e 	bgeu	r2,fp,99e4 <__divdf3+0x630>
    99dc:	01000074 	movhi	r4,1
    99e0:	9125883a 	add	r18,r18,r4
    99e4:	1008d43a 	srli	r4,r2,16
    99e8:	1004943a 	slli	r2,r2,16
    99ec:	ad7fffcc 	andi	r21,r21,65535
    99f0:	2489883a 	add	r4,r4,r18
    99f4:	1545883a 	add	r2,r2,r21
    99f8:	81003836 	bltu	r16,r4,9adc <__divdf3+0x728>
    99fc:	81003626 	beq	r16,r4,9ad8 <__divdf3+0x724>
    9a00:	a5000054 	ori	r20,r20,1
    9a04:	1880ffc4 	addi	r2,r3,1023
    9a08:	00bf2e0e 	bge	zero,r2,96c4 <_gp+0xffff5f48>
    9a0c:	a10001cc 	andi	r4,r20,7
    9a10:	20000726 	beq	r4,zero,9a30 <__divdf3+0x67c>
    9a14:	a10003cc 	andi	r4,r20,15
    9a18:	01400104 	movi	r5,4
    9a1c:	21400426 	beq	r4,r5,9a30 <__divdf3+0x67c>
    9a20:	a149883a 	add	r4,r20,r5
    9a24:	2529803a 	cmpltu	r20,r4,r20
    9a28:	8d23883a 	add	r17,r17,r20
    9a2c:	2029883a 	mov	r20,r4
    9a30:	8900402c 	andhi	r4,r17,256
    9a34:	20000426 	beq	r4,zero,9a48 <__divdf3+0x694>
    9a38:	18810004 	addi	r2,r3,1024
    9a3c:	00ffc034 	movhi	r3,65280
    9a40:	18ffffc4 	addi	r3,r3,-1
    9a44:	88e2703a 	and	r17,r17,r3
    9a48:	00c1ff84 	movi	r3,2046
    9a4c:	18beb416 	blt	r3,r2,9520 <_gp+0xffff5da4>
    9a50:	a028d0fa 	srli	r20,r20,3
    9a54:	882a977a 	slli	r21,r17,29
    9a58:	8820927a 	slli	r16,r17,9
    9a5c:	1081ffcc 	andi	r2,r2,2047
    9a60:	ad2ab03a 	or	r21,r21,r20
    9a64:	8020d33a 	srli	r16,r16,12
    9a68:	9900004c 	andi	r4,r19,1
    9a6c:	003eb006 	br	9530 <_gp+0xffff5db4>
    9a70:	8080022c 	andhi	r2,r16,8
    9a74:	10001226 	beq	r2,zero,9ac0 <__divdf3+0x70c>
    9a78:	8880022c 	andhi	r2,r17,8
    9a7c:	1000101e 	bne	r2,zero,9ac0 <__divdf3+0x70c>
    9a80:	00800434 	movhi	r2,16
    9a84:	8c000234 	orhi	r16,r17,8
    9a88:	10bfffc4 	addi	r2,r2,-1
    9a8c:	b809883a 	mov	r4,r23
    9a90:	80a0703a 	and	r16,r16,r2
    9a94:	a02b883a 	mov	r21,r20
    9a98:	003f0806 	br	96bc <_gp+0xffff5f40>
    9a9c:	008000c4 	movi	r2,3
    9aa0:	3880b126 	beq	r7,r2,9d68 <__divdf3+0x9b4>
    9aa4:	00800044 	movi	r2,1
    9aa8:	38805b1e 	bne	r7,r2,9c18 <__divdf3+0x864>
    9aac:	e009883a 	mov	r4,fp
    9ab0:	0005883a 	mov	r2,zero
    9ab4:	0021883a 	mov	r16,zero
    9ab8:	002b883a 	mov	r21,zero
    9abc:	003e9c06 	br	9530 <_gp+0xffff5db4>
    9ac0:	00800434 	movhi	r2,16
    9ac4:	84000234 	orhi	r16,r16,8
    9ac8:	10bfffc4 	addi	r2,r2,-1
    9acc:	b009883a 	mov	r4,r22
    9ad0:	80a0703a 	and	r16,r16,r2
    9ad4:	003ef906 	br	96bc <_gp+0xffff5f40>
    9ad8:	103fca26 	beq	r2,zero,9a04 <_gp+0xffff6288>
    9adc:	b421883a 	add	r16,r22,r16
    9ae0:	a17fffc4 	addi	r5,r20,-1
    9ae4:	8580422e 	bgeu	r16,r22,9bf0 <__divdf3+0x83c>
    9ae8:	2829883a 	mov	r20,r5
    9aec:	813fc41e 	bne	r16,r4,9a00 <_gp+0xffff6284>
    9af0:	d9800017 	ldw	r6,0(sp)
    9af4:	30bfc21e 	bne	r6,r2,9a00 <_gp+0xffff6284>
    9af8:	003fc206 	br	9a04 <_gp+0xffff6288>
    9afc:	143ff604 	addi	r16,r2,-40
    9b00:	8c20983a 	sll	r16,r17,r16
    9b04:	002b883a 	mov	r21,zero
    9b08:	003eb406 	br	95dc <_gp+0xffff5e60>
    9b0c:	d9800215 	stw	r6,8(sp)
    9b10:	d9c00515 	stw	r7,20(sp)
    9b14:	da000415 	stw	r8,16(sp)
    9b18:	0009e600 	call	9e60 <__clzsi2>
    9b1c:	10800804 	addi	r2,r2,32
    9b20:	da000417 	ldw	r8,16(sp)
    9b24:	d9c00517 	ldw	r7,20(sp)
    9b28:	d9800217 	ldw	r6,8(sp)
    9b2c:	003ea106 	br	95b4 <_gp+0xffff5e38>
    9b30:	147ff604 	addi	r17,r2,-40
    9b34:	3462983a 	sll	r17,r6,r17
    9b38:	0029883a 	mov	r20,zero
    9b3c:	003ec906 	br	9664 <_gp+0xffff5ee8>
    9b40:	3009883a 	mov	r4,r6
    9b44:	d9400115 	stw	r5,4(sp)
    9b48:	d9800215 	stw	r6,8(sp)
    9b4c:	da000415 	stw	r8,16(sp)
    9b50:	da400315 	stw	r9,12(sp)
    9b54:	0009e600 	call	9e60 <__clzsi2>
    9b58:	10800804 	addi	r2,r2,32
    9b5c:	da400317 	ldw	r9,12(sp)
    9b60:	da000417 	ldw	r8,16(sp)
    9b64:	d9800217 	ldw	r6,8(sp)
    9b68:	d9400117 	ldw	r5,4(sp)
    9b6c:	003eb306 	br	963c <_gp+0xffff5ec0>
    9b70:	d9800017 	ldw	r6,0(sp)
    9b74:	a9ab883a 	add	r21,r21,r6
    9b78:	a98b803a 	cmpltu	r5,r21,r6
    9b7c:	2d8b883a 	add	r5,r5,r22
    9b80:	2a11883a 	add	r8,r5,r8
    9b84:	897fffc4 	addi	r5,r17,-1
    9b88:	b2000c2e 	bgeu	r22,r8,9bbc <__divdf3+0x808>
    9b8c:	41003f36 	bltu	r8,r4,9c8c <__divdf3+0x8d8>
    9b90:	22006c26 	beq	r4,r8,9d44 <__divdf3+0x990>
    9b94:	4109c83a 	sub	r4,r8,r4
    9b98:	2823883a 	mov	r17,r5
    9b9c:	003f3b06 	br	988c <_gp+0xffff6110>
    9ba0:	ad3ed336 	bltu	r21,r20,96f0 <_gp+0xffff5f74>
    9ba4:	a804d07a 	srli	r2,r21,1
    9ba8:	802e97fa 	slli	r23,r16,31
    9bac:	a82a97fa 	slli	r21,r21,31
    9bb0:	8020d07a 	srli	r16,r16,1
    9bb4:	b8aeb03a 	or	r23,r23,r2
    9bb8:	003ed006 	br	96fc <_gp+0xffff5f80>
    9bbc:	b23ff51e 	bne	r22,r8,9b94 <_gp+0xffff6418>
    9bc0:	d9800017 	ldw	r6,0(sp)
    9bc4:	a9bff12e 	bgeu	r21,r6,9b8c <_gp+0xffff6410>
    9bc8:	b109c83a 	sub	r4,r22,r4
    9bcc:	2823883a 	mov	r17,r5
    9bd0:	003f2e06 	br	988c <_gp+0xffff6110>
    9bd4:	2021883a 	mov	r16,r4
    9bd8:	003eff06 	br	97d8 <_gp+0xffff605c>
    9bdc:	2023883a 	mov	r17,r4
    9be0:	003ee406 	br	9774 <_gp+0xffff5ff8>
    9be4:	a8bfe236 	bltu	r21,r2,9b70 <_gp+0xffff63f4>
    9be8:	0009883a 	mov	r4,zero
    9bec:	003f2706 	br	988c <_gp+0xffff6110>
    9bf0:	81002d36 	bltu	r16,r4,9ca8 <__divdf3+0x8f4>
    9bf4:	24005626 	beq	r4,r16,9d50 <__divdf3+0x99c>
    9bf8:	2829883a 	mov	r20,r5
    9bfc:	003f8006 	br	9a00 <_gp+0xffff6284>
    9c00:	053fffc4 	movi	r20,-1
    9c04:	003f7f06 	br	9a04 <_gp+0xffff6288>
    9c08:	200f883a 	mov	r7,r4
    9c0c:	003f3c06 	br	9900 <_gp+0xffff6184>
    9c10:	1011883a 	mov	r8,r2
    9c14:	003f5506 	br	996c <_gp+0xffff61f0>
    9c18:	e027883a 	mov	r19,fp
    9c1c:	003f7906 	br	9a04 <_gp+0xffff6288>
    9c20:	010007c4 	movi	r4,31
    9c24:	20c02816 	blt	r4,r3,9cc8 <__divdf3+0x914>
    9c28:	00800804 	movi	r2,32
    9c2c:	10c5c83a 	sub	r2,r2,r3
    9c30:	888a983a 	sll	r5,r17,r2
    9c34:	a0c8d83a 	srl	r4,r20,r3
    9c38:	a084983a 	sll	r2,r20,r2
    9c3c:	88e2d83a 	srl	r17,r17,r3
    9c40:	2906b03a 	or	r3,r5,r4
    9c44:	1004c03a 	cmpne	r2,r2,zero
    9c48:	1886b03a 	or	r3,r3,r2
    9c4c:	188001cc 	andi	r2,r3,7
    9c50:	10000726 	beq	r2,zero,9c70 <__divdf3+0x8bc>
    9c54:	188003cc 	andi	r2,r3,15
    9c58:	01000104 	movi	r4,4
    9c5c:	11000426 	beq	r2,r4,9c70 <__divdf3+0x8bc>
    9c60:	1805883a 	mov	r2,r3
    9c64:	10c00104 	addi	r3,r2,4
    9c68:	1885803a 	cmpltu	r2,r3,r2
    9c6c:	88a3883a 	add	r17,r17,r2
    9c70:	8880202c 	andhi	r2,r17,128
    9c74:	10002926 	beq	r2,zero,9d1c <__divdf3+0x968>
    9c78:	9900004c 	andi	r4,r19,1
    9c7c:	00800044 	movi	r2,1
    9c80:	0021883a 	mov	r16,zero
    9c84:	002b883a 	mov	r21,zero
    9c88:	003e2906 	br	9530 <_gp+0xffff5db4>
    9c8c:	d9800017 	ldw	r6,0(sp)
    9c90:	8c7fff84 	addi	r17,r17,-2
    9c94:	a9ab883a 	add	r21,r21,r6
    9c98:	a98b803a 	cmpltu	r5,r21,r6
    9c9c:	2d8b883a 	add	r5,r5,r22
    9ca0:	2a11883a 	add	r8,r5,r8
    9ca4:	003ef806 	br	9888 <_gp+0xffff610c>
    9ca8:	d9800017 	ldw	r6,0(sp)
    9cac:	318f883a 	add	r7,r6,r6
    9cb0:	398b803a 	cmpltu	r5,r7,r6
    9cb4:	2d8d883a 	add	r6,r5,r22
    9cb8:	81a1883a 	add	r16,r16,r6
    9cbc:	a17fff84 	addi	r5,r20,-2
    9cc0:	d9c00015 	stw	r7,0(sp)
    9cc4:	003f8806 	br	9ae8 <_gp+0xffff636c>
    9cc8:	013ff844 	movi	r4,-31
    9ccc:	2085c83a 	sub	r2,r4,r2
    9cd0:	8888d83a 	srl	r4,r17,r2
    9cd4:	00800804 	movi	r2,32
    9cd8:	18802126 	beq	r3,r2,9d60 <__divdf3+0x9ac>
    9cdc:	04001004 	movi	r16,64
    9ce0:	80c7c83a 	sub	r3,r16,r3
    9ce4:	88e0983a 	sll	r16,r17,r3
    9ce8:	8504b03a 	or	r2,r16,r20
    9cec:	1004c03a 	cmpne	r2,r2,zero
    9cf0:	2084b03a 	or	r2,r4,r2
    9cf4:	144001cc 	andi	r17,r2,7
    9cf8:	88000d1e 	bne	r17,zero,9d30 <__divdf3+0x97c>
    9cfc:	0021883a 	mov	r16,zero
    9d00:	102ad0fa 	srli	r21,r2,3
    9d04:	9900004c 	andi	r4,r19,1
    9d08:	0005883a 	mov	r2,zero
    9d0c:	ac6ab03a 	or	r21,r21,r17
    9d10:	003e0706 	br	9530 <_gp+0xffff5db4>
    9d14:	1007883a 	mov	r3,r2
    9d18:	0023883a 	mov	r17,zero
    9d1c:	8820927a 	slli	r16,r17,9
    9d20:	1805883a 	mov	r2,r3
    9d24:	8822977a 	slli	r17,r17,29
    9d28:	8020d33a 	srli	r16,r16,12
    9d2c:	003ff406 	br	9d00 <_gp+0xffff6584>
    9d30:	10c003cc 	andi	r3,r2,15
    9d34:	01000104 	movi	r4,4
    9d38:	193ff626 	beq	r3,r4,9d14 <_gp+0xffff6598>
    9d3c:	0023883a 	mov	r17,zero
    9d40:	003fc806 	br	9c64 <_gp+0xffff64e8>
    9d44:	a8bfd136 	bltu	r21,r2,9c8c <_gp+0xffff6510>
    9d48:	2823883a 	mov	r17,r5
    9d4c:	003fa606 	br	9be8 <_gp+0xffff646c>
    9d50:	d9800017 	ldw	r6,0(sp)
    9d54:	30bfd436 	bltu	r6,r2,9ca8 <_gp+0xffff652c>
    9d58:	2829883a 	mov	r20,r5
    9d5c:	003f6406 	br	9af0 <_gp+0xffff6374>
    9d60:	0021883a 	mov	r16,zero
    9d64:	003fe006 	br	9ce8 <_gp+0xffff656c>
    9d68:	00800434 	movhi	r2,16
    9d6c:	8c000234 	orhi	r16,r17,8
    9d70:	10bfffc4 	addi	r2,r2,-1
    9d74:	e009883a 	mov	r4,fp
    9d78:	80a0703a 	and	r16,r16,r2
    9d7c:	a02b883a 	mov	r21,r20
    9d80:	003e4e06 	br	96bc <_gp+0xffff5f40>

00009d84 <__floatsidf>:
    9d84:	defffd04 	addi	sp,sp,-12
    9d88:	dfc00215 	stw	ra,8(sp)
    9d8c:	dc400115 	stw	r17,4(sp)
    9d90:	dc000015 	stw	r16,0(sp)
    9d94:	20002b26 	beq	r4,zero,9e44 <__floatsidf+0xc0>
    9d98:	2023883a 	mov	r17,r4
    9d9c:	2020d7fa 	srli	r16,r4,31
    9da0:	20002d16 	blt	r4,zero,9e58 <__floatsidf+0xd4>
    9da4:	8809883a 	mov	r4,r17
    9da8:	0009e600 	call	9e60 <__clzsi2>
    9dac:	01410784 	movi	r5,1054
    9db0:	288bc83a 	sub	r5,r5,r2
    9db4:	01010cc4 	movi	r4,1075
    9db8:	2149c83a 	sub	r4,r4,r5
    9dbc:	00c007c4 	movi	r3,31
    9dc0:	1900160e 	bge	r3,r4,9e1c <__floatsidf+0x98>
    9dc4:	00c104c4 	movi	r3,1043
    9dc8:	1947c83a 	sub	r3,r3,r5
    9dcc:	88c6983a 	sll	r3,r17,r3
    9dd0:	00800434 	movhi	r2,16
    9dd4:	10bfffc4 	addi	r2,r2,-1
    9dd8:	1886703a 	and	r3,r3,r2
    9ddc:	2941ffcc 	andi	r5,r5,2047
    9de0:	800d883a 	mov	r6,r16
    9de4:	0005883a 	mov	r2,zero
    9de8:	280a953a 	slli	r5,r5,20
    9dec:	31803fcc 	andi	r6,r6,255
    9df0:	01000434 	movhi	r4,16
    9df4:	300c97fa 	slli	r6,r6,31
    9df8:	213fffc4 	addi	r4,r4,-1
    9dfc:	1906703a 	and	r3,r3,r4
    9e00:	1946b03a 	or	r3,r3,r5
    9e04:	1986b03a 	or	r3,r3,r6
    9e08:	dfc00217 	ldw	ra,8(sp)
    9e0c:	dc400117 	ldw	r17,4(sp)
    9e10:	dc000017 	ldw	r16,0(sp)
    9e14:	dec00304 	addi	sp,sp,12
    9e18:	f800283a 	ret
    9e1c:	00c002c4 	movi	r3,11
    9e20:	1887c83a 	sub	r3,r3,r2
    9e24:	88c6d83a 	srl	r3,r17,r3
    9e28:	8904983a 	sll	r2,r17,r4
    9e2c:	01000434 	movhi	r4,16
    9e30:	213fffc4 	addi	r4,r4,-1
    9e34:	2941ffcc 	andi	r5,r5,2047
    9e38:	1906703a 	and	r3,r3,r4
    9e3c:	800d883a 	mov	r6,r16
    9e40:	003fe906 	br	9de8 <_gp+0xffff666c>
    9e44:	000d883a 	mov	r6,zero
    9e48:	000b883a 	mov	r5,zero
    9e4c:	0007883a 	mov	r3,zero
    9e50:	0005883a 	mov	r2,zero
    9e54:	003fe406 	br	9de8 <_gp+0xffff666c>
    9e58:	0123c83a 	sub	r17,zero,r4
    9e5c:	003fd106 	br	9da4 <_gp+0xffff6628>

00009e60 <__clzsi2>:
    9e60:	00bfffd4 	movui	r2,65535
    9e64:	11000536 	bltu	r2,r4,9e7c <__clzsi2+0x1c>
    9e68:	00803fc4 	movi	r2,255
    9e6c:	11000f36 	bltu	r2,r4,9eac <__clzsi2+0x4c>
    9e70:	00800804 	movi	r2,32
    9e74:	0007883a 	mov	r3,zero
    9e78:	00000506 	br	9e90 <__clzsi2+0x30>
    9e7c:	00804034 	movhi	r2,256
    9e80:	10bfffc4 	addi	r2,r2,-1
    9e84:	11000c2e 	bgeu	r2,r4,9eb8 <__clzsi2+0x58>
    9e88:	00800204 	movi	r2,8
    9e8c:	00c00604 	movi	r3,24
    9e90:	20c8d83a 	srl	r4,r4,r3
    9e94:	00c00074 	movhi	r3,1
    9e98:	18ed66c4 	addi	r3,r3,-19045
    9e9c:	1909883a 	add	r4,r3,r4
    9ea0:	20c00003 	ldbu	r3,0(r4)
    9ea4:	10c5c83a 	sub	r2,r2,r3
    9ea8:	f800283a 	ret
    9eac:	00800604 	movi	r2,24
    9eb0:	00c00204 	movi	r3,8
    9eb4:	003ff606 	br	9e90 <_gp+0xffff6714>
    9eb8:	00800404 	movi	r2,16
    9ebc:	1007883a 	mov	r3,r2
    9ec0:	003ff306 	br	9e90 <_gp+0xffff6714>

00009ec4 <__mulsi3>:
    9ec4:	0005883a 	mov	r2,zero
    9ec8:	20000726 	beq	r4,zero,9ee8 <__mulsi3+0x24>
    9ecc:	20c0004c 	andi	r3,r4,1
    9ed0:	2008d07a 	srli	r4,r4,1
    9ed4:	18000126 	beq	r3,zero,9edc <__mulsi3+0x18>
    9ed8:	1145883a 	add	r2,r2,r5
    9edc:	294b883a 	add	r5,r5,r5
    9ee0:	203ffa1e 	bne	r4,zero,9ecc <_gp+0xffff6750>
    9ee4:	f800283a 	ret
    9ee8:	f800283a 	ret

00009eec <_printf_r>:
    9eec:	defffd04 	addi	sp,sp,-12
    9ef0:	dfc00015 	stw	ra,0(sp)
    9ef4:	d9800115 	stw	r6,4(sp)
    9ef8:	d9c00215 	stw	r7,8(sp)
    9efc:	20c00217 	ldw	r3,8(r4)
    9f00:	01800074 	movhi	r6,1
    9f04:	31ab5904 	addi	r6,r6,-21148
    9f08:	19800115 	stw	r6,4(r3)
    9f0c:	280d883a 	mov	r6,r5
    9f10:	21400217 	ldw	r5,8(r4)
    9f14:	d9c00104 	addi	r7,sp,4
    9f18:	000a81c0 	call	a81c <___vfprintf_internal_r>
    9f1c:	dfc00017 	ldw	ra,0(sp)
    9f20:	dec00304 	addi	sp,sp,12
    9f24:	f800283a 	ret

00009f28 <printf>:
    9f28:	defffc04 	addi	sp,sp,-16
    9f2c:	dfc00015 	stw	ra,0(sp)
    9f30:	d9400115 	stw	r5,4(sp)
    9f34:	d9800215 	stw	r6,8(sp)
    9f38:	d9c00315 	stw	r7,12(sp)
    9f3c:	00800074 	movhi	r2,1
    9f40:	10ade104 	addi	r2,r2,-18556
    9f44:	10800017 	ldw	r2,0(r2)
    9f48:	01400074 	movhi	r5,1
    9f4c:	296b5904 	addi	r5,r5,-21148
    9f50:	10c00217 	ldw	r3,8(r2)
    9f54:	d9800104 	addi	r6,sp,4
    9f58:	19400115 	stw	r5,4(r3)
    9f5c:	200b883a 	mov	r5,r4
    9f60:	11000217 	ldw	r4,8(r2)
    9f64:	000ad480 	call	ad48 <__vfprintf_internal>
    9f68:	dfc00017 	ldw	ra,0(sp)
    9f6c:	dec00404 	addi	sp,sp,16
    9f70:	f800283a 	ret

00009f74 <_putchar_r>:
    9f74:	21800217 	ldw	r6,8(r4)
    9f78:	000af781 	jmpi	af78 <_putc_r>

00009f7c <putchar>:
    9f7c:	00800074 	movhi	r2,1
    9f80:	10ade104 	addi	r2,r2,-18556
    9f84:	10800017 	ldw	r2,0(r2)
    9f88:	200b883a 	mov	r5,r4
    9f8c:	11800217 	ldw	r6,8(r2)
    9f90:	1009883a 	mov	r4,r2
    9f94:	000af781 	jmpi	af78 <_putc_r>

00009f98 <_puts_r>:
    9f98:	defffd04 	addi	sp,sp,-12
    9f9c:	dc000015 	stw	r16,0(sp)
    9fa0:	2021883a 	mov	r16,r4
    9fa4:	2809883a 	mov	r4,r5
    9fa8:	dfc00215 	stw	ra,8(sp)
    9fac:	dc400115 	stw	r17,4(sp)
    9fb0:	2823883a 	mov	r17,r5
    9fb4:	000a1e00 	call	a1e0 <strlen>
    9fb8:	81400217 	ldw	r5,8(r16)
    9fbc:	01000074 	movhi	r4,1
    9fc0:	212b5904 	addi	r4,r4,-21148
    9fc4:	29000115 	stw	r4,4(r5)
    9fc8:	100f883a 	mov	r7,r2
    9fcc:	880d883a 	mov	r6,r17
    9fd0:	8009883a 	mov	r4,r16
    9fd4:	000ad640 	call	ad64 <__sfvwrite_small_dev>
    9fd8:	00ffffc4 	movi	r3,-1
    9fdc:	10c00926 	beq	r2,r3,a004 <_puts_r+0x6c>
    9fe0:	81400217 	ldw	r5,8(r16)
    9fe4:	01800074 	movhi	r6,1
    9fe8:	01c00044 	movi	r7,1
    9fec:	28800117 	ldw	r2,4(r5)
    9ff0:	31ad2f04 	addi	r6,r6,-19268
    9ff4:	8009883a 	mov	r4,r16
    9ff8:	103ee83a 	callr	r2
    9ffc:	10bfffe0 	cmpeqi	r2,r2,-1
    a000:	0085c83a 	sub	r2,zero,r2
    a004:	dfc00217 	ldw	ra,8(sp)
    a008:	dc400117 	ldw	r17,4(sp)
    a00c:	dc000017 	ldw	r16,0(sp)
    a010:	dec00304 	addi	sp,sp,12
    a014:	f800283a 	ret

0000a018 <puts>:
    a018:	00800074 	movhi	r2,1
    a01c:	10ade104 	addi	r2,r2,-18556
    a020:	200b883a 	mov	r5,r4
    a024:	11000017 	ldw	r4,0(r2)
    a028:	0009f981 	jmpi	9f98 <_puts_r>

0000a02c <srand>:
    a02c:	00800074 	movhi	r2,1
    a030:	10ae2904 	addi	r2,r2,-18268
    a034:	11000015 	stw	r4,0(r2)
    a038:	10000115 	stw	zero,4(r2)
    a03c:	f800283a 	ret

0000a040 <rand>:
    a040:	defffe04 	addi	sp,sp,-8
    a044:	dc000015 	stw	r16,0(sp)
    a048:	04000074 	movhi	r16,1
    a04c:	842e2904 	addi	r16,r16,-18268
    a050:	81000017 	ldw	r4,0(r16)
    a054:	81400117 	ldw	r5,4(r16)
    a058:	01932574 	movhi	r6,19605
    a05c:	01d614b4 	movhi	r7,22610
    a060:	319fcb44 	addi	r6,r6,32557
    a064:	39fd0b44 	addi	r7,r7,-3027
    a068:	dfc00115 	stw	ra,4(sp)
    a06c:	000b0280 	call	b028 <__muldi3>
    a070:	11000044 	addi	r4,r2,1
    a074:	2085803a 	cmpltu	r2,r4,r2
    a078:	10c7883a 	add	r3,r2,r3
    a07c:	00a00034 	movhi	r2,32768
    a080:	10bfffc4 	addi	r2,r2,-1
    a084:	1884703a 	and	r2,r3,r2
    a088:	81000015 	stw	r4,0(r16)
    a08c:	80c00115 	stw	r3,4(r16)
    a090:	dfc00117 	ldw	ra,4(sp)
    a094:	dc000017 	ldw	r16,0(sp)
    a098:	dec00204 	addi	sp,sp,8
    a09c:	f800283a 	ret

0000a0a0 <_sprintf_r>:
    a0a0:	defff704 	addi	sp,sp,-36
    a0a4:	dfc00715 	stw	ra,28(sp)
    a0a8:	d9c00815 	stw	r7,32(sp)
    a0ac:	00808204 	movi	r2,520
    a0b0:	d880000d 	sth	r2,0(sp)
    a0b4:	00a00034 	movhi	r2,32768
    a0b8:	10bfffc4 	addi	r2,r2,-1
    a0bc:	d8800515 	stw	r2,20(sp)
    a0c0:	d8800315 	stw	r2,12(sp)
    a0c4:	00bfffc4 	movi	r2,-1
    a0c8:	d880008d 	sth	r2,2(sp)
    a0cc:	00800074 	movhi	r2,1
    a0d0:	d9400415 	stw	r5,16(sp)
    a0d4:	d9400215 	stw	r5,8(sp)
    a0d8:	10ab8704 	addi	r2,r2,-20964
    a0dc:	d9c00804 	addi	r7,sp,32
    a0e0:	d80b883a 	mov	r5,sp
    a0e4:	d8800115 	stw	r2,4(sp)
    a0e8:	d8000615 	stw	zero,24(sp)
    a0ec:	000a2680 	call	a268 <___svfprintf_internal_r>
    a0f0:	d8c00417 	ldw	r3,16(sp)
    a0f4:	18000005 	stb	zero,0(r3)
    a0f8:	dfc00717 	ldw	ra,28(sp)
    a0fc:	dec00904 	addi	sp,sp,36
    a100:	f800283a 	ret

0000a104 <sprintf>:
    a104:	defff604 	addi	sp,sp,-40
    a108:	dfc00715 	stw	ra,28(sp)
    a10c:	d9800815 	stw	r6,32(sp)
    a110:	d9c00915 	stw	r7,36(sp)
    a114:	00808204 	movi	r2,520
    a118:	d880000d 	sth	r2,0(sp)
    a11c:	00a00034 	movhi	r2,32768
    a120:	10bfffc4 	addi	r2,r2,-1
    a124:	d8800515 	stw	r2,20(sp)
    a128:	d8800315 	stw	r2,12(sp)
    a12c:	00bfffc4 	movi	r2,-1
    a130:	d880008d 	sth	r2,2(sp)
    a134:	00800074 	movhi	r2,1
    a138:	10ab8704 	addi	r2,r2,-20964
    a13c:	d8800115 	stw	r2,4(sp)
    a140:	00800074 	movhi	r2,1
    a144:	10ade104 	addi	r2,r2,-18556
    a148:	d9000415 	stw	r4,16(sp)
    a14c:	d9000215 	stw	r4,8(sp)
    a150:	11000017 	ldw	r4,0(r2)
    a154:	280d883a 	mov	r6,r5
    a158:	d9c00804 	addi	r7,sp,32
    a15c:	d80b883a 	mov	r5,sp
    a160:	d8000615 	stw	zero,24(sp)
    a164:	000a2680 	call	a268 <___svfprintf_internal_r>
    a168:	d8c00417 	ldw	r3,16(sp)
    a16c:	18000005 	stb	zero,0(r3)
    a170:	dfc00717 	ldw	ra,28(sp)
    a174:	dec00a04 	addi	sp,sp,40
    a178:	f800283a 	ret

0000a17c <strcmp>:
    a17c:	20800003 	ldbu	r2,0(r4)
    a180:	10c03fcc 	andi	r3,r2,255
    a184:	18c0201c 	xori	r3,r3,128
    a188:	18ffe004 	addi	r3,r3,-128
    a18c:	18000526 	beq	r3,zero,a1a4 <strcmp+0x28>
    a190:	29800007 	ldb	r6,0(r5)
    a194:	1980031e 	bne	r3,r6,a1a4 <strcmp+0x28>
    a198:	21000044 	addi	r4,r4,1
    a19c:	29400044 	addi	r5,r5,1
    a1a0:	003ff606 	br	a17c <_gp+0xffff6a00>
    a1a4:	28c00003 	ldbu	r3,0(r5)
    a1a8:	10803fcc 	andi	r2,r2,255
    a1ac:	10c5c83a 	sub	r2,r2,r3
    a1b0:	f800283a 	ret

0000a1b4 <strcpy>:
    a1b4:	2005883a 	mov	r2,r4
    a1b8:	200d883a 	mov	r6,r4
    a1bc:	28c00003 	ldbu	r3,0(r5)
    a1c0:	31800044 	addi	r6,r6,1
    a1c4:	29400044 	addi	r5,r5,1
    a1c8:	30ffffc5 	stb	r3,-1(r6)
    a1cc:	18c03fcc 	andi	r3,r3,255
    a1d0:	18c0201c 	xori	r3,r3,128
    a1d4:	18ffe004 	addi	r3,r3,-128
    a1d8:	183ff81e 	bne	r3,zero,a1bc <_gp+0xffff6a40>
    a1dc:	f800283a 	ret

0000a1e0 <strlen>:
    a1e0:	2005883a 	mov	r2,r4
    a1e4:	10c00007 	ldb	r3,0(r2)
    a1e8:	18000226 	beq	r3,zero,a1f4 <strlen+0x14>
    a1ec:	10800044 	addi	r2,r2,1
    a1f0:	003ffc06 	br	a1e4 <_gp+0xffff6a68>
    a1f4:	1105c83a 	sub	r2,r2,r4
    a1f8:	f800283a 	ret

0000a1fc <print_repeat>:
    a1fc:	defffb04 	addi	sp,sp,-20
    a200:	dc800315 	stw	r18,12(sp)
    a204:	dc400215 	stw	r17,8(sp)
    a208:	dc000115 	stw	r16,4(sp)
    a20c:	dfc00415 	stw	ra,16(sp)
    a210:	2025883a 	mov	r18,r4
    a214:	2823883a 	mov	r17,r5
    a218:	d9800005 	stb	r6,0(sp)
    a21c:	3821883a 	mov	r16,r7
    a220:	04000a0e 	bge	zero,r16,a24c <print_repeat+0x50>
    a224:	88800117 	ldw	r2,4(r17)
    a228:	01c00044 	movi	r7,1
    a22c:	d80d883a 	mov	r6,sp
    a230:	880b883a 	mov	r5,r17
    a234:	9009883a 	mov	r4,r18
    a238:	103ee83a 	callr	r2
    a23c:	843fffc4 	addi	r16,r16,-1
    a240:	103ff726 	beq	r2,zero,a220 <_gp+0xffff6aa4>
    a244:	00bfffc4 	movi	r2,-1
    a248:	00000106 	br	a250 <print_repeat+0x54>
    a24c:	0005883a 	mov	r2,zero
    a250:	dfc00417 	ldw	ra,16(sp)
    a254:	dc800317 	ldw	r18,12(sp)
    a258:	dc400217 	ldw	r17,8(sp)
    a25c:	dc000117 	ldw	r16,4(sp)
    a260:	dec00504 	addi	sp,sp,20
    a264:	f800283a 	ret

0000a268 <___svfprintf_internal_r>:
    a268:	deffe504 	addi	sp,sp,-108
    a26c:	d8c00804 	addi	r3,sp,32
    a270:	ddc01815 	stw	r23,96(sp)
    a274:	dd801715 	stw	r22,92(sp)
    a278:	dd401615 	stw	r21,88(sp)
    a27c:	dd001515 	stw	r20,84(sp)
    a280:	dcc01415 	stw	r19,80(sp)
    a284:	dc801315 	stw	r18,76(sp)
    a288:	dc401215 	stw	r17,72(sp)
    a28c:	dc001115 	stw	r16,68(sp)
    a290:	dfc01a15 	stw	ra,104(sp)
    a294:	df001915 	stw	fp,100(sp)
    a298:	2029883a 	mov	r20,r4
    a29c:	2823883a 	mov	r17,r5
    a2a0:	382d883a 	mov	r22,r7
    a2a4:	d9800f15 	stw	r6,60(sp)
    a2a8:	0021883a 	mov	r16,zero
    a2ac:	d8000e15 	stw	zero,56(sp)
    a2b0:	d8000a15 	stw	zero,40(sp)
    a2b4:	002b883a 	mov	r21,zero
    a2b8:	0027883a 	mov	r19,zero
    a2bc:	0025883a 	mov	r18,zero
    a2c0:	d8000c15 	stw	zero,48(sp)
    a2c4:	d8000b15 	stw	zero,44(sp)
    a2c8:	002f883a 	mov	r23,zero
    a2cc:	d8c00915 	stw	r3,36(sp)
    a2d0:	d8c00f17 	ldw	r3,60(sp)
    a2d4:	19000003 	ldbu	r4,0(r3)
    a2d8:	20803fcc 	andi	r2,r4,255
    a2dc:	1080201c 	xori	r2,r2,128
    a2e0:	10bfe004 	addi	r2,r2,-128
    a2e4:	10011e26 	beq	r2,zero,a760 <___svfprintf_internal_r+0x4f8>
    a2e8:	00c00044 	movi	r3,1
    a2ec:	b8c01426 	beq	r23,r3,a340 <___svfprintf_internal_r+0xd8>
    a2f0:	1dc00216 	blt	r3,r23,a2fc <___svfprintf_internal_r+0x94>
    a2f4:	b8000626 	beq	r23,zero,a310 <___svfprintf_internal_r+0xa8>
    a2f8:	00011506 	br	a750 <___svfprintf_internal_r+0x4e8>
    a2fc:	01400084 	movi	r5,2
    a300:	b9401d26 	beq	r23,r5,a378 <___svfprintf_internal_r+0x110>
    a304:	014000c4 	movi	r5,3
    a308:	b9402b26 	beq	r23,r5,a3b8 <___svfprintf_internal_r+0x150>
    a30c:	00011006 	br	a750 <___svfprintf_internal_r+0x4e8>
    a310:	01400944 	movi	r5,37
    a314:	1140fc26 	beq	r2,r5,a708 <___svfprintf_internal_r+0x4a0>
    a318:	88800117 	ldw	r2,4(r17)
    a31c:	d9000005 	stb	r4,0(sp)
    a320:	01c00044 	movi	r7,1
    a324:	d80d883a 	mov	r6,sp
    a328:	880b883a 	mov	r5,r17
    a32c:	a009883a 	mov	r4,r20
    a330:	103ee83a 	callr	r2
    a334:	1000d81e 	bne	r2,zero,a698 <___svfprintf_internal_r+0x430>
    a338:	84000044 	addi	r16,r16,1
    a33c:	00010406 	br	a750 <___svfprintf_internal_r+0x4e8>
    a340:	01400c04 	movi	r5,48
    a344:	1140fa26 	beq	r2,r5,a730 <___svfprintf_internal_r+0x4c8>
    a348:	01400944 	movi	r5,37
    a34c:	11400a1e 	bne	r2,r5,a378 <___svfprintf_internal_r+0x110>
    a350:	d8800005 	stb	r2,0(sp)
    a354:	88800117 	ldw	r2,4(r17)
    a358:	b80f883a 	mov	r7,r23
    a35c:	d80d883a 	mov	r6,sp
    a360:	880b883a 	mov	r5,r17
    a364:	a009883a 	mov	r4,r20
    a368:	103ee83a 	callr	r2
    a36c:	1000ca1e 	bne	r2,zero,a698 <___svfprintf_internal_r+0x430>
    a370:	84000044 	addi	r16,r16,1
    a374:	0000f506 	br	a74c <___svfprintf_internal_r+0x4e4>
    a378:	25fff404 	addi	r23,r4,-48
    a37c:	bdc03fcc 	andi	r23,r23,255
    a380:	00c00244 	movi	r3,9
    a384:	1dc00936 	bltu	r3,r23,a3ac <___svfprintf_internal_r+0x144>
    a388:	00bfffc4 	movi	r2,-1
    a38c:	90800426 	beq	r18,r2,a3a0 <___svfprintf_internal_r+0x138>
    a390:	01400284 	movi	r5,10
    a394:	9009883a 	mov	r4,r18
    a398:	0009ec40 	call	9ec4 <__mulsi3>
    a39c:	00000106 	br	a3a4 <___svfprintf_internal_r+0x13c>
    a3a0:	0005883a 	mov	r2,zero
    a3a4:	b8a5883a 	add	r18,r23,r2
    a3a8:	0000e206 	br	a734 <___svfprintf_internal_r+0x4cc>
    a3ac:	01400b84 	movi	r5,46
    a3b0:	1140e426 	beq	r2,r5,a744 <___svfprintf_internal_r+0x4dc>
    a3b4:	05c00084 	movi	r23,2
    a3b8:	213ff404 	addi	r4,r4,-48
    a3bc:	27003fcc 	andi	fp,r4,255
    a3c0:	00c00244 	movi	r3,9
    a3c4:	1f000936 	bltu	r3,fp,a3ec <___svfprintf_internal_r+0x184>
    a3c8:	00bfffc4 	movi	r2,-1
    a3cc:	98800426 	beq	r19,r2,a3e0 <___svfprintf_internal_r+0x178>
    a3d0:	01400284 	movi	r5,10
    a3d4:	9809883a 	mov	r4,r19
    a3d8:	0009ec40 	call	9ec4 <__mulsi3>
    a3dc:	00000106 	br	a3e4 <___svfprintf_internal_r+0x17c>
    a3e0:	0005883a 	mov	r2,zero
    a3e4:	e0a7883a 	add	r19,fp,r2
    a3e8:	0000d906 	br	a750 <___svfprintf_internal_r+0x4e8>
    a3ec:	00c01b04 	movi	r3,108
    a3f0:	10c0d226 	beq	r2,r3,a73c <___svfprintf_internal_r+0x4d4>
    a3f4:	013fffc4 	movi	r4,-1
    a3f8:	99000226 	beq	r19,r4,a404 <___svfprintf_internal_r+0x19c>
    a3fc:	d8000b15 	stw	zero,44(sp)
    a400:	00000106 	br	a408 <___svfprintf_internal_r+0x1a0>
    a404:	04c00044 	movi	r19,1
    a408:	01001a44 	movi	r4,105
    a40c:	11001626 	beq	r2,r4,a468 <___svfprintf_internal_r+0x200>
    a410:	20800916 	blt	r4,r2,a438 <___svfprintf_internal_r+0x1d0>
    a414:	010018c4 	movi	r4,99
    a418:	11008826 	beq	r2,r4,a63c <___svfprintf_internal_r+0x3d4>
    a41c:	01001904 	movi	r4,100
    a420:	11001126 	beq	r2,r4,a468 <___svfprintf_internal_r+0x200>
    a424:	01001604 	movi	r4,88
    a428:	1100c81e 	bne	r2,r4,a74c <___svfprintf_internal_r+0x4e4>
    a42c:	00c00044 	movi	r3,1
    a430:	d8c00e15 	stw	r3,56(sp)
    a434:	00001506 	br	a48c <___svfprintf_internal_r+0x224>
    a438:	01001cc4 	movi	r4,115
    a43c:	11009826 	beq	r2,r4,a6a0 <___svfprintf_internal_r+0x438>
    a440:	20800416 	blt	r4,r2,a454 <___svfprintf_internal_r+0x1ec>
    a444:	01001bc4 	movi	r4,111
    a448:	1100c01e 	bne	r2,r4,a74c <___svfprintf_internal_r+0x4e4>
    a44c:	05400204 	movi	r21,8
    a450:	00000f06 	br	a490 <___svfprintf_internal_r+0x228>
    a454:	01001d44 	movi	r4,117
    a458:	11000d26 	beq	r2,r4,a490 <___svfprintf_internal_r+0x228>
    a45c:	01001e04 	movi	r4,120
    a460:	11000a26 	beq	r2,r4,a48c <___svfprintf_internal_r+0x224>
    a464:	0000b906 	br	a74c <___svfprintf_internal_r+0x4e4>
    a468:	d8c00a17 	ldw	r3,40(sp)
    a46c:	b7000104 	addi	fp,r22,4
    a470:	18000726 	beq	r3,zero,a490 <___svfprintf_internal_r+0x228>
    a474:	df000d15 	stw	fp,52(sp)
    a478:	b5c00017 	ldw	r23,0(r22)
    a47c:	b800080e 	bge	r23,zero,a4a0 <___svfprintf_internal_r+0x238>
    a480:	05efc83a 	sub	r23,zero,r23
    a484:	02400044 	movi	r9,1
    a488:	00000606 	br	a4a4 <___svfprintf_internal_r+0x23c>
    a48c:	05400404 	movi	r21,16
    a490:	b0c00104 	addi	r3,r22,4
    a494:	d8c00d15 	stw	r3,52(sp)
    a498:	b5c00017 	ldw	r23,0(r22)
    a49c:	d8000a15 	stw	zero,40(sp)
    a4a0:	0013883a 	mov	r9,zero
    a4a4:	d839883a 	mov	fp,sp
    a4a8:	b8001726 	beq	r23,zero,a508 <___svfprintf_internal_r+0x2a0>
    a4ac:	a80b883a 	mov	r5,r21
    a4b0:	b809883a 	mov	r4,r23
    a4b4:	da401015 	stw	r9,64(sp)
    a4b8:	0008a4c0 	call	8a4c <__udivsi3>
    a4bc:	a80b883a 	mov	r5,r21
    a4c0:	1009883a 	mov	r4,r2
    a4c4:	102d883a 	mov	r22,r2
    a4c8:	0009ec40 	call	9ec4 <__mulsi3>
    a4cc:	b885c83a 	sub	r2,r23,r2
    a4d0:	00c00244 	movi	r3,9
    a4d4:	da401017 	ldw	r9,64(sp)
    a4d8:	18800216 	blt	r3,r2,a4e4 <___svfprintf_internal_r+0x27c>
    a4dc:	10800c04 	addi	r2,r2,48
    a4e0:	00000506 	br	a4f8 <___svfprintf_internal_r+0x290>
    a4e4:	d8c00e17 	ldw	r3,56(sp)
    a4e8:	18000226 	beq	r3,zero,a4f4 <___svfprintf_internal_r+0x28c>
    a4ec:	10800dc4 	addi	r2,r2,55
    a4f0:	00000106 	br	a4f8 <___svfprintf_internal_r+0x290>
    a4f4:	108015c4 	addi	r2,r2,87
    a4f8:	e0800005 	stb	r2,0(fp)
    a4fc:	b02f883a 	mov	r23,r22
    a500:	e7000044 	addi	fp,fp,1
    a504:	003fe806 	br	a4a8 <_gp+0xffff6d2c>
    a508:	e6efc83a 	sub	r23,fp,sp
    a50c:	9dc5c83a 	sub	r2,r19,r23
    a510:	0080090e 	bge	zero,r2,a538 <___svfprintf_internal_r+0x2d0>
    a514:	e085883a 	add	r2,fp,r2
    a518:	01400c04 	movi	r5,48
    a51c:	d8c00917 	ldw	r3,36(sp)
    a520:	e009883a 	mov	r4,fp
    a524:	e0c0032e 	bgeu	fp,r3,a534 <___svfprintf_internal_r+0x2cc>
    a528:	e7000044 	addi	fp,fp,1
    a52c:	21400005 	stb	r5,0(r4)
    a530:	e0bffa1e 	bne	fp,r2,a51c <_gp+0xffff6da0>
    a534:	e6efc83a 	sub	r23,fp,sp
    a538:	d8c00b17 	ldw	r3,44(sp)
    a53c:	4dd1883a 	add	r8,r9,r23
    a540:	922dc83a 	sub	r22,r18,r8
    a544:	18001626 	beq	r3,zero,a5a0 <___svfprintf_internal_r+0x338>
    a548:	48000a26 	beq	r9,zero,a574 <___svfprintf_internal_r+0x30c>
    a54c:	00800b44 	movi	r2,45
    a550:	d8800805 	stb	r2,32(sp)
    a554:	88800117 	ldw	r2,4(r17)
    a558:	01c00044 	movi	r7,1
    a55c:	d9800804 	addi	r6,sp,32
    a560:	880b883a 	mov	r5,r17
    a564:	a009883a 	mov	r4,r20
    a568:	103ee83a 	callr	r2
    a56c:	10004a1e 	bne	r2,zero,a698 <___svfprintf_internal_r+0x430>
    a570:	84000044 	addi	r16,r16,1
    a574:	0580070e 	bge	zero,r22,a594 <___svfprintf_internal_r+0x32c>
    a578:	b00f883a 	mov	r7,r22
    a57c:	01800c04 	movi	r6,48
    a580:	880b883a 	mov	r5,r17
    a584:	a009883a 	mov	r4,r20
    a588:	000a1fc0 	call	a1fc <print_repeat>
    a58c:	1000421e 	bne	r2,zero,a698 <___svfprintf_internal_r+0x430>
    a590:	85a1883a 	add	r16,r16,r22
    a594:	e02d883a 	mov	r22,fp
    a598:	bf2fc83a 	sub	r23,r23,fp
    a59c:	00002006 	br	a620 <___svfprintf_internal_r+0x3b8>
    a5a0:	0580090e 	bge	zero,r22,a5c8 <___svfprintf_internal_r+0x360>
    a5a4:	b00f883a 	mov	r7,r22
    a5a8:	01800804 	movi	r6,32
    a5ac:	880b883a 	mov	r5,r17
    a5b0:	a009883a 	mov	r4,r20
    a5b4:	da401015 	stw	r9,64(sp)
    a5b8:	000a1fc0 	call	a1fc <print_repeat>
    a5bc:	da401017 	ldw	r9,64(sp)
    a5c0:	1000351e 	bne	r2,zero,a698 <___svfprintf_internal_r+0x430>
    a5c4:	85a1883a 	add	r16,r16,r22
    a5c8:	483ff226 	beq	r9,zero,a594 <_gp+0xffff6e18>
    a5cc:	00800b44 	movi	r2,45
    a5d0:	d8800805 	stb	r2,32(sp)
    a5d4:	88800117 	ldw	r2,4(r17)
    a5d8:	01c00044 	movi	r7,1
    a5dc:	d9800804 	addi	r6,sp,32
    a5e0:	880b883a 	mov	r5,r17
    a5e4:	a009883a 	mov	r4,r20
    a5e8:	103ee83a 	callr	r2
    a5ec:	10002a1e 	bne	r2,zero,a698 <___svfprintf_internal_r+0x430>
    a5f0:	84000044 	addi	r16,r16,1
    a5f4:	003fe706 	br	a594 <_gp+0xffff6e18>
    a5f8:	b5bfffc4 	addi	r22,r22,-1
    a5fc:	b0800003 	ldbu	r2,0(r22)
    a600:	01c00044 	movi	r7,1
    a604:	d9800804 	addi	r6,sp,32
    a608:	d8800805 	stb	r2,32(sp)
    a60c:	88800117 	ldw	r2,4(r17)
    a610:	880b883a 	mov	r5,r17
    a614:	a009883a 	mov	r4,r20
    a618:	103ee83a 	callr	r2
    a61c:	10001e1e 	bne	r2,zero,a698 <___svfprintf_internal_r+0x430>
    a620:	8585c83a 	sub	r2,r16,r22
    a624:	b5c9883a 	add	r4,r22,r23
    a628:	e085883a 	add	r2,fp,r2
    a62c:	013ff216 	blt	zero,r4,a5f8 <_gp+0xffff6e7c>
    a630:	1021883a 	mov	r16,r2
    a634:	dd800d17 	ldw	r22,52(sp)
    a638:	00004406 	br	a74c <___svfprintf_internal_r+0x4e4>
    a63c:	00800044 	movi	r2,1
    a640:	1480080e 	bge	r2,r18,a664 <___svfprintf_internal_r+0x3fc>
    a644:	95ffffc4 	addi	r23,r18,-1
    a648:	b80f883a 	mov	r7,r23
    a64c:	01800804 	movi	r6,32
    a650:	880b883a 	mov	r5,r17
    a654:	a009883a 	mov	r4,r20
    a658:	000a1fc0 	call	a1fc <print_repeat>
    a65c:	10000e1e 	bne	r2,zero,a698 <___svfprintf_internal_r+0x430>
    a660:	85e1883a 	add	r16,r16,r23
    a664:	b0800017 	ldw	r2,0(r22)
    a668:	01c00044 	movi	r7,1
    a66c:	d80d883a 	mov	r6,sp
    a670:	d8800005 	stb	r2,0(sp)
    a674:	88800117 	ldw	r2,4(r17)
    a678:	880b883a 	mov	r5,r17
    a67c:	a009883a 	mov	r4,r20
    a680:	b5c00104 	addi	r23,r22,4
    a684:	103ee83a 	callr	r2
    a688:	1000031e 	bne	r2,zero,a698 <___svfprintf_internal_r+0x430>
    a68c:	84000044 	addi	r16,r16,1
    a690:	b82d883a 	mov	r22,r23
    a694:	00002d06 	br	a74c <___svfprintf_internal_r+0x4e4>
    a698:	00bfffc4 	movi	r2,-1
    a69c:	00003106 	br	a764 <___svfprintf_internal_r+0x4fc>
    a6a0:	b5c00017 	ldw	r23,0(r22)
    a6a4:	b7000104 	addi	fp,r22,4
    a6a8:	b809883a 	mov	r4,r23
    a6ac:	000a1e00 	call	a1e0 <strlen>
    a6b0:	9091c83a 	sub	r8,r18,r2
    a6b4:	102d883a 	mov	r22,r2
    a6b8:	0200090e 	bge	zero,r8,a6e0 <___svfprintf_internal_r+0x478>
    a6bc:	400f883a 	mov	r7,r8
    a6c0:	01800804 	movi	r6,32
    a6c4:	880b883a 	mov	r5,r17
    a6c8:	a009883a 	mov	r4,r20
    a6cc:	da001015 	stw	r8,64(sp)
    a6d0:	000a1fc0 	call	a1fc <print_repeat>
    a6d4:	da001017 	ldw	r8,64(sp)
    a6d8:	103fef1e 	bne	r2,zero,a698 <_gp+0xffff6f1c>
    a6dc:	8221883a 	add	r16,r16,r8
    a6e0:	88800117 	ldw	r2,4(r17)
    a6e4:	b00f883a 	mov	r7,r22
    a6e8:	b80d883a 	mov	r6,r23
    a6ec:	880b883a 	mov	r5,r17
    a6f0:	a009883a 	mov	r4,r20
    a6f4:	103ee83a 	callr	r2
    a6f8:	103fe71e 	bne	r2,zero,a698 <_gp+0xffff6f1c>
    a6fc:	85a1883a 	add	r16,r16,r22
    a700:	e02d883a 	mov	r22,fp
    a704:	00001106 	br	a74c <___svfprintf_internal_r+0x4e4>
    a708:	00c00044 	movi	r3,1
    a70c:	04ffffc4 	movi	r19,-1
    a710:	d8000e15 	stw	zero,56(sp)
    a714:	d8c00a15 	stw	r3,40(sp)
    a718:	05400284 	movi	r21,10
    a71c:	9825883a 	mov	r18,r19
    a720:	d8000c15 	stw	zero,48(sp)
    a724:	d8000b15 	stw	zero,44(sp)
    a728:	182f883a 	mov	r23,r3
    a72c:	00000806 	br	a750 <___svfprintf_internal_r+0x4e8>
    a730:	ddc00b15 	stw	r23,44(sp)
    a734:	05c00084 	movi	r23,2
    a738:	00000506 	br	a750 <___svfprintf_internal_r+0x4e8>
    a73c:	00c00044 	movi	r3,1
    a740:	d8c00c15 	stw	r3,48(sp)
    a744:	05c000c4 	movi	r23,3
    a748:	00000106 	br	a750 <___svfprintf_internal_r+0x4e8>
    a74c:	002f883a 	mov	r23,zero
    a750:	d8c00f17 	ldw	r3,60(sp)
    a754:	18c00044 	addi	r3,r3,1
    a758:	d8c00f15 	stw	r3,60(sp)
    a75c:	003edc06 	br	a2d0 <_gp+0xffff6b54>
    a760:	8005883a 	mov	r2,r16
    a764:	dfc01a17 	ldw	ra,104(sp)
    a768:	df001917 	ldw	fp,100(sp)
    a76c:	ddc01817 	ldw	r23,96(sp)
    a770:	dd801717 	ldw	r22,92(sp)
    a774:	dd401617 	ldw	r21,88(sp)
    a778:	dd001517 	ldw	r20,84(sp)
    a77c:	dcc01417 	ldw	r19,80(sp)
    a780:	dc801317 	ldw	r18,76(sp)
    a784:	dc401217 	ldw	r17,72(sp)
    a788:	dc001117 	ldw	r16,68(sp)
    a78c:	dec01b04 	addi	sp,sp,108
    a790:	f800283a 	ret

0000a794 <__vfprintf_internal_unused>:
    a794:	00800074 	movhi	r2,1
    a798:	10ade104 	addi	r2,r2,-18556
    a79c:	300f883a 	mov	r7,r6
    a7a0:	280d883a 	mov	r6,r5
    a7a4:	200b883a 	mov	r5,r4
    a7a8:	11000017 	ldw	r4,0(r2)
    a7ac:	000a2681 	jmpi	a268 <___svfprintf_internal_r>

0000a7b0 <print_repeat>:
    a7b0:	defffb04 	addi	sp,sp,-20
    a7b4:	dc800315 	stw	r18,12(sp)
    a7b8:	dc400215 	stw	r17,8(sp)
    a7bc:	dc000115 	stw	r16,4(sp)
    a7c0:	dfc00415 	stw	ra,16(sp)
    a7c4:	2025883a 	mov	r18,r4
    a7c8:	2823883a 	mov	r17,r5
    a7cc:	d9800005 	stb	r6,0(sp)
    a7d0:	3821883a 	mov	r16,r7
    a7d4:	04000a0e 	bge	zero,r16,a800 <print_repeat+0x50>
    a7d8:	88800117 	ldw	r2,4(r17)
    a7dc:	01c00044 	movi	r7,1
    a7e0:	d80d883a 	mov	r6,sp
    a7e4:	880b883a 	mov	r5,r17
    a7e8:	9009883a 	mov	r4,r18
    a7ec:	103ee83a 	callr	r2
    a7f0:	843fffc4 	addi	r16,r16,-1
    a7f4:	103ff726 	beq	r2,zero,a7d4 <_gp+0xffff7058>
    a7f8:	00bfffc4 	movi	r2,-1
    a7fc:	00000106 	br	a804 <print_repeat+0x54>
    a800:	0005883a 	mov	r2,zero
    a804:	dfc00417 	ldw	ra,16(sp)
    a808:	dc800317 	ldw	r18,12(sp)
    a80c:	dc400217 	ldw	r17,8(sp)
    a810:	dc000117 	ldw	r16,4(sp)
    a814:	dec00504 	addi	sp,sp,20
    a818:	f800283a 	ret

0000a81c <___vfprintf_internal_r>:
    a81c:	deffe504 	addi	sp,sp,-108
    a820:	d8c00804 	addi	r3,sp,32
    a824:	ddc01815 	stw	r23,96(sp)
    a828:	dd801715 	stw	r22,92(sp)
    a82c:	dd401615 	stw	r21,88(sp)
    a830:	dd001515 	stw	r20,84(sp)
    a834:	dcc01415 	stw	r19,80(sp)
    a838:	dc801315 	stw	r18,76(sp)
    a83c:	dc401215 	stw	r17,72(sp)
    a840:	dc001115 	stw	r16,68(sp)
    a844:	dfc01a15 	stw	ra,104(sp)
    a848:	df001915 	stw	fp,100(sp)
    a84c:	2029883a 	mov	r20,r4
    a850:	2823883a 	mov	r17,r5
    a854:	382d883a 	mov	r22,r7
    a858:	d9800f15 	stw	r6,60(sp)
    a85c:	0021883a 	mov	r16,zero
    a860:	d8000e15 	stw	zero,56(sp)
    a864:	d8000a15 	stw	zero,40(sp)
    a868:	002b883a 	mov	r21,zero
    a86c:	0027883a 	mov	r19,zero
    a870:	0025883a 	mov	r18,zero
    a874:	d8000c15 	stw	zero,48(sp)
    a878:	d8000b15 	stw	zero,44(sp)
    a87c:	002f883a 	mov	r23,zero
    a880:	d8c00915 	stw	r3,36(sp)
    a884:	d8c00f17 	ldw	r3,60(sp)
    a888:	19000003 	ldbu	r4,0(r3)
    a88c:	20803fcc 	andi	r2,r4,255
    a890:	1080201c 	xori	r2,r2,128
    a894:	10bfe004 	addi	r2,r2,-128
    a898:	10011e26 	beq	r2,zero,ad14 <___vfprintf_internal_r+0x4f8>
    a89c:	00c00044 	movi	r3,1
    a8a0:	b8c01426 	beq	r23,r3,a8f4 <___vfprintf_internal_r+0xd8>
    a8a4:	1dc00216 	blt	r3,r23,a8b0 <___vfprintf_internal_r+0x94>
    a8a8:	b8000626 	beq	r23,zero,a8c4 <___vfprintf_internal_r+0xa8>
    a8ac:	00011506 	br	ad04 <___vfprintf_internal_r+0x4e8>
    a8b0:	01400084 	movi	r5,2
    a8b4:	b9401d26 	beq	r23,r5,a92c <___vfprintf_internal_r+0x110>
    a8b8:	014000c4 	movi	r5,3
    a8bc:	b9402b26 	beq	r23,r5,a96c <___vfprintf_internal_r+0x150>
    a8c0:	00011006 	br	ad04 <___vfprintf_internal_r+0x4e8>
    a8c4:	01400944 	movi	r5,37
    a8c8:	1140fc26 	beq	r2,r5,acbc <___vfprintf_internal_r+0x4a0>
    a8cc:	88800117 	ldw	r2,4(r17)
    a8d0:	d9000005 	stb	r4,0(sp)
    a8d4:	01c00044 	movi	r7,1
    a8d8:	d80d883a 	mov	r6,sp
    a8dc:	880b883a 	mov	r5,r17
    a8e0:	a009883a 	mov	r4,r20
    a8e4:	103ee83a 	callr	r2
    a8e8:	1000d81e 	bne	r2,zero,ac4c <___vfprintf_internal_r+0x430>
    a8ec:	84000044 	addi	r16,r16,1
    a8f0:	00010406 	br	ad04 <___vfprintf_internal_r+0x4e8>
    a8f4:	01400c04 	movi	r5,48
    a8f8:	1140fa26 	beq	r2,r5,ace4 <___vfprintf_internal_r+0x4c8>
    a8fc:	01400944 	movi	r5,37
    a900:	11400a1e 	bne	r2,r5,a92c <___vfprintf_internal_r+0x110>
    a904:	d8800005 	stb	r2,0(sp)
    a908:	88800117 	ldw	r2,4(r17)
    a90c:	b80f883a 	mov	r7,r23
    a910:	d80d883a 	mov	r6,sp
    a914:	880b883a 	mov	r5,r17
    a918:	a009883a 	mov	r4,r20
    a91c:	103ee83a 	callr	r2
    a920:	1000ca1e 	bne	r2,zero,ac4c <___vfprintf_internal_r+0x430>
    a924:	84000044 	addi	r16,r16,1
    a928:	0000f506 	br	ad00 <___vfprintf_internal_r+0x4e4>
    a92c:	25fff404 	addi	r23,r4,-48
    a930:	bdc03fcc 	andi	r23,r23,255
    a934:	00c00244 	movi	r3,9
    a938:	1dc00936 	bltu	r3,r23,a960 <___vfprintf_internal_r+0x144>
    a93c:	00bfffc4 	movi	r2,-1
    a940:	90800426 	beq	r18,r2,a954 <___vfprintf_internal_r+0x138>
    a944:	01400284 	movi	r5,10
    a948:	9009883a 	mov	r4,r18
    a94c:	0009ec40 	call	9ec4 <__mulsi3>
    a950:	00000106 	br	a958 <___vfprintf_internal_r+0x13c>
    a954:	0005883a 	mov	r2,zero
    a958:	b8a5883a 	add	r18,r23,r2
    a95c:	0000e206 	br	ace8 <___vfprintf_internal_r+0x4cc>
    a960:	01400b84 	movi	r5,46
    a964:	1140e426 	beq	r2,r5,acf8 <___vfprintf_internal_r+0x4dc>
    a968:	05c00084 	movi	r23,2
    a96c:	213ff404 	addi	r4,r4,-48
    a970:	27003fcc 	andi	fp,r4,255
    a974:	00c00244 	movi	r3,9
    a978:	1f000936 	bltu	r3,fp,a9a0 <___vfprintf_internal_r+0x184>
    a97c:	00bfffc4 	movi	r2,-1
    a980:	98800426 	beq	r19,r2,a994 <___vfprintf_internal_r+0x178>
    a984:	01400284 	movi	r5,10
    a988:	9809883a 	mov	r4,r19
    a98c:	0009ec40 	call	9ec4 <__mulsi3>
    a990:	00000106 	br	a998 <___vfprintf_internal_r+0x17c>
    a994:	0005883a 	mov	r2,zero
    a998:	e0a7883a 	add	r19,fp,r2
    a99c:	0000d906 	br	ad04 <___vfprintf_internal_r+0x4e8>
    a9a0:	00c01b04 	movi	r3,108
    a9a4:	10c0d226 	beq	r2,r3,acf0 <___vfprintf_internal_r+0x4d4>
    a9a8:	013fffc4 	movi	r4,-1
    a9ac:	99000226 	beq	r19,r4,a9b8 <___vfprintf_internal_r+0x19c>
    a9b0:	d8000b15 	stw	zero,44(sp)
    a9b4:	00000106 	br	a9bc <___vfprintf_internal_r+0x1a0>
    a9b8:	04c00044 	movi	r19,1
    a9bc:	01001a44 	movi	r4,105
    a9c0:	11001626 	beq	r2,r4,aa1c <___vfprintf_internal_r+0x200>
    a9c4:	20800916 	blt	r4,r2,a9ec <___vfprintf_internal_r+0x1d0>
    a9c8:	010018c4 	movi	r4,99
    a9cc:	11008826 	beq	r2,r4,abf0 <___vfprintf_internal_r+0x3d4>
    a9d0:	01001904 	movi	r4,100
    a9d4:	11001126 	beq	r2,r4,aa1c <___vfprintf_internal_r+0x200>
    a9d8:	01001604 	movi	r4,88
    a9dc:	1100c81e 	bne	r2,r4,ad00 <___vfprintf_internal_r+0x4e4>
    a9e0:	00c00044 	movi	r3,1
    a9e4:	d8c00e15 	stw	r3,56(sp)
    a9e8:	00001506 	br	aa40 <___vfprintf_internal_r+0x224>
    a9ec:	01001cc4 	movi	r4,115
    a9f0:	11009826 	beq	r2,r4,ac54 <___vfprintf_internal_r+0x438>
    a9f4:	20800416 	blt	r4,r2,aa08 <___vfprintf_internal_r+0x1ec>
    a9f8:	01001bc4 	movi	r4,111
    a9fc:	1100c01e 	bne	r2,r4,ad00 <___vfprintf_internal_r+0x4e4>
    aa00:	05400204 	movi	r21,8
    aa04:	00000f06 	br	aa44 <___vfprintf_internal_r+0x228>
    aa08:	01001d44 	movi	r4,117
    aa0c:	11000d26 	beq	r2,r4,aa44 <___vfprintf_internal_r+0x228>
    aa10:	01001e04 	movi	r4,120
    aa14:	11000a26 	beq	r2,r4,aa40 <___vfprintf_internal_r+0x224>
    aa18:	0000b906 	br	ad00 <___vfprintf_internal_r+0x4e4>
    aa1c:	d8c00a17 	ldw	r3,40(sp)
    aa20:	b7000104 	addi	fp,r22,4
    aa24:	18000726 	beq	r3,zero,aa44 <___vfprintf_internal_r+0x228>
    aa28:	df000d15 	stw	fp,52(sp)
    aa2c:	b5c00017 	ldw	r23,0(r22)
    aa30:	b800080e 	bge	r23,zero,aa54 <___vfprintf_internal_r+0x238>
    aa34:	05efc83a 	sub	r23,zero,r23
    aa38:	02400044 	movi	r9,1
    aa3c:	00000606 	br	aa58 <___vfprintf_internal_r+0x23c>
    aa40:	05400404 	movi	r21,16
    aa44:	b0c00104 	addi	r3,r22,4
    aa48:	d8c00d15 	stw	r3,52(sp)
    aa4c:	b5c00017 	ldw	r23,0(r22)
    aa50:	d8000a15 	stw	zero,40(sp)
    aa54:	0013883a 	mov	r9,zero
    aa58:	d839883a 	mov	fp,sp
    aa5c:	b8001726 	beq	r23,zero,aabc <___vfprintf_internal_r+0x2a0>
    aa60:	a80b883a 	mov	r5,r21
    aa64:	b809883a 	mov	r4,r23
    aa68:	da401015 	stw	r9,64(sp)
    aa6c:	0008a4c0 	call	8a4c <__udivsi3>
    aa70:	a80b883a 	mov	r5,r21
    aa74:	1009883a 	mov	r4,r2
    aa78:	102d883a 	mov	r22,r2
    aa7c:	0009ec40 	call	9ec4 <__mulsi3>
    aa80:	b885c83a 	sub	r2,r23,r2
    aa84:	00c00244 	movi	r3,9
    aa88:	da401017 	ldw	r9,64(sp)
    aa8c:	18800216 	blt	r3,r2,aa98 <___vfprintf_internal_r+0x27c>
    aa90:	10800c04 	addi	r2,r2,48
    aa94:	00000506 	br	aaac <___vfprintf_internal_r+0x290>
    aa98:	d8c00e17 	ldw	r3,56(sp)
    aa9c:	18000226 	beq	r3,zero,aaa8 <___vfprintf_internal_r+0x28c>
    aaa0:	10800dc4 	addi	r2,r2,55
    aaa4:	00000106 	br	aaac <___vfprintf_internal_r+0x290>
    aaa8:	108015c4 	addi	r2,r2,87
    aaac:	e0800005 	stb	r2,0(fp)
    aab0:	b02f883a 	mov	r23,r22
    aab4:	e7000044 	addi	fp,fp,1
    aab8:	003fe806 	br	aa5c <_gp+0xffff72e0>
    aabc:	e6efc83a 	sub	r23,fp,sp
    aac0:	9dc5c83a 	sub	r2,r19,r23
    aac4:	0080090e 	bge	zero,r2,aaec <___vfprintf_internal_r+0x2d0>
    aac8:	e085883a 	add	r2,fp,r2
    aacc:	01400c04 	movi	r5,48
    aad0:	d8c00917 	ldw	r3,36(sp)
    aad4:	e009883a 	mov	r4,fp
    aad8:	e0c0032e 	bgeu	fp,r3,aae8 <___vfprintf_internal_r+0x2cc>
    aadc:	e7000044 	addi	fp,fp,1
    aae0:	21400005 	stb	r5,0(r4)
    aae4:	e0bffa1e 	bne	fp,r2,aad0 <_gp+0xffff7354>
    aae8:	e6efc83a 	sub	r23,fp,sp
    aaec:	d8c00b17 	ldw	r3,44(sp)
    aaf0:	4dd1883a 	add	r8,r9,r23
    aaf4:	922dc83a 	sub	r22,r18,r8
    aaf8:	18001626 	beq	r3,zero,ab54 <___vfprintf_internal_r+0x338>
    aafc:	48000a26 	beq	r9,zero,ab28 <___vfprintf_internal_r+0x30c>
    ab00:	00800b44 	movi	r2,45
    ab04:	d8800805 	stb	r2,32(sp)
    ab08:	88800117 	ldw	r2,4(r17)
    ab0c:	01c00044 	movi	r7,1
    ab10:	d9800804 	addi	r6,sp,32
    ab14:	880b883a 	mov	r5,r17
    ab18:	a009883a 	mov	r4,r20
    ab1c:	103ee83a 	callr	r2
    ab20:	10004a1e 	bne	r2,zero,ac4c <___vfprintf_internal_r+0x430>
    ab24:	84000044 	addi	r16,r16,1
    ab28:	0580070e 	bge	zero,r22,ab48 <___vfprintf_internal_r+0x32c>
    ab2c:	b00f883a 	mov	r7,r22
    ab30:	01800c04 	movi	r6,48
    ab34:	880b883a 	mov	r5,r17
    ab38:	a009883a 	mov	r4,r20
    ab3c:	000a7b00 	call	a7b0 <print_repeat>
    ab40:	1000421e 	bne	r2,zero,ac4c <___vfprintf_internal_r+0x430>
    ab44:	85a1883a 	add	r16,r16,r22
    ab48:	e02d883a 	mov	r22,fp
    ab4c:	bf2fc83a 	sub	r23,r23,fp
    ab50:	00002006 	br	abd4 <___vfprintf_internal_r+0x3b8>
    ab54:	0580090e 	bge	zero,r22,ab7c <___vfprintf_internal_r+0x360>
    ab58:	b00f883a 	mov	r7,r22
    ab5c:	01800804 	movi	r6,32
    ab60:	880b883a 	mov	r5,r17
    ab64:	a009883a 	mov	r4,r20
    ab68:	da401015 	stw	r9,64(sp)
    ab6c:	000a7b00 	call	a7b0 <print_repeat>
    ab70:	da401017 	ldw	r9,64(sp)
    ab74:	1000351e 	bne	r2,zero,ac4c <___vfprintf_internal_r+0x430>
    ab78:	85a1883a 	add	r16,r16,r22
    ab7c:	483ff226 	beq	r9,zero,ab48 <_gp+0xffff73cc>
    ab80:	00800b44 	movi	r2,45
    ab84:	d8800805 	stb	r2,32(sp)
    ab88:	88800117 	ldw	r2,4(r17)
    ab8c:	01c00044 	movi	r7,1
    ab90:	d9800804 	addi	r6,sp,32
    ab94:	880b883a 	mov	r5,r17
    ab98:	a009883a 	mov	r4,r20
    ab9c:	103ee83a 	callr	r2
    aba0:	10002a1e 	bne	r2,zero,ac4c <___vfprintf_internal_r+0x430>
    aba4:	84000044 	addi	r16,r16,1
    aba8:	003fe706 	br	ab48 <_gp+0xffff73cc>
    abac:	b5bfffc4 	addi	r22,r22,-1
    abb0:	b0800003 	ldbu	r2,0(r22)
    abb4:	01c00044 	movi	r7,1
    abb8:	d9800804 	addi	r6,sp,32
    abbc:	d8800805 	stb	r2,32(sp)
    abc0:	88800117 	ldw	r2,4(r17)
    abc4:	880b883a 	mov	r5,r17
    abc8:	a009883a 	mov	r4,r20
    abcc:	103ee83a 	callr	r2
    abd0:	10001e1e 	bne	r2,zero,ac4c <___vfprintf_internal_r+0x430>
    abd4:	8585c83a 	sub	r2,r16,r22
    abd8:	b5c9883a 	add	r4,r22,r23
    abdc:	e085883a 	add	r2,fp,r2
    abe0:	013ff216 	blt	zero,r4,abac <_gp+0xffff7430>
    abe4:	1021883a 	mov	r16,r2
    abe8:	dd800d17 	ldw	r22,52(sp)
    abec:	00004406 	br	ad00 <___vfprintf_internal_r+0x4e4>
    abf0:	00800044 	movi	r2,1
    abf4:	1480080e 	bge	r2,r18,ac18 <___vfprintf_internal_r+0x3fc>
    abf8:	95ffffc4 	addi	r23,r18,-1
    abfc:	b80f883a 	mov	r7,r23
    ac00:	01800804 	movi	r6,32
    ac04:	880b883a 	mov	r5,r17
    ac08:	a009883a 	mov	r4,r20
    ac0c:	000a7b00 	call	a7b0 <print_repeat>
    ac10:	10000e1e 	bne	r2,zero,ac4c <___vfprintf_internal_r+0x430>
    ac14:	85e1883a 	add	r16,r16,r23
    ac18:	b0800017 	ldw	r2,0(r22)
    ac1c:	01c00044 	movi	r7,1
    ac20:	d80d883a 	mov	r6,sp
    ac24:	d8800005 	stb	r2,0(sp)
    ac28:	88800117 	ldw	r2,4(r17)
    ac2c:	880b883a 	mov	r5,r17
    ac30:	a009883a 	mov	r4,r20
    ac34:	b5c00104 	addi	r23,r22,4
    ac38:	103ee83a 	callr	r2
    ac3c:	1000031e 	bne	r2,zero,ac4c <___vfprintf_internal_r+0x430>
    ac40:	84000044 	addi	r16,r16,1
    ac44:	b82d883a 	mov	r22,r23
    ac48:	00002d06 	br	ad00 <___vfprintf_internal_r+0x4e4>
    ac4c:	00bfffc4 	movi	r2,-1
    ac50:	00003106 	br	ad18 <___vfprintf_internal_r+0x4fc>
    ac54:	b5c00017 	ldw	r23,0(r22)
    ac58:	b7000104 	addi	fp,r22,4
    ac5c:	b809883a 	mov	r4,r23
    ac60:	000a1e00 	call	a1e0 <strlen>
    ac64:	9091c83a 	sub	r8,r18,r2
    ac68:	102d883a 	mov	r22,r2
    ac6c:	0200090e 	bge	zero,r8,ac94 <___vfprintf_internal_r+0x478>
    ac70:	400f883a 	mov	r7,r8
    ac74:	01800804 	movi	r6,32
    ac78:	880b883a 	mov	r5,r17
    ac7c:	a009883a 	mov	r4,r20
    ac80:	da001015 	stw	r8,64(sp)
    ac84:	000a7b00 	call	a7b0 <print_repeat>
    ac88:	da001017 	ldw	r8,64(sp)
    ac8c:	103fef1e 	bne	r2,zero,ac4c <_gp+0xffff74d0>
    ac90:	8221883a 	add	r16,r16,r8
    ac94:	88800117 	ldw	r2,4(r17)
    ac98:	b00f883a 	mov	r7,r22
    ac9c:	b80d883a 	mov	r6,r23
    aca0:	880b883a 	mov	r5,r17
    aca4:	a009883a 	mov	r4,r20
    aca8:	103ee83a 	callr	r2
    acac:	103fe71e 	bne	r2,zero,ac4c <_gp+0xffff74d0>
    acb0:	85a1883a 	add	r16,r16,r22
    acb4:	e02d883a 	mov	r22,fp
    acb8:	00001106 	br	ad00 <___vfprintf_internal_r+0x4e4>
    acbc:	00c00044 	movi	r3,1
    acc0:	04ffffc4 	movi	r19,-1
    acc4:	d8000e15 	stw	zero,56(sp)
    acc8:	d8c00a15 	stw	r3,40(sp)
    accc:	05400284 	movi	r21,10
    acd0:	9825883a 	mov	r18,r19
    acd4:	d8000c15 	stw	zero,48(sp)
    acd8:	d8000b15 	stw	zero,44(sp)
    acdc:	182f883a 	mov	r23,r3
    ace0:	00000806 	br	ad04 <___vfprintf_internal_r+0x4e8>
    ace4:	ddc00b15 	stw	r23,44(sp)
    ace8:	05c00084 	movi	r23,2
    acec:	00000506 	br	ad04 <___vfprintf_internal_r+0x4e8>
    acf0:	00c00044 	movi	r3,1
    acf4:	d8c00c15 	stw	r3,48(sp)
    acf8:	05c000c4 	movi	r23,3
    acfc:	00000106 	br	ad04 <___vfprintf_internal_r+0x4e8>
    ad00:	002f883a 	mov	r23,zero
    ad04:	d8c00f17 	ldw	r3,60(sp)
    ad08:	18c00044 	addi	r3,r3,1
    ad0c:	d8c00f15 	stw	r3,60(sp)
    ad10:	003edc06 	br	a884 <_gp+0xffff7108>
    ad14:	8005883a 	mov	r2,r16
    ad18:	dfc01a17 	ldw	ra,104(sp)
    ad1c:	df001917 	ldw	fp,100(sp)
    ad20:	ddc01817 	ldw	r23,96(sp)
    ad24:	dd801717 	ldw	r22,92(sp)
    ad28:	dd401617 	ldw	r21,88(sp)
    ad2c:	dd001517 	ldw	r20,84(sp)
    ad30:	dcc01417 	ldw	r19,80(sp)
    ad34:	dc801317 	ldw	r18,76(sp)
    ad38:	dc401217 	ldw	r17,72(sp)
    ad3c:	dc001117 	ldw	r16,68(sp)
    ad40:	dec01b04 	addi	sp,sp,108
    ad44:	f800283a 	ret

0000ad48 <__vfprintf_internal>:
    ad48:	00800074 	movhi	r2,1
    ad4c:	10ade104 	addi	r2,r2,-18556
    ad50:	300f883a 	mov	r7,r6
    ad54:	280d883a 	mov	r6,r5
    ad58:	200b883a 	mov	r5,r4
    ad5c:	11000017 	ldw	r4,0(r2)
    ad60:	000a81c1 	jmpi	a81c <___vfprintf_internal_r>

0000ad64 <__sfvwrite_small_dev>:
    ad64:	2880000b 	ldhu	r2,0(r5)
    ad68:	1080020c 	andi	r2,r2,8
    ad6c:	10002126 	beq	r2,zero,adf4 <__sfvwrite_small_dev+0x90>
    ad70:	2880008f 	ldh	r2,2(r5)
    ad74:	defffa04 	addi	sp,sp,-24
    ad78:	dc000015 	stw	r16,0(sp)
    ad7c:	dfc00515 	stw	ra,20(sp)
    ad80:	dd000415 	stw	r20,16(sp)
    ad84:	dcc00315 	stw	r19,12(sp)
    ad88:	dc800215 	stw	r18,8(sp)
    ad8c:	dc400115 	stw	r17,4(sp)
    ad90:	2821883a 	mov	r16,r5
    ad94:	10001216 	blt	r2,zero,ade0 <__sfvwrite_small_dev+0x7c>
    ad98:	2027883a 	mov	r19,r4
    ad9c:	3025883a 	mov	r18,r6
    ada0:	3823883a 	mov	r17,r7
    ada4:	05010004 	movi	r20,1024
    ada8:	04400b0e 	bge	zero,r17,add8 <__sfvwrite_small_dev+0x74>
    adac:	880f883a 	mov	r7,r17
    adb0:	a440010e 	bge	r20,r17,adb8 <__sfvwrite_small_dev+0x54>
    adb4:	01c10004 	movi	r7,1024
    adb8:	8140008f 	ldh	r5,2(r16)
    adbc:	900d883a 	mov	r6,r18
    adc0:	9809883a 	mov	r4,r19
    adc4:	000afd00 	call	afd0 <_write_r>
    adc8:	0080050e 	bge	zero,r2,ade0 <__sfvwrite_small_dev+0x7c>
    adcc:	88a3c83a 	sub	r17,r17,r2
    add0:	90a5883a 	add	r18,r18,r2
    add4:	003ff406 	br	ada8 <_gp+0xffff762c>
    add8:	0005883a 	mov	r2,zero
    addc:	00000706 	br	adfc <__sfvwrite_small_dev+0x98>
    ade0:	8080000b 	ldhu	r2,0(r16)
    ade4:	10801014 	ori	r2,r2,64
    ade8:	8080000d 	sth	r2,0(r16)
    adec:	00bfffc4 	movi	r2,-1
    adf0:	00000206 	br	adfc <__sfvwrite_small_dev+0x98>
    adf4:	00bfffc4 	movi	r2,-1
    adf8:	f800283a 	ret
    adfc:	dfc00517 	ldw	ra,20(sp)
    ae00:	dd000417 	ldw	r20,16(sp)
    ae04:	dcc00317 	ldw	r19,12(sp)
    ae08:	dc800217 	ldw	r18,8(sp)
    ae0c:	dc400117 	ldw	r17,4(sp)
    ae10:	dc000017 	ldw	r16,0(sp)
    ae14:	dec00604 	addi	sp,sp,24
    ae18:	f800283a 	ret

0000ae1c <__sfvwrite_small_str>:
    ae1c:	2880000b 	ldhu	r2,0(r5)
    ae20:	10c0020c 	andi	r3,r2,8
    ae24:	18002026 	beq	r3,zero,aea8 <__sfvwrite_small_str+0x8c>
    ae28:	28c0008f 	ldh	r3,2(r5)
    ae2c:	defffd04 	addi	sp,sp,-12
    ae30:	dc000015 	stw	r16,0(sp)
    ae34:	dfc00215 	stw	ra,8(sp)
    ae38:	dc400115 	stw	r17,4(sp)
    ae3c:	2821883a 	mov	r16,r5
    ae40:	1800150e 	bge	r3,zero,ae98 <__sfvwrite_small_str+0x7c>
    ae44:	10c0800c 	andi	r3,r2,512
    ae48:	18001326 	beq	r3,zero,ae98 <__sfvwrite_small_str+0x7c>
    ae4c:	2c400517 	ldw	r17,20(r5)
    ae50:	89c0030e 	bge	r17,r7,ae60 <__sfvwrite_small_str+0x44>
    ae54:	10c0200c 	andi	r3,r2,128
    ae58:	18000326 	beq	r3,zero,ae68 <__sfvwrite_small_str+0x4c>
    ae5c:	00000e06 	br	ae98 <__sfvwrite_small_str+0x7c>
    ae60:	3c40010e 	bge	r7,r17,ae68 <__sfvwrite_small_str+0x4c>
    ae64:	3823883a 	mov	r17,r7
    ae68:	81000417 	ldw	r4,16(r16)
    ae6c:	300b883a 	mov	r5,r6
    ae70:	880d883a 	mov	r6,r17
    ae74:	000aec40 	call	aec4 <memmove>
    ae78:	80800517 	ldw	r2,20(r16)
    ae7c:	1445c83a 	sub	r2,r2,r17
    ae80:	80800515 	stw	r2,20(r16)
    ae84:	80800417 	ldw	r2,16(r16)
    ae88:	1463883a 	add	r17,r2,r17
    ae8c:	84400415 	stw	r17,16(r16)
    ae90:	0005883a 	mov	r2,zero
    ae94:	00000606 	br	aeb0 <__sfvwrite_small_str+0x94>
    ae98:	10801014 	ori	r2,r2,64
    ae9c:	8080000d 	sth	r2,0(r16)
    aea0:	00bfffc4 	movi	r2,-1
    aea4:	00000206 	br	aeb0 <__sfvwrite_small_str+0x94>
    aea8:	00bfffc4 	movi	r2,-1
    aeac:	f800283a 	ret
    aeb0:	dfc00217 	ldw	ra,8(sp)
    aeb4:	dc400117 	ldw	r17,4(sp)
    aeb8:	dc000017 	ldw	r16,0(sp)
    aebc:	dec00304 	addi	sp,sp,12
    aec0:	f800283a 	ret

0000aec4 <memmove>:
    aec4:	2005883a 	mov	r2,r4
    aec8:	218f883a 	add	r7,r4,r6
    aecc:	29000236 	bltu	r5,r4,aed8 <memmove+0x14>
    aed0:	1007883a 	mov	r3,r2
    aed4:	00000c06 	br	af08 <memmove+0x44>
    aed8:	2987883a 	add	r3,r5,r6
    aedc:	20fffc2e 	bgeu	r4,r3,aed0 <_gp+0xffff7754>
    aee0:	380b883a 	mov	r5,r7
    aee4:	30cdc83a 	sub	r6,r6,r3
    aee8:	1989883a 	add	r4,r3,r6
    aeec:	20000526 	beq	r4,zero,af04 <memmove+0x40>
    aef0:	18ffffc4 	addi	r3,r3,-1
    aef4:	19000003 	ldbu	r4,0(r3)
    aef8:	297fffc4 	addi	r5,r5,-1
    aefc:	29000005 	stb	r4,0(r5)
    af00:	003ff906 	br	aee8 <_gp+0xffff776c>
    af04:	f800283a 	ret
    af08:	19c00526 	beq	r3,r7,af20 <memmove+0x5c>
    af0c:	29000003 	ldbu	r4,0(r5)
    af10:	18c00044 	addi	r3,r3,1
    af14:	29400044 	addi	r5,r5,1
    af18:	193fffc5 	stb	r4,-1(r3)
    af1c:	003ffa06 	br	af08 <_gp+0xffff778c>
    af20:	f800283a 	ret

0000af24 <putc>:
    af24:	defffd04 	addi	sp,sp,-12
    af28:	00800074 	movhi	r2,1
    af2c:	dc000115 	stw	r16,4(sp)
    af30:	dfc00215 	stw	ra,8(sp)
    af34:	10ab5904 	addi	r2,r2,-21148
    af38:	28800115 	stw	r2,4(r5)
    af3c:	00800074 	movhi	r2,1
    af40:	10ade104 	addi	r2,r2,-18556
    af44:	d9000005 	stb	r4,0(sp)
    af48:	2021883a 	mov	r16,r4
    af4c:	11000017 	ldw	r4,0(r2)
    af50:	01c00044 	movi	r7,1
    af54:	d80d883a 	mov	r6,sp
    af58:	000ad640 	call	ad64 <__sfvwrite_small_dev>
    af5c:	00ffffc4 	movi	r3,-1
    af60:	10c00126 	beq	r2,r3,af68 <putc+0x44>
    af64:	8005883a 	mov	r2,r16
    af68:	dfc00217 	ldw	ra,8(sp)
    af6c:	dc000117 	ldw	r16,4(sp)
    af70:	dec00304 	addi	sp,sp,12
    af74:	f800283a 	ret

0000af78 <_putc_r>:
    af78:	defffd04 	addi	sp,sp,-12
    af7c:	00800074 	movhi	r2,1
    af80:	dc000115 	stw	r16,4(sp)
    af84:	dfc00215 	stw	ra,8(sp)
    af88:	10ab5904 	addi	r2,r2,-21148
    af8c:	30800115 	stw	r2,4(r6)
    af90:	00800074 	movhi	r2,1
    af94:	10ade104 	addi	r2,r2,-18556
    af98:	11000017 	ldw	r4,0(r2)
    af9c:	2821883a 	mov	r16,r5
    afa0:	01c00044 	movi	r7,1
    afa4:	300b883a 	mov	r5,r6
    afa8:	d80d883a 	mov	r6,sp
    afac:	dc000005 	stb	r16,0(sp)
    afb0:	000ad640 	call	ad64 <__sfvwrite_small_dev>
    afb4:	00ffffc4 	movi	r3,-1
    afb8:	10c00126 	beq	r2,r3,afc0 <_putc_r+0x48>
    afbc:	8005883a 	mov	r2,r16
    afc0:	dfc00217 	ldw	ra,8(sp)
    afc4:	dc000117 	ldw	r16,4(sp)
    afc8:	dec00304 	addi	sp,sp,12
    afcc:	f800283a 	ret

0000afd0 <_write_r>:
    afd0:	defffd04 	addi	sp,sp,-12
    afd4:	dc000015 	stw	r16,0(sp)
    afd8:	04000074 	movhi	r16,1
    afdc:	dc400115 	stw	r17,4(sp)
    afe0:	842e2b04 	addi	r16,r16,-18260
    afe4:	2023883a 	mov	r17,r4
    afe8:	2809883a 	mov	r4,r5
    afec:	300b883a 	mov	r5,r6
    aff0:	380d883a 	mov	r6,r7
    aff4:	dfc00215 	stw	ra,8(sp)
    aff8:	80000015 	stw	zero,0(r16)
    affc:	000b2440 	call	b244 <write>
    b000:	00ffffc4 	movi	r3,-1
    b004:	10c0031e 	bne	r2,r3,b014 <_write_r+0x44>
    b008:	80c00017 	ldw	r3,0(r16)
    b00c:	18000126 	beq	r3,zero,b014 <_write_r+0x44>
    b010:	88c00015 	stw	r3,0(r17)
    b014:	dfc00217 	ldw	ra,8(sp)
    b018:	dc400117 	ldw	r17,4(sp)
    b01c:	dc000017 	ldw	r16,0(sp)
    b020:	dec00304 	addi	sp,sp,12
    b024:	f800283a 	ret

0000b028 <__muldi3>:
    b028:	defff604 	addi	sp,sp,-40
    b02c:	dd800615 	stw	r22,24(sp)
    b030:	dd400515 	stw	r21,20(sp)
    b034:	dc400115 	stw	r17,4(sp)
    b038:	357fffcc 	andi	r21,r6,65535
    b03c:	2022d43a 	srli	r17,r4,16
    b040:	25bfffcc 	andi	r22,r4,65535
    b044:	dcc00315 	stw	r19,12(sp)
    b048:	dc800215 	stw	r18,8(sp)
    b04c:	2027883a 	mov	r19,r4
    b050:	2825883a 	mov	r18,r5
    b054:	b009883a 	mov	r4,r22
    b058:	a80b883a 	mov	r5,r21
    b05c:	dfc00915 	stw	ra,36(sp)
    b060:	df000815 	stw	fp,32(sp)
    b064:	ddc00715 	stw	r23,28(sp)
    b068:	3839883a 	mov	fp,r7
    b06c:	302ed43a 	srli	r23,r6,16
    b070:	dd000415 	stw	r20,16(sp)
    b074:	dc000015 	stw	r16,0(sp)
    b078:	3029883a 	mov	r20,r6
    b07c:	0009ec40 	call	9ec4 <__mulsi3>
    b080:	a80b883a 	mov	r5,r21
    b084:	8809883a 	mov	r4,r17
    b088:	1021883a 	mov	r16,r2
    b08c:	0009ec40 	call	9ec4 <__mulsi3>
    b090:	8809883a 	mov	r4,r17
    b094:	b80b883a 	mov	r5,r23
    b098:	102b883a 	mov	r21,r2
    b09c:	0009ec40 	call	9ec4 <__mulsi3>
    b0a0:	b80b883a 	mov	r5,r23
    b0a4:	b009883a 	mov	r4,r22
    b0a8:	1023883a 	mov	r17,r2
    b0ac:	0009ec40 	call	9ec4 <__mulsi3>
    b0b0:	8006d43a 	srli	r3,r16,16
    b0b4:	1545883a 	add	r2,r2,r21
    b0b8:	1885883a 	add	r2,r3,r2
    b0bc:	1540022e 	bgeu	r2,r21,b0c8 <__muldi3+0xa0>
    b0c0:	00c00074 	movhi	r3,1
    b0c4:	88e3883a 	add	r17,r17,r3
    b0c8:	1006d43a 	srli	r3,r2,16
    b0cc:	1004943a 	slli	r2,r2,16
    b0d0:	e00b883a 	mov	r5,fp
    b0d4:	9809883a 	mov	r4,r19
    b0d8:	843fffcc 	andi	r16,r16,65535
    b0dc:	1c63883a 	add	r17,r3,r17
    b0e0:	1421883a 	add	r16,r2,r16
    b0e4:	0009ec40 	call	9ec4 <__mulsi3>
    b0e8:	900b883a 	mov	r5,r18
    b0ec:	a009883a 	mov	r4,r20
    b0f0:	1027883a 	mov	r19,r2
    b0f4:	0009ec40 	call	9ec4 <__mulsi3>
    b0f8:	9885883a 	add	r2,r19,r2
    b0fc:	1447883a 	add	r3,r2,r17
    b100:	8005883a 	mov	r2,r16
    b104:	dfc00917 	ldw	ra,36(sp)
    b108:	df000817 	ldw	fp,32(sp)
    b10c:	ddc00717 	ldw	r23,28(sp)
    b110:	dd800617 	ldw	r22,24(sp)
    b114:	dd400517 	ldw	r21,20(sp)
    b118:	dd000417 	ldw	r20,16(sp)
    b11c:	dcc00317 	ldw	r19,12(sp)
    b120:	dc800217 	ldw	r18,8(sp)
    b124:	dc400117 	ldw	r17,4(sp)
    b128:	dc000017 	ldw	r16,0(sp)
    b12c:	dec00a04 	addi	sp,sp,40
    b130:	f800283a 	ret

0000b134 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    b134:	deffff04 	addi	sp,sp,-4
    b138:	01000074 	movhi	r4,1
    b13c:	01400074 	movhi	r5,1
    b140:	dfc00015 	stw	ra,0(sp)
    b144:	212da704 	addi	r4,r4,-18788
    b148:	296de504 	addi	r5,r5,-18540

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    b14c:	2140061e 	bne	r4,r5,b168 <alt_load+0x34>
    b150:	01000074 	movhi	r4,1
    b154:	01400074 	movhi	r5,1
    b158:	21200804 	addi	r4,r4,-32736
    b15c:	29600804 	addi	r5,r5,-32736
    b160:	2140121e 	bne	r4,r5,b1ac <alt_load+0x78>
    b164:	00000b06 	br	b194 <alt_load+0x60>
    b168:	00c00074 	movhi	r3,1
    b16c:	18ede504 	addi	r3,r3,-18540
    b170:	1907c83a 	sub	r3,r3,r4
    b174:	0005883a 	mov	r2,zero
  {
    while( to != end )
    b178:	10fff526 	beq	r2,r3,b150 <_gp+0xffff79d4>
    {
      *to++ = *from++;
    b17c:	114f883a 	add	r7,r2,r5
    b180:	39c00017 	ldw	r7,0(r7)
    b184:	110d883a 	add	r6,r2,r4
    b188:	10800104 	addi	r2,r2,4
    b18c:	31c00015 	stw	r7,0(r6)
    b190:	003ff906 	br	b178 <_gp+0xffff79fc>
    b194:	01000074 	movhi	r4,1
    b198:	01400074 	movhi	r5,1
    b19c:	212ce504 	addi	r4,r4,-19564
    b1a0:	296ce504 	addi	r5,r5,-19564

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    b1a4:	2140101e 	bne	r4,r5,b1e8 <alt_load+0xb4>
    b1a8:	00000b06 	br	b1d8 <alt_load+0xa4>
    b1ac:	00c00074 	movhi	r3,1
    b1b0:	18e00804 	addi	r3,r3,-32736
    b1b4:	1907c83a 	sub	r3,r3,r4
    b1b8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    b1bc:	10fff526 	beq	r2,r3,b194 <_gp+0xffff7a18>
    {
      *to++ = *from++;
    b1c0:	114f883a 	add	r7,r2,r5
    b1c4:	39c00017 	ldw	r7,0(r7)
    b1c8:	110d883a 	add	r6,r2,r4
    b1cc:	10800104 	addi	r2,r2,4
    b1d0:	31c00015 	stw	r7,0(r6)
    b1d4:	003ff906 	br	b1bc <_gp+0xffff7a40>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    b1d8:	000b3840 	call	b384 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    b1dc:	dfc00017 	ldw	ra,0(sp)
    b1e0:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    b1e4:	000b3881 	jmpi	b388 <alt_icache_flush_all>
    b1e8:	00c00074 	movhi	r3,1
    b1ec:	18eda704 	addi	r3,r3,-18788
    b1f0:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    b1f4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    b1f8:	18bff726 	beq	r3,r2,b1d8 <_gp+0xffff7a5c>
    {
      *to++ = *from++;
    b1fc:	114f883a 	add	r7,r2,r5
    b200:	39c00017 	ldw	r7,0(r7)
    b204:	110d883a 	add	r6,r2,r4
    b208:	10800104 	addi	r2,r2,4
    b20c:	31c00015 	stw	r7,0(r6)
    b210:	003ff906 	br	b1f8 <_gp+0xffff7a7c>

0000b214 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    b214:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    b218:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    b21c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    b220:	000b2a40 	call	b2a4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    b224:	000b2c40 	call	b2c4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    b228:	d1a04d17 	ldw	r6,-32460(gp)
    b22c:	d1604e17 	ldw	r5,-32456(gp)
    b230:	d1204f17 	ldw	r4,-32452(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    b234:	dfc00017 	ldw	ra,0(sp)
    b238:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    b23c:	00084b81 	jmpi	84b8 <main>

0000b240 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    b240:	000b2fc1 	jmpi	b2fc <alt_busy_sleep>

0000b244 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    b244:	00800044 	movi	r2,1
    b248:	20800226 	beq	r4,r2,b254 <write+0x10>
    b24c:	00800084 	movi	r2,2
    b250:	2080041e 	bne	r4,r2,b264 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    b254:	01000074 	movhi	r4,1
    b258:	000f883a 	mov	r7,zero
    b25c:	212de304 	addi	r4,r4,-18548
    b260:	000b2c81 	jmpi	b2c8 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    b264:	d0a00517 	ldw	r2,-32748(gp)
    b268:	10000926 	beq	r2,zero,b290 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    b26c:	deffff04 	addi	sp,sp,-4
    b270:	dfc00015 	stw	ra,0(sp)
    b274:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    b278:	00c01444 	movi	r3,81
    b27c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    b280:	00bfffc4 	movi	r2,-1
    b284:	dfc00017 	ldw	ra,0(sp)
    b288:	dec00104 	addi	sp,sp,4
    b28c:	f800283a 	ret
    b290:	d0a04c04 	addi	r2,gp,-32464
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    b294:	00c01444 	movi	r3,81
    b298:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    b29c:	00bfffc4 	movi	r2,-1
    b2a0:	f800283a 	ret

0000b2a4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    b2a4:	deffff04 	addi	sp,sp,-4
    b2a8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    b2ac:	000b38c0 	call	b38c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    b2b0:	00800044 	movi	r2,1
    b2b4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    b2b8:	dfc00017 	ldw	ra,0(sp)
    b2bc:	dec00104 	addi	sp,sp,4
    b2c0:	f800283a 	ret

0000b2c4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    b2c4:	f800283a 	ret

0000b2c8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    b2c8:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    b2cc:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    b2d0:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    b2d4:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    b2d8:	2980072e 	bgeu	r5,r6,b2f8 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    b2dc:	38c00037 	ldwio	r3,0(r7)
    b2e0:	18ffffec 	andhi	r3,r3,65535
    b2e4:	183ffc26 	beq	r3,zero,b2d8 <_gp+0xffff7b5c>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    b2e8:	28c00007 	ldb	r3,0(r5)
    b2ec:	20c00035 	stwio	r3,0(r4)
    b2f0:	29400044 	addi	r5,r5,1
    b2f4:	003ff806 	br	b2d8 <_gp+0xffff7b5c>

  return count;
}
    b2f8:	f800283a 	ret

0000b2fc <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    b2fc:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    b300:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    b304:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    b308:	dc000015 	stw	r16,0(sp)
    b30c:	dfc00115 	stw	ra,4(sp)
    b310:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    b314:	0008a4c0 	call	8a4c <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    b318:	10001026 	beq	r2,zero,b35c <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    b31c:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    b320:	013999b4 	movhi	r4,58982
    b324:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    b328:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    b32c:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    b330:	297fffc4 	addi	r5,r5,-1
    b334:	283ffe1e 	bne	r5,zero,b330 <_gp+0xffff7bb4>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    b338:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    b33c:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    b340:	18bffb16 	blt	r3,r2,b330 <_gp+0xffff7bb4>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    b344:	01400144 	movi	r5,5
    b348:	8009883a 	mov	r4,r16
    b34c:	0009ec40 	call	9ec4 <__mulsi3>
    b350:	10bfffc4 	addi	r2,r2,-1
    b354:	103ffe1e 	bne	r2,zero,b350 <_gp+0xffff7bd4>
    b358:	00000506 	br	b370 <alt_busy_sleep+0x74>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    b35c:	01400144 	movi	r5,5
    b360:	8009883a 	mov	r4,r16
    b364:	0009ec40 	call	9ec4 <__mulsi3>
    b368:	10bfffc4 	addi	r2,r2,-1
    b36c:	00bffe16 	blt	zero,r2,b368 <_gp+0xffff7bec>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    b370:	0005883a 	mov	r2,zero
    b374:	dfc00117 	ldw	ra,4(sp)
    b378:	dc000017 	ldw	r16,0(sp)
    b37c:	dec00204 	addi	sp,sp,8
    b380:	f800283a 	ret

0000b384 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    b384:	f800283a 	ret

0000b388 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    b388:	f800283a 	ret

0000b38c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    b38c:	000170fa 	wrctl	ienable,zero
    b390:	f800283a 	ret
