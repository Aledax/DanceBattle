
slave_de1.elf:     file format elf32-littlenios2
slave_de1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x000036b0 memsz 0x000036b0 flags r-x
    LOAD off    0x000046d0 vaddr 0x0000b6d0 paddr 0x0000b834 align 2**12
         filesz 0x00000164 memsz 0x00000164 flags rw-
    LOAD off    0x00004998 vaddr 0x0000b998 paddr 0x0000b998 align 2**12
         filesz 0x00000000 memsz 0x0000002c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00004834  2**0
                  CONTENTS
  2 .text         00003374  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000033c  0000b394  0000b394  00004394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000164  0000b6d0  0000b834  000046d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000002c  0000b998  0000b998  00004998  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000b9c4  0000b9c4  00004834  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00004834  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000560  00000000  00000000  00004858  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000091d7  00000000  00000000  00004db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002daa  00000000  00000000  0000df8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000036c3  00000000  00000000  00010d39  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000009a4  00000000  00000000  000143fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001b15  00000000  00000000  00014da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000629f  00000000  00000000  000168b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0001cb54  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000810  00000000  00000000  0001cb68  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001eb9d  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0001eba0  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001ebac  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001ebad  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0001ebae  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0001ebb9  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0001ebc4  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  0001ebcf  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000042  00000000  00000000  0001ebdb  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0003a3b1  00000000  00000000  0001ec1d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
0000b394 l    d  .rodata	00000000 .rodata
0000b6d0 l    d  .rwdata	00000000 .rwdata
0000b998 l    d  .bss	00000000 .bss
0000b9c4 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../slave_de1_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 esp.c
00000000 l    df *ABS*	00000000 hello_world_small.c
0000b998 l     O .bss	00000004 thresholds
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
0000b9ac l     O .bss	00000008 _randbits
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000a1e0 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vfprintf.c
0000a794 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 impure.c
0000b6d0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000b380 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00009f60 g     F .text	0000001c putchar
0000b23c g     F .text	0000002c alt_main
0000a198 g     F .text	0000002c strcpy
00009f7c g     F .text	00000080 _puts_r
0000b834 g       *ABS*	00000000 __flash_rwdata_start
00009f0c g     F .text	0000004c printf
0000aea8 g     F .text	00000060 memmove
0000b38c g     F .text	00000008 altera_nios2_gen2_irq_init
0000ae00 g     F .text	000000a8 __sfvwrite_small_str
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000b9b4 g     O .bss	00000004 errno
0000b9bc g     O .bss	00000004 alt_argv
00013808 g       *ABS*	00000000 _gp
0000b99c g     O .bss	00000004 UART_RXDATA_REG
0000b7b0 g     O .rwdata	00000030 alt_fd_list
00009f58 g     F .text	00000008 _putchar_r
00008810 g     F .text	000000f0 uart_output
00009d68 g     F .text	000000dc .hidden __floatsidf
00009ffc g     F .text	00000014 puts
0000b2ec g     F .text	0000005c altera_avalon_jtag_uart_read
00009ed0 g     F .text	0000003c _printf_r
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008a30 g     F .text	00000064 .hidden __udivsi3
0000b81c g     O .rwdata	00000004 alt_max_fd
00008aec g     F .text	000008ac .hidden __adddf3
000083a4 g     F .text	00000014 getFrame
0000b80c g     O .rwdata	00000004 _global_impure_ptr
0000b9c4 g       *ABS*	00000000 __bss_end
0000b118 g     F .text	00000044 alt_getchar
0000b7e0 g     O .rwdata	00000028 alt_dev_null
0000b37c g     F .text	00000004 alt_dcache_flush_all
0000805c g     F .text	000000a4 init_connection
0000b834 g       *ABS*	00000000 __ram_rwdata_end
0000b820 g     O .rwdata	00000008 alt_dev_list
0000b268 g     F .text	00000060 write
0000af5c g     F .text	00000058 _putc_r
0000b6d0 g       *ABS*	00000000 __ram_rodata_end
0000b818 g     O .rwdata	00000004 jtag_uart_0
00008a94 g     F .text	00000058 .hidden __umodsi3
0000b9a0 g     O .bss	00000004 UART_CONTROL_REG
0000b9c4 g       *ABS*	00000000 end
0000844c g     F .text	00000024 writeThresholds
00008694 g     F .text	000000d4 uart_wait_for_messages
0000ce20 g       *ABS*	00000000 __alt_stack_pointer
00009e44 g     F .text	00000064 .hidden __clzsi2
0000b348 g     F .text	00000034 altera_avalon_jtag_uart_write
00008900 g     F .text	00000038 uart_init
0000a800 g     F .text	0000052c ___vfprintf_internal_r
0000a084 g     F .text	00000064 _sprintf_r
00008020 g     F .text	0000003c _start
0000a024 g     F .text	00000060 rand
0000b2e8 g     F .text	00000004 alt_sys_init
000084e8 g     F .text	00000018 uart_write_command
00009ea8 g     F .text	00000028 .hidden __mulsi3
0000b6d0 g       *ABS*	00000000 __ram_rwdata_start
0000b394 g       *ABS*	00000000 __ram_rodata_start
000083b8 g     F .text	0000004c printCoords
0000b9a4 g     O .bss	00000004 UART_TXDATA_REG
0000b808 g     O .rwdata	00000004 camera_base
00008500 g     F .text	00000068 uart_read_byte
0000b9c4 g       *ABS*	00000000 __alt_stack_base
00009398 g     F .text	000009d0 .hidden __divdf3
0000a24c g     F .text	0000052c ___svfprintf_internal_r
0000ad48 g     F .text	000000b8 __sfvwrite_small_dev
0000b998 g       *ABS*	00000000 __bss_start
00008470 g     F .text	00000068 main
0000b9b8 g     O .bss	00000004 alt_envp
0000b814 g     O .rwdata	00000004 uart_0
0000a010 g     F .text	00000014 srand
000085e4 g     F .text	000000b0 uart_read_data
0000b830 g     O .rwdata	00000004 alt_errno
00008768 g     F .text	000000a8 uart_send_command
0000af08 g     F .text	00000054 putc
00008938 g     F .text	00000084 .hidden __divsi3
0000a160 g     F .text	00000038 strcmp
0000b394 g       *ABS*	00000000 __flash_rodata_start
0000b2c8 g     F .text	00000020 alt_irq_init
0000b9a8 g     O .bss	00000004 UART_STATUS_REG
0000a0e8 g     F .text	00000078 sprintf
0000b5c3 g     O .rodata	00000100 .hidden __clz_tab
0000afb4 g     F .text	00000058 _write_r
00008404 g     F .text	00000048 printThresholds
0000859c g     F .text	00000048 uart_write_data
0000b810 g     O .rwdata	00000004 _impure_ptr
0000b9c0 g     O .bss	00000004 alt_argc
0000b828 g     O .rwdata	00000008 alt_fs_list
0000a778 g     F .text	0000001c __vfprintf_internal_unused
00008020 g       *ABS*	00000000 __ram_exceptions_start
0000b834 g       *ABS*	00000000 _edata
0000b9c4 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
000084d8 g     F .text	00000010 uart_read_command
000089bc g     F .text	00000074 .hidden __modsi3
0000ce20 g       *ABS*	00000000 __alt_data_end
00008100 g     F .text	000002a4 esp_run
0000800c g       .entry	00000000 _exit
0000b00c g     F .text	0000010c .hidden __muldi3
0000a1c4 g     F .text	0000001c strlen
0000b388 g     F .text	00000004 alt_icache_flush_all
0000ad2c g     F .text	0000001c __vfprintf_internal
0000b15c g     F .text	000000e0 alt_load
00008568 g     F .text	00000034 uart_write_byte



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def38814 	ori	sp,sp,52768
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d68e0214 	ori	gp,gp,14344
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10ae6614 	ori	r2,r2,47512

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18ee7114 	ori	r3,r3,47556

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff483c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	000b15c0 	call	b15c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	000b23c0 	call	b23c <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff4850>

0000805c <init_connection>:
};

bool init_connection(char* serverIP);

// Function Definitions
bool init_connection(char* serverIP) {
    805c:	defff804 	addi	sp,sp,-32
    8060:	dc400515 	stw	r17,20(sp)
  // Reset the ESP
  uart_send_command(ESP_RESET_COMMAND, NULL, 0);
    8064:	04400074 	movhi	r17,1
    8068:	8c6ce504 	addi	r17,r17,-19564
};

bool init_connection(char* serverIP);

// Function Definitions
bool init_connection(char* serverIP) {
    806c:	dc000415 	stw	r16,16(sp)
  // Reset the ESP
  uart_send_command(ESP_RESET_COMMAND, NULL, 0);
    8070:	000d883a 	mov	r6,zero
};

bool init_connection(char* serverIP);

// Function Definitions
bool init_connection(char* serverIP) {
    8074:	2021883a 	mov	r16,r4
  // Reset the ESP
  uart_send_command(ESP_RESET_COMMAND, NULL, 0);
    8078:	000b883a 	mov	r5,zero
    807c:	8809883a 	mov	r4,r17
};

bool init_connection(char* serverIP);

// Function Definitions
bool init_connection(char* serverIP) {
    8080:	dfc00715 	stw	ra,28(sp)
    8084:	dc800615 	stw	r18,24(sp)
  // Reset the ESP
  uart_send_command(ESP_RESET_COMMAND, NULL, 0);
    8088:	00087680 	call	8768 <uart_send_command>
  uart_wait_for_messages((char*[]){ESP_INIT_COMMAND}, 1);
    808c:	04800044 	movi	r18,1
    8090:	00800074 	movhi	r2,1
    8094:	900b883a 	mov	r5,r18
    8098:	d9000304 	addi	r4,sp,12
    809c:	10ace604 	addi	r2,r2,-19560
    80a0:	d8800315 	stw	r2,12(sp)
    80a4:	00086940 	call	8694 <uart_wait_for_messages>

  // Connect to the backend
  uart_send_command(ESP_CONNECT_BACKEND_COMMAND, (char*[]){serverIP}, 1);
    80a8:	dc000215 	stw	r16,8(sp)
    80ac:	04000074 	movhi	r16,1
    80b0:	842ce704 	addi	r16,r16,-19556
    80b4:	900d883a 	mov	r6,r18
    80b8:	d9400204 	addi	r5,sp,8
    80bc:	8009883a 	mov	r4,r16
    80c0:	00087680 	call	8768 <uart_send_command>
  char* yieldedMessage = uart_wait_for_messages((char*[]){ESP_READY_COMMAND, ESP_CLOSE_COMMAND}, 2);
    80c4:	d809883a 	mov	r4,sp
    80c8:	01400084 	movi	r5,2
    80cc:	dc400015 	stw	r17,0(sp)
    80d0:	dc000115 	stw	r16,4(sp)
    80d4:	00086940 	call	8694 <uart_wait_for_messages>

  if (strcmp(yieldedMessage, ESP_CLOSE_COMMAND) == 0) {
    80d8:	800b883a 	mov	r5,r16
    80dc:	1009883a 	mov	r4,r2
    80e0:	000a1600 	call	a160 <strcmp>
    80e4:	1004c03a 	cmpne	r2,r2,zero
    return false;
  }

  return true;
}
    80e8:	dfc00717 	ldw	ra,28(sp)
    80ec:	dc800617 	ldw	r18,24(sp)
    80f0:	dc400517 	ldw	r17,20(sp)
    80f4:	dc000417 	ldw	r16,16(sp)
    80f8:	dec00804 	addi	sp,sp,32
    80fc:	f800283a 	ret

00008100 <esp_run>:

void esp_run(int argc, char** argv) {
    8100:	defdf204 	addi	sp,sp,-2104
    8104:	dc820715 	stw	r18,2076(sp)
    8108:	2025883a 	mov	r18,r4
  if (DEBUG) {
    printf("Running ESP\n");
    810c:	01000074 	movhi	r4,1
    8110:	212ced04 	addi	r4,r4,-19532
  }

  return true;
}

void esp_run(int argc, char** argv) {
    8114:	dd020915 	stw	r20,2084(sp)
    8118:	dcc20815 	stw	r19,2080(sp)
    811c:	dc420615 	stw	r17,2072(sp)
    8120:	dc020515 	stw	r16,2068(sp)
    8124:	dfc20d15 	stw	ra,2100(sp)
    8128:	ddc20c15 	stw	r23,2096(sp)
    812c:	dd820b15 	stw	r22,2092(sp)
    8130:	dd420a15 	stw	r21,2088(sp)
    8134:	2827883a 	mov	r19,r5
  char recvBuffer[UART_BUFFER_SIZE];
  char sendBuffer[UART_BUFFER_SIZE];
  // char *sendPtr;
  // char *recvPtr;
  unsigned int count = 0;
  unsigned int failCount = 0;
    8138:	0021883a 	mov	r16,zero
  return true;
}

void esp_run(int argc, char** argv) {
  if (DEBUG) {
    printf("Running ESP\n");
    813c:	0009ffc0 	call	9ffc <puts>
  unsigned int failCount = 0;
  bool connected = false;
  struct Pose pose;

  do {
    connected = init_connection(argc > 1 ? argv[1] : SERVER_IP);
    8140:	05000044 	movi	r20,1
    failCount += !connected;

    if (!connected && failCount > 0) {
      printf("Failed to connect to backend %d/10 times. Retrying ...\n", failCount);
    }
  } while (!connected && failCount < 10);
    8144:	04400244 	movi	r17,9
  unsigned int failCount = 0;
  bool connected = false;
  struct Pose pose;

  do {
    connected = init_connection(argc > 1 ? argv[1] : SERVER_IP);
    8148:	a480020e 	bge	r20,r18,8154 <esp_run+0x54>
    814c:	99000117 	ldw	r4,4(r19)
    8150:	00000206 	br	815c <esp_run+0x5c>
    8154:	01000074 	movhi	r4,1
    8158:	212ce804 	addi	r4,r4,-19552
    815c:	000805c0 	call	805c <init_connection>
    failCount += !connected;

    if (!connected && failCount > 0) {
    8160:	10803fcc 	andi	r2,r2,255
    8164:	1000151e 	bne	r2,zero,81bc <esp_run+0xbc>
  bool connected = false;
  struct Pose pose;

  do {
    connected = init_connection(argc > 1 ? argv[1] : SERVER_IP);
    failCount += !connected;
    8168:	84000044 	addi	r16,r16,1

    if (!connected && failCount > 0) {
    816c:	803ff626 	beq	r16,zero,8148 <_gp+0xffff4940>
      printf("Failed to connect to backend %d/10 times. Retrying ...\n", failCount);
    8170:	01000074 	movhi	r4,1
    8174:	800b883a 	mov	r5,r16
    8178:	212cf004 	addi	r4,r4,-19520
    817c:	0009f0c0 	call	9f0c <printf>
    }
  } while (!connected && failCount < 10);
    8180:	8c3ff12e 	bgeu	r17,r16,8148 <_gp+0xffff4940>

  if (!connected) {
    // Add some sorta loop counter here
    printf("ESP Failed to connect to backend. Quitting ...\n");
    8184:	01000074 	movhi	r4,1
    8188:	212d0504 	addi	r4,r4,-19436
    818c:	0009ffc0 	call	9ffc <puts>
    //     recvPtr++;
    // }
    // *recvPtr = '\0';
    printf("[%d] %s\n", len, recvBuffer);
  }
}
    8190:	dfc20d17 	ldw	ra,2100(sp)
    8194:	ddc20c17 	ldw	r23,2096(sp)
    8198:	dd820b17 	ldw	r22,2092(sp)
    819c:	dd420a17 	ldw	r21,2088(sp)
    81a0:	dd020917 	ldw	r20,2084(sp)
    81a4:	dcc20817 	ldw	r19,2080(sp)
    81a8:	dc820717 	ldw	r18,2076(sp)
    81ac:	dc420617 	ldw	r17,2072(sp)
    81b0:	dc020517 	ldw	r16,2068(sp)
    81b4:	dec20e04 	addi	sp,sp,2104
    81b8:	f800283a 	ret
    // Add some sorta loop counter here
    printf("ESP Failed to connect to backend. Quitting ...\n");
    return;
  }

  printf("Connected to backend\n");
    81bc:	01000074 	movhi	r4,1
    81c0:	212d1104 	addi	r4,r4,-19388
    81c4:	0009ffc0 	call	9ffc <puts>
    81c8:	04000284 	movi	r16,10
  // uart_write_data('\r');

  while (count < 10) {
    // display(count);

    pose.beat = (rand() % 1000) / (rand() % 100 + 1.0);
    81cc:	000a0240 	call	a024 <rand>
    81d0:	1023883a 	mov	r17,r2
    81d4:	000a0240 	call	a024 <rand>
    81d8:	0140fa04 	movi	r5,1000
    81dc:	8809883a 	mov	r4,r17
    81e0:	1027883a 	mov	r19,r2
    81e4:	00089bc0 	call	89bc <__modsi3>
    81e8:	1009883a 	mov	r4,r2
    81ec:	0009d680 	call	9d68 <__floatsidf>
    81f0:	01401904 	movi	r5,100
    81f4:	9809883a 	mov	r4,r19
    81f8:	1823883a 	mov	r17,r3
    81fc:	1025883a 	mov	r18,r2
    8200:	00089bc0 	call	89bc <__modsi3>
    8204:	1009883a 	mov	r4,r2
    8208:	0009d680 	call	9d68 <__floatsidf>
    820c:	000d883a 	mov	r6,zero
    8210:	01cffc34 	movhi	r7,16368
    8214:	1009883a 	mov	r4,r2
    8218:	180b883a 	mov	r5,r3
    821c:	0008aec0 	call	8aec <__adddf3>
    8220:	100d883a 	mov	r6,r2
    8224:	180f883a 	mov	r7,r3
    8228:	9009883a 	mov	r4,r18
    822c:	880b883a 	mov	r5,r17
    8230:	00093980 	call	9398 <__divdf3>
    8234:	1823883a 	mov	r17,r3
    8238:	1025883a 	mov	r18,r2
    pose.hourAngle = (rand() % 1000) / (rand() % 100 + 1.0);
    823c:	000a0240 	call	a024 <rand>
    8240:	1027883a 	mov	r19,r2
    8244:	000a0240 	call	a024 <rand>
    8248:	0140fa04 	movi	r5,1000
    824c:	9809883a 	mov	r4,r19
    8250:	102b883a 	mov	r21,r2
    8254:	00089bc0 	call	89bc <__modsi3>
    8258:	1009883a 	mov	r4,r2
    825c:	0009d680 	call	9d68 <__floatsidf>
    8260:	01401904 	movi	r5,100
    8264:	a809883a 	mov	r4,r21
    8268:	1827883a 	mov	r19,r3
    826c:	1029883a 	mov	r20,r2
    8270:	00089bc0 	call	89bc <__modsi3>
    8274:	1009883a 	mov	r4,r2
    8278:	0009d680 	call	9d68 <__floatsidf>
    827c:	000d883a 	mov	r6,zero
    8280:	01cffc34 	movhi	r7,16368
    8284:	1009883a 	mov	r4,r2
    8288:	180b883a 	mov	r5,r3
    828c:	0008aec0 	call	8aec <__adddf3>
    8290:	100d883a 	mov	r6,r2
    8294:	180f883a 	mov	r7,r3
    8298:	a009883a 	mov	r4,r20
    829c:	980b883a 	mov	r5,r19
    82a0:	00093980 	call	9398 <__divdf3>
    82a4:	1827883a 	mov	r19,r3
    82a8:	1029883a 	mov	r20,r2
    pose.minuteAngle = (rand() % 1000) / (rand() % 100 + 1.0);
    82ac:	000a0240 	call	a024 <rand>
    82b0:	102b883a 	mov	r21,r2
    82b4:	000a0240 	call	a024 <rand>

    sprintf(sendBuffer, "%f %f %f", pose.beat, pose.hourAngle,
    82b8:	0140fa04 	movi	r5,1000
    82bc:	a809883a 	mov	r4,r21
  while (count < 10) {
    // display(count);

    pose.beat = (rand() % 1000) / (rand() % 100 + 1.0);
    pose.hourAngle = (rand() % 1000) / (rand() % 100 + 1.0);
    pose.minuteAngle = (rand() % 1000) / (rand() % 100 + 1.0);
    82c0:	102f883a 	mov	r23,r2

    sprintf(sendBuffer, "%f %f %f", pose.beat, pose.hourAngle,
    82c4:	00089bc0 	call	89bc <__modsi3>
    82c8:	1009883a 	mov	r4,r2
    82cc:	0009d680 	call	9d68 <__floatsidf>
    82d0:	01401904 	movi	r5,100
    82d4:	b809883a 	mov	r4,r23
    82d8:	182b883a 	mov	r21,r3
    82dc:	102d883a 	mov	r22,r2
    82e0:	00089bc0 	call	89bc <__modsi3>
    82e4:	1009883a 	mov	r4,r2
    82e8:	0009d680 	call	9d68 <__floatsidf>
    82ec:	000d883a 	mov	r6,zero
    82f0:	01cffc34 	movhi	r7,16368
    82f4:	1009883a 	mov	r4,r2
    82f8:	180b883a 	mov	r5,r3
    82fc:	0008aec0 	call	8aec <__adddf3>
    8300:	100d883a 	mov	r6,r2
    8304:	180f883a 	mov	r7,r3
    8308:	b009883a 	mov	r4,r22
    830c:	a80b883a 	mov	r5,r21
    8310:	00093980 	call	9398 <__divdf3>
    8314:	01400074 	movhi	r5,1
    8318:	d8c00315 	stw	r3,12(sp)
    831c:	880f883a 	mov	r7,r17
    8320:	900d883a 	mov	r6,r18
    8324:	296cfe04 	addi	r5,r5,-19464
    8328:	d9000404 	addi	r4,sp,16
    832c:	d8800215 	stw	r2,8(sp)
    8330:	dd000015 	stw	r20,0(sp)
    8334:	dcc00115 	stw	r19,4(sp)
    8338:	000a0e80 	call	a0e8 <sprintf>
            pose.minuteAngle);

    uart_send_command(ESP_POSE_COMMAND, (char*[]){sendBuffer}, 1);
    833c:	01000074 	movhi	r4,1
    8340:	d8800404 	addi	r2,sp,16
    8344:	01800044 	movi	r6,1
    8348:	d9420404 	addi	r5,sp,2064
    834c:	212d0104 	addi	r4,r4,-19452
    8350:	d8820415 	stw	r2,2064(sp)
    8354:	00087680 	call	8768 <uart_send_command>
    //     sendPtr++;
    // }

    // uart_write_data('\r');

    unsigned int len = uart_read_data(recvBuffer, UART_BUFFER_SIZE);
    8358:	01410004 	movi	r5,1024
    835c:	d9010404 	addi	r4,sp,1040
    8360:	00085e40 	call	85e4 <uart_read_data>
    //         break;
    //     }
    //     recvPtr++;
    // }
    // *recvPtr = '\0';
    printf("[%d] %s\n", len, recvBuffer);
    8364:	01000074 	movhi	r4,1
    8368:	d9810404 	addi	r6,sp,1040
    836c:	100b883a 	mov	r5,r2
    8370:	212d0204 	addi	r4,r4,-19448
    8374:	843fffc4 	addi	r16,r16,-1
    8378:	0009f0c0 	call	9f0c <printf>
  // uart_write_data('a');
  // uart_write_data('r');
  // uart_write_data('t');
  // uart_write_data('\r');

  while (count < 10) {
    837c:	803f931e 	bne	r16,zero,81cc <_gp+0xffff49c4>
    printf("[%d] %s\n", len, recvBuffer);
    count++;
  }

  while (1) {
    unsigned int len = uart_read_data(recvBuffer, UART_BUFFER_SIZE);
    8380:	d9010404 	addi	r4,sp,1040
    8384:	01410004 	movi	r5,1024
    8388:	00085e40 	call	85e4 <uart_read_data>
    //         break;
    //     }
    //     recvPtr++;
    // }
    // *recvPtr = '\0';
    printf("[%d] %s\n", len, recvBuffer);
    838c:	01000074 	movhi	r4,1
    8390:	d9810404 	addi	r6,sp,1040
    8394:	100b883a 	mov	r5,r2
    8398:	212d0204 	addi	r4,r4,-19448
    839c:	0009f0c0 	call	9f0c <printf>
    83a0:	003ff706 	br	8380 <_gp+0xffff4b78>

000083a4 <getFrame>:
 * x = arr[i] & 0xFFFF;
 * y = arr[i] >> 16;
 */
void getFrame(uint32_t *arr, int *len) {
  arr = (uint32_t *)malloc(NUM_POINT_FINDERS * sizeof(uint32_t));
  *len = NUM_POINT_FINDERS;
    83a4:	00800044 	movi	r2,1
    83a8:	28800015 	stw	r2,0(r5)

  uint32_t raw_coords;
  for (int i = 0; i < NUM_POINT_FINDERS; i++) {
    raw_coords = *(camera_base + i);
    83ac:	d0a00017 	ldw	r2,-32768(gp)
    83b0:	10800017 	ldw	r2,0(r2)
    83b4:	f800283a 	ret

000083b8 <printCoords>:
    //smallLeftBigRight);
  }
}

// sample code for Bell
void printCoords() {
    83b8:	defffd04 	addi	sp,sp,-12
    83bc:	dfc00215 	stw	ra,8(sp)
    83c0:	dc000115 	stw	r16,4(sp)
  int len;
  uint32_t *arr = NULL;
  while (1) {
    getFrame(arr, &len);
    83c4:	d80b883a 	mov	r5,sp
    83c8:	0009883a 	mov	r4,zero
    83cc:	00083a40 	call	83a4 <getFrame>
    for (int i = 0; i < len; i++) {
    83d0:	0021883a 	mov	r16,zero
    83d4:	d8800017 	ldw	r2,0(sp)
    83d8:	80bffa0e 	bge	r16,r2,83c4 <_gp+0xffff4bbc>
      uint32_t raw_coords = arr[i];
    83dc:	8405883a 	add	r2,r16,r16
    83e0:	1085883a 	add	r2,r2,r2
    83e4:	11400017 	ldw	r5,0(r2)
      uint16_t x = raw_coords & 0xFFFF;
      uint16_t y = raw_coords >> 16;
      printf("x: %i, y: %i\n", x, y);
    83e8:	01000074 	movhi	r4,1
    83ec:	212d1704 	addi	r4,r4,-19364
    83f0:	280cd43a 	srli	r6,r5,16
    83f4:	297fffcc 	andi	r5,r5,65535
void printCoords() {
  int len;
  uint32_t *arr = NULL;
  while (1) {
    getFrame(arr, &len);
    for (int i = 0; i < len; i++) {
    83f8:	84000044 	addi	r16,r16,1
      uint32_t raw_coords = arr[i];
      uint16_t x = raw_coords & 0xFFFF;
      uint16_t y = raw_coords >> 16;
      printf("x: %i, y: %i\n", x, y);
    83fc:	0009f0c0 	call	9f0c <printf>
    8400:	003ff406 	br	83d4 <_gp+0xffff4bcc>

00008404 <printThresholds>:
  free(arr);
}

void printThresholds(int i) {
  printf("Thresholds: crLow=%d crHigh=%d cbLow=%d cbHigh=%d\n",
         (thresholds[i] >> 24) & 0xFF, (thresholds[i] >> 16) & 0xFF,
    8404:	2109883a 	add	r4,r4,r4
    8408:	d0a06404 	addi	r2,gp,-32368
    840c:	2109883a 	add	r4,r4,r4
    8410:	1109883a 	add	r4,r2,r4
  }
  free(arr);
}

void printThresholds(int i) {
  printf("Thresholds: crLow=%d crHigh=%d cbLow=%d cbHigh=%d\n",
    8414:	21400017 	ldw	r5,0(r4)
    8418:	21c00043 	ldbu	r7,1(r4)
    841c:	21800083 	ldbu	r6,2(r4)
    8420:	28803fcc 	andi	r2,r5,255
    8424:	280ad63a 	srli	r5,r5,24
    }
  }
  free(arr);
}

void printThresholds(int i) {
    8428:	defffe04 	addi	sp,sp,-8
  printf("Thresholds: crLow=%d crHigh=%d cbLow=%d cbHigh=%d\n",
    842c:	01000074 	movhi	r4,1
    8430:	d8800015 	stw	r2,0(sp)
    8434:	212d1b04 	addi	r4,r4,-19348
    }
  }
  free(arr);
}

void printThresholds(int i) {
    8438:	dfc00115 	stw	ra,4(sp)
  printf("Thresholds: crLow=%d crHigh=%d cbLow=%d cbHigh=%d\n",
    843c:	0009f0c0 	call	9f0c <printf>
         (thresholds[i] >> 24) & 0xFF, (thresholds[i] >> 16) & 0xFF,
         (thresholds[i] >> 8) & 0xFF, thresholds[i] & 0xFF);
}
    8440:	dfc00117 	ldw	ra,4(sp)
    8444:	dec00204 	addi	sp,sp,8
    8448:	f800283a 	ret

0000844c <writeThresholds>:

void writeThresholds(int i) { *(camera_base + i) = thresholds[i]; }
    844c:	d0a00017 	ldw	r2,-32768(gp)
    8450:	2109883a 	add	r4,r4,r4
    8454:	2109883a 	add	r4,r4,r4
    8458:	d0e06404 	addi	r3,gp,-32368
    845c:	1105883a 	add	r2,r2,r4
    8460:	1909883a 	add	r4,r3,r4
    8464:	20c00017 	ldw	r3,0(r4)
    8468:	10c00015 	stw	r3,0(r2)
    846c:	f800283a 	ret

00008470 <main>:

int main(int argc, char** argv) {
    8470:	defffd04 	addi	sp,sp,-12
    8474:	dc000115 	stw	r16,4(sp)
    8478:	2021883a 	mov	r16,r4
  printf("Program start 1\n");
    847c:	01000074 	movhi	r4,1
    8480:	212d2804 	addi	r4,r4,-19296
    8484:	d9400015 	stw	r5,0(sp)
         (thresholds[i] >> 8) & 0xFF, thresholds[i] & 0xFF);
}

void writeThresholds(int i) { *(camera_base + i) = thresholds[i]; }

int main(int argc, char** argv) {
    8488:	dfc00215 	stw	ra,8(sp)
  printf("Program start 1\n");
    848c:	0009ffc0 	call	9ffc <puts>
  uint8_t cbLow = 111, cbHigh = 133, crLow = 112, crHigh = 134;
  thresholds[0] = (crLow << 24) | (crHigh << 16) | (cbLow << 8) | cbHigh;
    8490:	009c21b4 	movhi	r2,28806
    8494:	109be144 	addi	r2,r2,28549
  writeThresholds(0);
    8498:	0009883a 	mov	r4,zero
void writeThresholds(int i) { *(camera_base + i) = thresholds[i]; }

int main(int argc, char** argv) {
  printf("Program start 1\n");
  uint8_t cbLow = 111, cbHigh = 133, crLow = 112, crHigh = 134;
  thresholds[0] = (crLow << 24) | (crHigh << 16) | (cbLow << 8) | cbHigh;
    849c:	d0a06415 	stw	r2,-32368(gp)
  writeThresholds(0);
    84a0:	000844c0 	call	844c <writeThresholds>
  //	printCoords();

  int index = 0;
  int c;

  uart_init();
    84a4:	00089000 	call	8900 <uart_init>
  uart_output();
    84a8:	00088100 	call	8810 <uart_output>

  esp_run(argc, argv);
    84ac:	d9400017 	ldw	r5,0(sp)
    84b0:	8009883a 	mov	r4,r16
    84b4:	00081000 	call	8100 <esp_run>

  while (1) {
    printThresholds(index);
    84b8:	0009883a 	mov	r4,zero
    84bc:	00084040 	call	8404 <printThresholds>
    c = alt_getchar();
    84c0:	000b1180 	call	b118 <alt_getchar>
    printf("c: %c\n", c);
    84c4:	01000074 	movhi	r4,1
    84c8:	100b883a 	mov	r5,r2
    84cc:	212d2c04 	addi	r4,r4,-19280
    84d0:	0009f0c0 	call	9f0c <printf>
    84d4:	003ff806 	br	84b8 <_gp+0xffff4cb0>

000084d8 <uart_read_command>:
uint16_t uart_read_command(volatile uint16_t *reg, uint16_t mask);
void uart_write_command(volatile uint16_t *reg, uint16_t mask, uint16_t value);

// Private Function Definitions
uint16_t uart_read_command(volatile uint16_t *reg, uint16_t mask) {
  return *reg &= mask;
    84d8:	2080000b 	ldhu	r2,0(r4)
    84dc:	2884703a 	and	r2,r5,r2
    84e0:	2080000d 	sth	r2,0(r4)
}
    84e4:	f800283a 	ret

000084e8 <uart_write_command>:

void uart_write_command(volatile uint16_t *reg, uint16_t mask,
                        uint16_t value) {
  uint16_t write_val = *reg & ~mask;
    84e8:	2080000b 	ldhu	r2,0(r4)
  *reg = write_val | value;
    84ec:	014a303a 	nor	r5,zero,r5
    84f0:	2884703a 	and	r2,r5,r2
    84f4:	308cb03a 	or	r6,r6,r2
    84f8:	2180000d 	sth	r6,0(r4)
    84fc:	f800283a 	ret

00008500 <uart_read_byte>:
}

int uart_read_byte(uint8_t *data) {
  // printf("uart_read_byte - %x \n", *UART_STATUS_REG);
  // Poll until the previous bit has been shifted
  while (uart_read_command(UART_STATUS_REG, UART_RRDY_MASK) == 0);
    8500:	d0e06817 	ldw	r3,-32352(gp)
uint16_t uart_read_command(volatile uint16_t *reg, uint16_t mask);
void uart_write_command(volatile uint16_t *reg, uint16_t mask, uint16_t value);

// Private Function Definitions
uint16_t uart_read_command(volatile uint16_t *reg, uint16_t mask) {
  return *reg &= mask;
    8504:	1880000b 	ldhu	r2,0(r3)
    8508:	1080200c 	andi	r2,r2,128
    850c:	1880000d 	sth	r2,0(r3)
}

int uart_read_byte(uint8_t *data) {
  // printf("uart_read_byte - %x \n", *UART_STATUS_REG);
  // Poll until the previous bit has been shifted
  while (uart_read_command(UART_STATUS_REG, UART_RRDY_MASK) == 0);
    8510:	103ffc26 	beq	r2,zero,8504 <_gp+0xffff4cfc>

  // Read the data from the data register
  *data = uart_read_command(UART_RXDATA_REG, UART_RXDATA_MASK);
    8514:	d0e06517 	ldw	r3,-32364(gp)
uint16_t uart_read_command(volatile uint16_t *reg, uint16_t mask);
void uart_write_command(volatile uint16_t *reg, uint16_t mask, uint16_t value);

// Private Function Definitions
uint16_t uart_read_command(volatile uint16_t *reg, uint16_t mask) {
  return *reg &= mask;
    8518:	1880000b 	ldhu	r2,0(r3)
    851c:	11403fcc 	andi	r5,r2,255
    8520:	1940000d 	sth	r5,0(r3)
  // printf("uart_read_byte - %x \n", *UART_STATUS_REG);
  // Poll until the previous bit has been shifted
  while (uart_read_command(UART_STATUS_REG, UART_RRDY_MASK) == 0);

  // Read the data from the data register
  *data = uart_read_command(UART_RXDATA_REG, UART_RXDATA_MASK);
    8524:	20800005 	stb	r2,0(r4)

  if (uart_read_command(UART_STATUS_REG, UART_ROE_MASK) != 0) {
    8528:	d0e06817 	ldw	r3,-32352(gp)
uint16_t uart_read_command(volatile uint16_t *reg, uint16_t mask);
void uart_write_command(volatile uint16_t *reg, uint16_t mask, uint16_t value);

// Private Function Definitions
uint16_t uart_read_command(volatile uint16_t *reg, uint16_t mask) {
  return *reg &= mask;
    852c:	1880000b 	ldhu	r2,0(r3)
    8530:	1080020c 	andi	r2,r2,8
    8534:	1880000d 	sth	r2,0(r3)
  while (uart_read_command(UART_STATUS_REG, UART_RRDY_MASK) == 0);

  // Read the data from the data register
  *data = uart_read_command(UART_RXDATA_REG, UART_RXDATA_MASK);

  if (uart_read_command(UART_STATUS_REG, UART_ROE_MASK) != 0) {
    8538:	10000926 	beq	r2,zero,8560 <uart_read_byte+0x60>
    printf("uart_read_data - ROE\n");
    853c:	01000074 	movhi	r4,1
                        uint16_t value) {
  uint16_t write_val = *reg & ~mask;
  *reg = write_val | value;
}

int uart_read_byte(uint8_t *data) {
    8540:	deffff04 	addi	sp,sp,-4

  // Read the data from the data register
  *data = uart_read_command(UART_RXDATA_REG, UART_RXDATA_MASK);

  if (uart_read_command(UART_STATUS_REG, UART_ROE_MASK) != 0) {
    printf("uart_read_data - ROE\n");
    8544:	212d2e04 	addi	r4,r4,-19272
                        uint16_t value) {
  uint16_t write_val = *reg & ~mask;
  *reg = write_val | value;
}

int uart_read_byte(uint8_t *data) {
    8548:	dfc00015 	stw	ra,0(sp)

  // Read the data from the data register
  *data = uart_read_command(UART_RXDATA_REG, UART_RXDATA_MASK);

  if (uart_read_command(UART_STATUS_REG, UART_ROE_MASK) != 0) {
    printf("uart_read_data - ROE\n");
    854c:	0009ffc0 	call	9ffc <puts>
  }

  return 0;
}
    8550:	0005883a 	mov	r2,zero
    8554:	dfc00017 	ldw	ra,0(sp)
    8558:	dec00104 	addi	sp,sp,4
    855c:	f800283a 	ret
    8560:	0005883a 	mov	r2,zero
    8564:	f800283a 	ret

00008568 <uart_write_byte>:

void uart_write_byte(uint8_t value) {
  // printf("uart_write_byte - %c | %x\n", value, *UART_STATUS_REG);

  // Poll until the previous bit has been shifted
  while (uart_read_command(UART_STATUS_REG, UART_TRDY_MASK) == 0);
    8568:	d0e06817 	ldw	r3,-32352(gp)
uint16_t uart_read_command(volatile uint16_t *reg, uint16_t mask);
void uart_write_command(volatile uint16_t *reg, uint16_t mask, uint16_t value);

// Private Function Definitions
uint16_t uart_read_command(volatile uint16_t *reg, uint16_t mask) {
  return *reg &= mask;
    856c:	1880000b 	ldhu	r2,0(r3)
    8570:	1080100c 	andi	r2,r2,64
    8574:	1880000d 	sth	r2,0(r3)

void uart_write_byte(uint8_t value) {
  // printf("uart_write_byte - %c | %x\n", value, *UART_STATUS_REG);

  // Poll until the previous bit has been shifted
  while (uart_read_command(UART_STATUS_REG, UART_TRDY_MASK) == 0);
    8578:	103ffc26 	beq	r2,zero,856c <_gp+0xffff4d64>

  // Write the data to the data register
  uart_write_command(UART_TXDATA_REG, UART_TXDATA_MASK, value);
    857c:	d0e06717 	ldw	r3,-32356(gp)
}

void uart_write_command(volatile uint16_t *reg, uint16_t mask,
                        uint16_t value) {
  uint16_t write_val = *reg & ~mask;
  *reg = write_val | value;
    8580:	00bfc004 	movi	r2,-256
    8584:	21003fcc 	andi	r4,r4,255
  return *reg &= mask;
}

void uart_write_command(volatile uint16_t *reg, uint16_t mask,
                        uint16_t value) {
  uint16_t write_val = *reg & ~mask;
    8588:	1940000b 	ldhu	r5,0(r3)
  *reg = write_val | value;
    858c:	2884703a 	and	r2,r5,r2
    8590:	1108b03a 	or	r4,r2,r4
    8594:	1900000d 	sth	r4,0(r3)
    8598:	f800283a 	ret

0000859c <uart_write_data>:
  *UART_STATUS_REG = 0;

  uart_output();
}

void uart_write_data(char *str) {
    859c:	defffe04 	addi	sp,sp,-8
    85a0:	dc000015 	stw	r16,0(sp)
    85a4:	dfc00115 	stw	ra,4(sp)
    85a8:	2021883a 	mov	r16,r4
  while (*str != '\0') {
    85ac:	81000003 	ldbu	r4,0(r16)
    85b0:	20803fcc 	andi	r2,r4,255
    85b4:	1080201c 	xori	r2,r2,128
    85b8:	10bfe004 	addi	r2,r2,-128
    85bc:	10000426 	beq	r2,zero,85d0 <uart_write_data+0x34>
    uart_write_byte((uint16_t)*str);
    85c0:	21003fcc 	andi	r4,r4,255
    85c4:	00085680 	call	8568 <uart_write_byte>
    str++;
    85c8:	84000044 	addi	r16,r16,1
    85cc:	003ff706 	br	85ac <_gp+0xffff4da4>
  }
  uart_write_byte('\r');
    85d0:	01000344 	movi	r4,13
}
    85d4:	dfc00117 	ldw	ra,4(sp)
    85d8:	dc000017 	ldw	r16,0(sp)
    85dc:	dec00204 	addi	sp,sp,8
void uart_write_data(char *str) {
  while (*str != '\0') {
    uart_write_byte((uint16_t)*str);
    str++;
  }
  uart_write_byte('\r');
    85e0:	00085681 	jmpi	8568 <uart_write_byte>

000085e4 <uart_read_data>:
}

int uart_read_data(char *str, int len) {
    85e4:	defffb04 	addi	sp,sp,-20
    85e8:	dc800215 	stw	r18,8(sp)
    85ec:	dc400115 	stw	r17,4(sp)
    85f0:	dfc00415 	stw	ra,16(sp)
    85f4:	dcc00315 	stw	r19,12(sp)
    85f8:	dc000015 	stw	r16,0(sp)
    85fc:	2023883a 	mov	r17,r4
    8600:	2825883a 	mov	r18,r5
    8604:	2005883a 	mov	r2,r4
    8608:	2147883a 	add	r3,r4,r5
  unsigned int actualLen = 0;

  // Clear buffer
  for (unsigned int i = 0; i < len; i++) {
    860c:	18800326 	beq	r3,r2,861c <uart_read_data+0x38>
    str[i] = '\0';
    8610:	10000005 	stb	zero,0(r2)
    8614:	10800044 	addi	r2,r2,1
    8618:	003ffc06 	br	860c <_gp+0xffff4e04>
    861c:	0021883a 	mov	r16,zero
  }

  // Read from UART and store in buffer
  while (*str != '\n' && actualLen < len) {
    8620:	04c00284 	movi	r19,10
    8624:	88800007 	ldb	r2,0(r17)
    8628:	14c0091e 	bne	r2,r19,8650 <uart_read_data+0x6c>
    uart_read_byte((uint8_t*)str);
    str += *str != '\n';
    actualLen += *str != '\n';
  }

  *str = '\0';
    862c:	88000005 	stb	zero,0(r17)

  if (actualLen < len) {
    return actualLen;
    8630:	8005883a 	mov	r2,r16
    actualLen += *str != '\n';
  }

  *str = '\0';

  if (actualLen < len) {
    8634:	84801036 	bltu	r16,r18,8678 <uart_read_data+0x94>
    return actualLen;
  } else {
    printf("Buffer Overflow - %d\n", actualLen);
    8638:	01000074 	movhi	r4,1
    863c:	800b883a 	mov	r5,r16
    8640:	212d3404 	addi	r4,r4,-19248
    8644:	0009f0c0 	call	9f0c <printf>
    return -1;
    8648:	00bfffc4 	movi	r2,-1
    864c:	00000a06 	br	8678 <uart_read_data+0x94>
  for (unsigned int i = 0; i < len; i++) {
    str[i] = '\0';
  }

  // Read from UART and store in buffer
  while (*str != '\n' && actualLen < len) {
    8650:	84bff62e 	bgeu	r16,r18,862c <_gp+0xffff4e24>
    uart_read_byte((uint8_t*)str);
    8654:	8809883a 	mov	r4,r17
    8658:	00085000 	call	8500 <uart_read_byte>
    str += *str != '\n';
    865c:	88800007 	ldb	r2,0(r17)
    8660:	10800298 	cmpnei	r2,r2,10
    8664:	88a3883a 	add	r17,r17,r2
    actualLen += *str != '\n';
    8668:	88800007 	ldb	r2,0(r17)
    866c:	10800298 	cmpnei	r2,r2,10
    8670:	80a1883a 	add	r16,r16,r2
    8674:	003feb06 	br	8624 <_gp+0xffff4e1c>
    return actualLen;
  } else {
    printf("Buffer Overflow - %d\n", actualLen);
    return -1;
  }
}
    8678:	dfc00417 	ldw	ra,16(sp)
    867c:	dcc00317 	ldw	r19,12(sp)
    8680:	dc800217 	ldw	r18,8(sp)
    8684:	dc400117 	ldw	r17,4(sp)
    8688:	dc000017 	ldw	r16,0(sp)
    868c:	dec00504 	addi	sp,sp,20
    8690:	f800283a 	ret

00008694 <uart_wait_for_messages>:

char* uart_wait_for_messages(char **messages, unsigned int numMessages) {
    8694:	defef904 	addi	sp,sp,-1052
    8698:	dcc10315 	stw	r19,1036(sp)
    869c:	2027883a 	mov	r19,r4
  if (DEBUG) {
    printf("Waiting for messages: ");
    86a0:	01000074 	movhi	r4,1
    86a4:	212d3a04 	addi	r4,r4,-19224
    printf("Buffer Overflow - %d\n", actualLen);
    return -1;
  }
}

char* uart_wait_for_messages(char **messages, unsigned int numMessages) {
    86a8:	dd010415 	stw	r20,1040(sp)
    86ac:	dc410115 	stw	r17,1028(sp)
    86b0:	dc010015 	stw	r16,1024(sp)
    86b4:	dfc10615 	stw	ra,1048(sp)
    86b8:	dd410515 	stw	r21,1044(sp)
    86bc:	dc810215 	stw	r18,1032(sp)
    86c0:	2829883a 	mov	r20,r5
  if (DEBUG) {
    printf("Waiting for messages: ");
    for (unsigned int i = 0; i < numMessages; i++) {
    86c4:	9823883a 	mov	r17,r19
  }
}

char* uart_wait_for_messages(char **messages, unsigned int numMessages) {
  if (DEBUG) {
    printf("Waiting for messages: ");
    86c8:	0009f0c0 	call	9f0c <printf>
    for (unsigned int i = 0; i < numMessages; i++) {
    86cc:	0021883a 	mov	r16,zero
    86d0:	85000726 	beq	r16,r20,86f0 <uart_wait_for_messages+0x5c>
      printf("%s, ", messages[i]);
    86d4:	89400017 	ldw	r5,0(r17)
    86d8:	01000074 	movhi	r4,1
    86dc:	212d4004 	addi	r4,r4,-19200
    86e0:	0009f0c0 	call	9f0c <printf>
}

char* uart_wait_for_messages(char **messages, unsigned int numMessages) {
  if (DEBUG) {
    printf("Waiting for messages: ");
    for (unsigned int i = 0; i < numMessages; i++) {
    86e4:	84000044 	addi	r16,r16,1
    86e8:	8c400104 	addi	r17,r17,4
    86ec:	003ff806 	br	86d0 <_gp+0xffff4ec8>
      printf("%s, ", messages[i]);
    }
    printf("\n");
    86f0:	01000284 	movi	r4,10
    86f4:	0009f600 	call	9f60 <putchar>
  }
  char recvBuffer[UART_BUFFER_SIZE];
  char* yieldedMessage = NULL;
  do {
    uart_read_data(recvBuffer, UART_BUFFER_SIZE);
    86f8:	01410004 	movi	r5,1024
    86fc:	d809883a 	mov	r4,sp
    8700:	00085e40 	call	85e4 <uart_read_data>
    for (unsigned int i = 0; i < numMessages && !yieldedMessage; i++) {
    8704:	9825883a 	mov	r18,r19
    8708:	0023883a 	mov	r17,zero
    870c:	0021883a 	mov	r16,zero
    8710:	8d000a26 	beq	r17,r20,873c <uart_wait_for_messages+0xa8>
    8714:	80000a1e 	bne	r16,zero,8740 <uart_wait_for_messages+0xac>
      yieldedMessage = strcmp(recvBuffer, messages[i]) == 0 ? messages[i] : NULL;
    8718:	95400017 	ldw	r21,0(r18)
    871c:	d809883a 	mov	r4,sp
    8720:	a80b883a 	mov	r5,r21
    8724:	000a1600 	call	a160 <strcmp>
    8728:	1000011e 	bne	r2,zero,8730 <uart_wait_for_messages+0x9c>
    872c:	a821883a 	mov	r16,r21
  }
  char recvBuffer[UART_BUFFER_SIZE];
  char* yieldedMessage = NULL;
  do {
    uart_read_data(recvBuffer, UART_BUFFER_SIZE);
    for (unsigned int i = 0; i < numMessages && !yieldedMessage; i++) {
    8730:	8c400044 	addi	r17,r17,1
    8734:	94800104 	addi	r18,r18,4
    8738:	003ff506 	br	8710 <_gp+0xffff4f08>
      yieldedMessage = strcmp(recvBuffer, messages[i]) == 0 ? messages[i] : NULL;
    }
  } while (!yieldedMessage);
    873c:	803fee26 	beq	r16,zero,86f8 <_gp+0xffff4ef0>
  return yieldedMessage;
}
    8740:	8005883a 	mov	r2,r16
    8744:	dfc10617 	ldw	ra,1048(sp)
    8748:	dd410517 	ldw	r21,1044(sp)
    874c:	dd010417 	ldw	r20,1040(sp)
    8750:	dcc10317 	ldw	r19,1036(sp)
    8754:	dc810217 	ldw	r18,1032(sp)
    8758:	dc410117 	ldw	r17,1028(sp)
    875c:	dc010017 	ldw	r16,1024(sp)
    8760:	dec10704 	addi	sp,sp,1052
    8764:	f800283a 	ret

00008768 <uart_send_command>:

void uart_send_command(char *cmd, char **args, unsigned int numArgs) {
    8768:	defefc04 	addi	sp,sp,-1040
    876c:	dc410115 	stw	r17,1028(sp)
    8770:	dc010015 	stw	r16,1024(sp)
    8774:	2023883a 	mov	r17,r4
    8778:	2821883a 	mov	r16,r5
  char sendBuffer[UART_BUFFER_SIZE];
  if (DEBUG) {
    printf("Parsing Command: %s |", cmd);
    877c:	200b883a 	mov	r5,r4
    8780:	01000074 	movhi	r4,1
    8784:	212d4204 	addi	r4,r4,-19192
    }
  } while (!yieldedMessage);
  return yieldedMessage;
}

void uart_send_command(char *cmd, char **args, unsigned int numArgs) {
    8788:	dfc10315 	stw	ra,1036(sp)
    878c:	dc810215 	stw	r18,1032(sp)
    8790:	3025883a 	mov	r18,r6
  char sendBuffer[UART_BUFFER_SIZE];
  if (DEBUG) {
    printf("Parsing Command: %s |", cmd);
    8794:	0009f0c0 	call	9f0c <printf>
  }
  sprintf(sendBuffer, "%s", cmd);
    8798:	880b883a 	mov	r5,r17
    879c:	d809883a 	mov	r4,sp
    87a0:	000a1980 	call	a198 <strcpy>
  for (unsigned int i = 0; i < numArgs; i++) {
    87a4:	0023883a 	mov	r17,zero
    87a8:	8c800d26 	beq	r17,r18,87e0 <uart_send_command+0x78>
    if (DEBUG) {
      printf(" %s,", args[i]);
    87ac:	81400017 	ldw	r5,0(r16)
    87b0:	01000074 	movhi	r4,1
    87b4:	212d4804 	addi	r4,r4,-19168
    87b8:	0009f0c0 	call	9f0c <printf>
    }
    sprintf(sendBuffer, "%s%s ", sendBuffer, args[i]);
    87bc:	81c00017 	ldw	r7,0(r16)
    87c0:	01400074 	movhi	r5,1
    87c4:	d80d883a 	mov	r6,sp
    87c8:	296d4a04 	addi	r5,r5,-19160
    87cc:	d809883a 	mov	r4,sp
    87d0:	000a0e80 	call	a0e8 <sprintf>
  char sendBuffer[UART_BUFFER_SIZE];
  if (DEBUG) {
    printf("Parsing Command: %s |", cmd);
  }
  sprintf(sendBuffer, "%s", cmd);
  for (unsigned int i = 0; i < numArgs; i++) {
    87d4:	8c400044 	addi	r17,r17,1
    87d8:	84000104 	addi	r16,r16,4
    87dc:	003ff206 	br	87a8 <_gp+0xffff4fa0>
    }
    sprintf(sendBuffer, "%s%s ", sendBuffer, args[i]);
  }

  if (DEBUG) {
    printf("\nSending Command: %s\n", sendBuffer);
    87e0:	01000074 	movhi	r4,1
    87e4:	d80b883a 	mov	r5,sp
    87e8:	212d4c04 	addi	r4,r4,-19152
    87ec:	0009f0c0 	call	9f0c <printf>
  }
  uart_write_data(sendBuffer);
    87f0:	d809883a 	mov	r4,sp
    87f4:	000859c0 	call	859c <uart_write_data>
}
    87f8:	dfc10317 	ldw	ra,1036(sp)
    87fc:	dc810217 	ldw	r18,1032(sp)
    8800:	dc410117 	ldw	r17,1028(sp)
    8804:	dc010017 	ldw	r16,1024(sp)
    8808:	dec10404 	addi	sp,sp,1040
    880c:	f800283a 	ret

00008810 <uart_output>:

void uart_output(void) {
  if (DEBUG) {
    printf("----- UART REG ADDRS -----\n");
    8810:	01000074 	movhi	r4,1
    printf("\nSending Command: %s\n", sendBuffer);
  }
  uart_write_data(sendBuffer);
}

void uart_output(void) {
    8814:	defffd04 	addi	sp,sp,-12
  if (DEBUG) {
    printf("----- UART REG ADDRS -----\n");
    8818:	212d5204 	addi	r4,r4,-19128
    printf("\nSending Command: %s\n", sendBuffer);
  }
  uart_write_data(sendBuffer);
}

void uart_output(void) {
    881c:	dfc00215 	stw	ra,8(sp)
    8820:	dc000115 	stw	r16,4(sp)
  if (DEBUG) {
    printf("----- UART REG ADDRS -----\n");
    8824:	0009ffc0 	call	9ffc <puts>
    printf("%p | %p | %p | %p\n", UART_RXDATA_REG, UART_TXDATA_REG,
    8828:	d0a06617 	ldw	r2,-32360(gp)
    882c:	d1e06817 	ldw	r7,-32352(gp)
    8830:	d1a06717 	ldw	r6,-32356(gp)
    8834:	d1606517 	ldw	r5,-32364(gp)
    8838:	01000074 	movhi	r4,1
    883c:	d8800015 	stw	r2,0(sp)
    8840:	212d5904 	addi	r4,r4,-19100
    8844:	0009f0c0 	call	9f0c <printf>
          UART_STATUS_REG, UART_CONTROL_REG);

    printf("----- UART REGS -----\n");
    8848:	01000074 	movhi	r4,1
    884c:	212d5e04 	addi	r4,r4,-19080
    8850:	0009ffc0 	call	9ffc <puts>
    printf("%x | %x | %x | %x\n", *UART_RXDATA_REG, *UART_TXDATA_REG,
    8854:	d0a06517 	ldw	r2,-32364(gp)
    8858:	04000074 	movhi	r16,1
    885c:	842d6404 	addi	r16,r16,-19056
    8860:	1140000b 	ldhu	r5,0(r2)
    8864:	d0a06717 	ldw	r2,-32356(gp)
    8868:	8009883a 	mov	r4,r16
    886c:	297fffcc 	andi	r5,r5,65535
    8870:	1180000b 	ldhu	r6,0(r2)
          *UART_STATUS_REG, *UART_CONTROL_REG);
    8874:	d0a06817 	ldw	r2,-32352(gp)
    printf("----- UART REG ADDRS -----\n");
    printf("%p | %p | %p | %p\n", UART_RXDATA_REG, UART_TXDATA_REG,
          UART_STATUS_REG, UART_CONTROL_REG);

    printf("----- UART REGS -----\n");
    printf("%x | %x | %x | %x\n", *UART_RXDATA_REG, *UART_TXDATA_REG,
    8878:	31bfffcc 	andi	r6,r6,65535
          *UART_STATUS_REG, *UART_CONTROL_REG);
    887c:	11c0000b 	ldhu	r7,0(r2)
    8880:	d0a06617 	ldw	r2,-32360(gp)
    printf("----- UART REG ADDRS -----\n");
    printf("%p | %p | %p | %p\n", UART_RXDATA_REG, UART_TXDATA_REG,
          UART_STATUS_REG, UART_CONTROL_REG);

    printf("----- UART REGS -----\n");
    printf("%x | %x | %x | %x\n", *UART_RXDATA_REG, *UART_TXDATA_REG,
    8884:	39ffffcc 	andi	r7,r7,65535
          *UART_STATUS_REG, *UART_CONTROL_REG);
    8888:	1080000b 	ldhu	r2,0(r2)
    printf("----- UART REG ADDRS -----\n");
    printf("%p | %p | %p | %p\n", UART_RXDATA_REG, UART_TXDATA_REG,
          UART_STATUS_REG, UART_CONTROL_REG);

    printf("----- UART REGS -----\n");
    printf("%x | %x | %x | %x\n", *UART_RXDATA_REG, *UART_TXDATA_REG,
    888c:	10bfffcc 	andi	r2,r2,65535
    8890:	d8800015 	stw	r2,0(sp)
    8894:	0009f0c0 	call	9f0c <printf>
          *UART_STATUS_REG, *UART_CONTROL_REG);

    printf("----- UART REGS COMMANDS -----\n");
    8898:	01000074 	movhi	r4,1
    889c:	212d6904 	addi	r4,r4,-19036
    88a0:	0009ffc0 	call	9ffc <puts>
    printf("%x | %x | %x | %x\n", uart_read_command(UART_RXDATA_REG, UART_RXDATA_MASK),
    88a4:	d0a06517 	ldw	r2,-32364(gp)
          uart_read_command(UART_TXDATA_REG, UART_TXDATA_MASK),
          uart_read_command(UART_STATUS_REG, UART_STATUS_MASK),
          uart_read_command(UART_CONTROL_REG, UART_CONTROL_MASK));
    88a8:	d0e06617 	ldw	r3,-32360(gp)
    printf("----- UART REGS -----\n");
    printf("%x | %x | %x | %x\n", *UART_RXDATA_REG, *UART_TXDATA_REG,
          *UART_STATUS_REG, *UART_CONTROL_REG);

    printf("----- UART REGS COMMANDS -----\n");
    printf("%x | %x | %x | %x\n", uart_read_command(UART_RXDATA_REG, UART_RXDATA_MASK),
    88ac:	8009883a 	mov	r4,r16
uint16_t uart_read_command(volatile uint16_t *reg, uint16_t mask);
void uart_write_command(volatile uint16_t *reg, uint16_t mask, uint16_t value);

// Private Function Definitions
uint16_t uart_read_command(volatile uint16_t *reg, uint16_t mask) {
  return *reg &= mask;
    88b0:	1140000b 	ldhu	r5,0(r2)
    88b4:	29403fcc 	andi	r5,r5,255
    88b8:	1140000d 	sth	r5,0(r2)
    printf("%x | %x | %x | %x\n", *UART_RXDATA_REG, *UART_TXDATA_REG,
          *UART_STATUS_REG, *UART_CONTROL_REG);

    printf("----- UART REGS COMMANDS -----\n");
    printf("%x | %x | %x | %x\n", uart_read_command(UART_RXDATA_REG, UART_RXDATA_MASK),
          uart_read_command(UART_TXDATA_REG, UART_TXDATA_MASK),
    88bc:	d0a06717 	ldw	r2,-32356(gp)
uint16_t uart_read_command(volatile uint16_t *reg, uint16_t mask);
void uart_write_command(volatile uint16_t *reg, uint16_t mask, uint16_t value);

// Private Function Definitions
uint16_t uart_read_command(volatile uint16_t *reg, uint16_t mask) {
  return *reg &= mask;
    88c0:	1180000b 	ldhu	r6,0(r2)
    88c4:	31803fcc 	andi	r6,r6,255
    88c8:	1180000d 	sth	r6,0(r2)
          *UART_STATUS_REG, *UART_CONTROL_REG);

    printf("----- UART REGS COMMANDS -----\n");
    printf("%x | %x | %x | %x\n", uart_read_command(UART_RXDATA_REG, UART_RXDATA_MASK),
          uart_read_command(UART_TXDATA_REG, UART_TXDATA_MASK),
          uart_read_command(UART_STATUS_REG, UART_STATUS_MASK),
    88cc:	d0a06817 	ldw	r2,-32352(gp)
uint16_t uart_read_command(volatile uint16_t *reg, uint16_t mask);
void uart_write_command(volatile uint16_t *reg, uint16_t mask, uint16_t value);

// Private Function Definitions
uint16_t uart_read_command(volatile uint16_t *reg, uint16_t mask) {
  return *reg &= mask;
    88d0:	11c0000b 	ldhu	r7,0(r2)
    88d4:	11c0000d 	sth	r7,0(r2)
    88d8:	1880000b 	ldhu	r2,0(r3)
    printf("----- UART REGS -----\n");
    printf("%x | %x | %x | %x\n", *UART_RXDATA_REG, *UART_TXDATA_REG,
          *UART_STATUS_REG, *UART_CONTROL_REG);

    printf("----- UART REGS COMMANDS -----\n");
    printf("%x | %x | %x | %x\n", uart_read_command(UART_RXDATA_REG, UART_RXDATA_MASK),
    88dc:	39ffffcc 	andi	r7,r7,65535
uint16_t uart_read_command(volatile uint16_t *reg, uint16_t mask);
void uart_write_command(volatile uint16_t *reg, uint16_t mask, uint16_t value);

// Private Function Definitions
uint16_t uart_read_command(volatile uint16_t *reg, uint16_t mask) {
  return *reg &= mask;
    88e0:	1880000d 	sth	r2,0(r3)
    printf("----- UART REGS -----\n");
    printf("%x | %x | %x | %x\n", *UART_RXDATA_REG, *UART_TXDATA_REG,
          *UART_STATUS_REG, *UART_CONTROL_REG);

    printf("----- UART REGS COMMANDS -----\n");
    printf("%x | %x | %x | %x\n", uart_read_command(UART_RXDATA_REG, UART_RXDATA_MASK),
    88e4:	10bfffcc 	andi	r2,r2,65535
    88e8:	d8800015 	stw	r2,0(sp)
    88ec:	0009f0c0 	call	9f0c <printf>
          uart_read_command(UART_TXDATA_REG, UART_TXDATA_MASK),
          uart_read_command(UART_STATUS_REG, UART_STATUS_MASK),
          uart_read_command(UART_CONTROL_REG, UART_CONTROL_MASK));
  }
    88f0:	dfc00217 	ldw	ra,8(sp)
    88f4:	dc000117 	ldw	r16,4(sp)
    88f8:	dec00304 	addi	sp,sp,12
    88fc:	f800283a 	ret

00008900 <uart_init>:
}

// Global Function Definitions
void uart_init(void) {
  // Set the control register to enable the UART
  UART_RXDATA_REG  =  (uint16_t *)UART_0_BASE + UART_RXDATA_OFFSET;
    8900:	00800074 	movhi	r2,1
    8904:	10850004 	addi	r2,r2,5120
    8908:	d0a06515 	stw	r2,-32364(gp)
  UART_TXDATA_REG  =  (uint16_t *)UART_0_BASE + UART_TXDATA_OFFSET;
    890c:	00800074 	movhi	r2,1
    8910:	10850204 	addi	r2,r2,5128
    8914:	d0a06715 	stw	r2,-32356(gp)
  UART_STATUS_REG  =  (uint16_t *)UART_0_BASE + UART_STATUS_OFFSET;
  UART_CONTROL_REG =  (uint16_t *)UART_0_BASE + UART_CONTROL_OFFSET;
    8918:	00c00074 	movhi	r3,1
// Global Function Definitions
void uart_init(void) {
  // Set the control register to enable the UART
  UART_RXDATA_REG  =  (uint16_t *)UART_0_BASE + UART_RXDATA_OFFSET;
  UART_TXDATA_REG  =  (uint16_t *)UART_0_BASE + UART_TXDATA_OFFSET;
  UART_STATUS_REG  =  (uint16_t *)UART_0_BASE + UART_STATUS_OFFSET;
    891c:	00800074 	movhi	r2,1
    8920:	10850404 	addi	r2,r2,5136
  UART_CONTROL_REG =  (uint16_t *)UART_0_BASE + UART_CONTROL_OFFSET;
    8924:	18c50904 	addi	r3,r3,5156
// Global Function Definitions
void uart_init(void) {
  // Set the control register to enable the UART
  UART_RXDATA_REG  =  (uint16_t *)UART_0_BASE + UART_RXDATA_OFFSET;
  UART_TXDATA_REG  =  (uint16_t *)UART_0_BASE + UART_TXDATA_OFFSET;
  UART_STATUS_REG  =  (uint16_t *)UART_0_BASE + UART_STATUS_OFFSET;
    8928:	d0a06815 	stw	r2,-32352(gp)
  UART_CONTROL_REG =  (uint16_t *)UART_0_BASE + UART_CONTROL_OFFSET;
    892c:	d0e06615 	stw	r3,-32360(gp)

  // Clear status register
  *UART_STATUS_REG = 0;
    8930:	1000000d 	sth	zero,0(r2)

  uart_output();
    8934:	00088101 	jmpi	8810 <uart_output>

00008938 <__divsi3>:
    8938:	20001b16 	blt	r4,zero,89a8 <__divsi3+0x70>
    893c:	000f883a 	mov	r7,zero
    8940:	28001616 	blt	r5,zero,899c <__divsi3+0x64>
    8944:	200d883a 	mov	r6,r4
    8948:	29001a2e 	bgeu	r5,r4,89b4 <__divsi3+0x7c>
    894c:	00800804 	movi	r2,32
    8950:	00c00044 	movi	r3,1
    8954:	00000106 	br	895c <__divsi3+0x24>
    8958:	10000d26 	beq	r2,zero,8990 <__divsi3+0x58>
    895c:	294b883a 	add	r5,r5,r5
    8960:	10bfffc4 	addi	r2,r2,-1
    8964:	18c7883a 	add	r3,r3,r3
    8968:	293ffb36 	bltu	r5,r4,8958 <_gp+0xffff5150>
    896c:	0005883a 	mov	r2,zero
    8970:	18000726 	beq	r3,zero,8990 <__divsi3+0x58>
    8974:	0005883a 	mov	r2,zero
    8978:	31400236 	bltu	r6,r5,8984 <__divsi3+0x4c>
    897c:	314dc83a 	sub	r6,r6,r5
    8980:	10c4b03a 	or	r2,r2,r3
    8984:	1806d07a 	srli	r3,r3,1
    8988:	280ad07a 	srli	r5,r5,1
    898c:	183ffa1e 	bne	r3,zero,8978 <_gp+0xffff5170>
    8990:	38000126 	beq	r7,zero,8998 <__divsi3+0x60>
    8994:	0085c83a 	sub	r2,zero,r2
    8998:	f800283a 	ret
    899c:	014bc83a 	sub	r5,zero,r5
    89a0:	39c0005c 	xori	r7,r7,1
    89a4:	003fe706 	br	8944 <_gp+0xffff513c>
    89a8:	0109c83a 	sub	r4,zero,r4
    89ac:	01c00044 	movi	r7,1
    89b0:	003fe306 	br	8940 <_gp+0xffff5138>
    89b4:	00c00044 	movi	r3,1
    89b8:	003fee06 	br	8974 <_gp+0xffff516c>

000089bc <__modsi3>:
    89bc:	20001716 	blt	r4,zero,8a1c <__modsi3+0x60>
    89c0:	000f883a 	mov	r7,zero
    89c4:	2005883a 	mov	r2,r4
    89c8:	28001216 	blt	r5,zero,8a14 <__modsi3+0x58>
    89cc:	2900162e 	bgeu	r5,r4,8a28 <__modsi3+0x6c>
    89d0:	01800804 	movi	r6,32
    89d4:	00c00044 	movi	r3,1
    89d8:	00000106 	br	89e0 <__modsi3+0x24>
    89dc:	30000a26 	beq	r6,zero,8a08 <__modsi3+0x4c>
    89e0:	294b883a 	add	r5,r5,r5
    89e4:	31bfffc4 	addi	r6,r6,-1
    89e8:	18c7883a 	add	r3,r3,r3
    89ec:	293ffb36 	bltu	r5,r4,89dc <_gp+0xffff51d4>
    89f0:	18000526 	beq	r3,zero,8a08 <__modsi3+0x4c>
    89f4:	1806d07a 	srli	r3,r3,1
    89f8:	11400136 	bltu	r2,r5,8a00 <__modsi3+0x44>
    89fc:	1145c83a 	sub	r2,r2,r5
    8a00:	280ad07a 	srli	r5,r5,1
    8a04:	183ffb1e 	bne	r3,zero,89f4 <_gp+0xffff51ec>
    8a08:	38000126 	beq	r7,zero,8a10 <__modsi3+0x54>
    8a0c:	0085c83a 	sub	r2,zero,r2
    8a10:	f800283a 	ret
    8a14:	014bc83a 	sub	r5,zero,r5
    8a18:	003fec06 	br	89cc <_gp+0xffff51c4>
    8a1c:	0109c83a 	sub	r4,zero,r4
    8a20:	01c00044 	movi	r7,1
    8a24:	003fe706 	br	89c4 <_gp+0xffff51bc>
    8a28:	00c00044 	movi	r3,1
    8a2c:	003ff106 	br	89f4 <_gp+0xffff51ec>

00008a30 <__udivsi3>:
    8a30:	200d883a 	mov	r6,r4
    8a34:	2900152e 	bgeu	r5,r4,8a8c <__udivsi3+0x5c>
    8a38:	28001416 	blt	r5,zero,8a8c <__udivsi3+0x5c>
    8a3c:	00800804 	movi	r2,32
    8a40:	00c00044 	movi	r3,1
    8a44:	00000206 	br	8a50 <__udivsi3+0x20>
    8a48:	10000e26 	beq	r2,zero,8a84 <__udivsi3+0x54>
    8a4c:	28000516 	blt	r5,zero,8a64 <__udivsi3+0x34>
    8a50:	294b883a 	add	r5,r5,r5
    8a54:	10bfffc4 	addi	r2,r2,-1
    8a58:	18c7883a 	add	r3,r3,r3
    8a5c:	293ffa36 	bltu	r5,r4,8a48 <_gp+0xffff5240>
    8a60:	18000826 	beq	r3,zero,8a84 <__udivsi3+0x54>
    8a64:	0005883a 	mov	r2,zero
    8a68:	31400236 	bltu	r6,r5,8a74 <__udivsi3+0x44>
    8a6c:	314dc83a 	sub	r6,r6,r5
    8a70:	10c4b03a 	or	r2,r2,r3
    8a74:	1806d07a 	srli	r3,r3,1
    8a78:	280ad07a 	srli	r5,r5,1
    8a7c:	183ffa1e 	bne	r3,zero,8a68 <_gp+0xffff5260>
    8a80:	f800283a 	ret
    8a84:	0005883a 	mov	r2,zero
    8a88:	f800283a 	ret
    8a8c:	00c00044 	movi	r3,1
    8a90:	003ff406 	br	8a64 <_gp+0xffff525c>

00008a94 <__umodsi3>:
    8a94:	2005883a 	mov	r2,r4
    8a98:	2900122e 	bgeu	r5,r4,8ae4 <__umodsi3+0x50>
    8a9c:	28001116 	blt	r5,zero,8ae4 <__umodsi3+0x50>
    8aa0:	01800804 	movi	r6,32
    8aa4:	00c00044 	movi	r3,1
    8aa8:	00000206 	br	8ab4 <__umodsi3+0x20>
    8aac:	30000c26 	beq	r6,zero,8ae0 <__umodsi3+0x4c>
    8ab0:	28000516 	blt	r5,zero,8ac8 <__umodsi3+0x34>
    8ab4:	294b883a 	add	r5,r5,r5
    8ab8:	31bfffc4 	addi	r6,r6,-1
    8abc:	18c7883a 	add	r3,r3,r3
    8ac0:	293ffa36 	bltu	r5,r4,8aac <_gp+0xffff52a4>
    8ac4:	18000626 	beq	r3,zero,8ae0 <__umodsi3+0x4c>
    8ac8:	1806d07a 	srli	r3,r3,1
    8acc:	11400136 	bltu	r2,r5,8ad4 <__umodsi3+0x40>
    8ad0:	1145c83a 	sub	r2,r2,r5
    8ad4:	280ad07a 	srli	r5,r5,1
    8ad8:	183ffb1e 	bne	r3,zero,8ac8 <_gp+0xffff52c0>
    8adc:	f800283a 	ret
    8ae0:	f800283a 	ret
    8ae4:	00c00044 	movi	r3,1
    8ae8:	003ff706 	br	8ac8 <_gp+0xffff52c0>

00008aec <__adddf3>:
    8aec:	02c00434 	movhi	r11,16
    8af0:	5affffc4 	addi	r11,r11,-1
    8af4:	2806d7fa 	srli	r3,r5,31
    8af8:	2ad4703a 	and	r10,r5,r11
    8afc:	3ad2703a 	and	r9,r7,r11
    8b00:	3804d53a 	srli	r2,r7,20
    8b04:	3018d77a 	srli	r12,r6,29
    8b08:	280ad53a 	srli	r5,r5,20
    8b0c:	501490fa 	slli	r10,r10,3
    8b10:	2010d77a 	srli	r8,r4,29
    8b14:	481290fa 	slli	r9,r9,3
    8b18:	380ed7fa 	srli	r7,r7,31
    8b1c:	defffb04 	addi	sp,sp,-20
    8b20:	dc800215 	stw	r18,8(sp)
    8b24:	dc400115 	stw	r17,4(sp)
    8b28:	dc000015 	stw	r16,0(sp)
    8b2c:	dfc00415 	stw	ra,16(sp)
    8b30:	dcc00315 	stw	r19,12(sp)
    8b34:	1c803fcc 	andi	r18,r3,255
    8b38:	2c01ffcc 	andi	r16,r5,2047
    8b3c:	5210b03a 	or	r8,r10,r8
    8b40:	202290fa 	slli	r17,r4,3
    8b44:	1081ffcc 	andi	r2,r2,2047
    8b48:	4b12b03a 	or	r9,r9,r12
    8b4c:	300c90fa 	slli	r6,r6,3
    8b50:	91c07526 	beq	r18,r7,8d28 <__adddf3+0x23c>
    8b54:	8087c83a 	sub	r3,r16,r2
    8b58:	00c0ab0e 	bge	zero,r3,8e08 <__adddf3+0x31c>
    8b5c:	10002a1e 	bne	r2,zero,8c08 <__adddf3+0x11c>
    8b60:	4984b03a 	or	r2,r9,r6
    8b64:	1000961e 	bne	r2,zero,8dc0 <__adddf3+0x2d4>
    8b68:	888001cc 	andi	r2,r17,7
    8b6c:	10000726 	beq	r2,zero,8b8c <__adddf3+0xa0>
    8b70:	888003cc 	andi	r2,r17,15
    8b74:	00c00104 	movi	r3,4
    8b78:	10c00426 	beq	r2,r3,8b8c <__adddf3+0xa0>
    8b7c:	88c7883a 	add	r3,r17,r3
    8b80:	1c63803a 	cmpltu	r17,r3,r17
    8b84:	4451883a 	add	r8,r8,r17
    8b88:	1823883a 	mov	r17,r3
    8b8c:	4080202c 	andhi	r2,r8,128
    8b90:	10005926 	beq	r2,zero,8cf8 <__adddf3+0x20c>
    8b94:	84000044 	addi	r16,r16,1
    8b98:	0081ffc4 	movi	r2,2047
    8b9c:	8080ba26 	beq	r16,r2,8e88 <__adddf3+0x39c>
    8ba0:	00bfe034 	movhi	r2,65408
    8ba4:	10bfffc4 	addi	r2,r2,-1
    8ba8:	4090703a 	and	r8,r8,r2
    8bac:	4004977a 	slli	r2,r8,29
    8bb0:	4010927a 	slli	r8,r8,9
    8bb4:	8822d0fa 	srli	r17,r17,3
    8bb8:	8401ffcc 	andi	r16,r16,2047
    8bbc:	4010d33a 	srli	r8,r8,12
    8bc0:	9007883a 	mov	r3,r18
    8bc4:	1444b03a 	or	r2,r2,r17
    8bc8:	8401ffcc 	andi	r16,r16,2047
    8bcc:	8020953a 	slli	r16,r16,20
    8bd0:	18c03fcc 	andi	r3,r3,255
    8bd4:	01000434 	movhi	r4,16
    8bd8:	213fffc4 	addi	r4,r4,-1
    8bdc:	180697fa 	slli	r3,r3,31
    8be0:	4110703a 	and	r8,r8,r4
    8be4:	4410b03a 	or	r8,r8,r16
    8be8:	40c6b03a 	or	r3,r8,r3
    8bec:	dfc00417 	ldw	ra,16(sp)
    8bf0:	dcc00317 	ldw	r19,12(sp)
    8bf4:	dc800217 	ldw	r18,8(sp)
    8bf8:	dc400117 	ldw	r17,4(sp)
    8bfc:	dc000017 	ldw	r16,0(sp)
    8c00:	dec00504 	addi	sp,sp,20
    8c04:	f800283a 	ret
    8c08:	0081ffc4 	movi	r2,2047
    8c0c:	80bfd626 	beq	r16,r2,8b68 <_gp+0xffff5360>
    8c10:	4a402034 	orhi	r9,r9,128
    8c14:	00800e04 	movi	r2,56
    8c18:	10c09f16 	blt	r2,r3,8e98 <__adddf3+0x3ac>
    8c1c:	008007c4 	movi	r2,31
    8c20:	10c0c216 	blt	r2,r3,8f2c <__adddf3+0x440>
    8c24:	00800804 	movi	r2,32
    8c28:	10c5c83a 	sub	r2,r2,r3
    8c2c:	488a983a 	sll	r5,r9,r2
    8c30:	30c8d83a 	srl	r4,r6,r3
    8c34:	3084983a 	sll	r2,r6,r2
    8c38:	48c6d83a 	srl	r3,r9,r3
    8c3c:	290cb03a 	or	r6,r5,r4
    8c40:	1004c03a 	cmpne	r2,r2,zero
    8c44:	308cb03a 	or	r6,r6,r2
    8c48:	898dc83a 	sub	r6,r17,r6
    8c4c:	89a3803a 	cmpltu	r17,r17,r6
    8c50:	40d1c83a 	sub	r8,r8,r3
    8c54:	4451c83a 	sub	r8,r8,r17
    8c58:	3023883a 	mov	r17,r6
    8c5c:	4080202c 	andhi	r2,r8,128
    8c60:	10002326 	beq	r2,zero,8cf0 <__adddf3+0x204>
    8c64:	04c02034 	movhi	r19,128
    8c68:	9cffffc4 	addi	r19,r19,-1
    8c6c:	44e6703a 	and	r19,r8,r19
    8c70:	98007626 	beq	r19,zero,8e4c <__adddf3+0x360>
    8c74:	9809883a 	mov	r4,r19
    8c78:	0009e440 	call	9e44 <__clzsi2>
    8c7c:	10fffe04 	addi	r3,r2,-8
    8c80:	010007c4 	movi	r4,31
    8c84:	20c07716 	blt	r4,r3,8e64 <__adddf3+0x378>
    8c88:	00800804 	movi	r2,32
    8c8c:	10c5c83a 	sub	r2,r2,r3
    8c90:	8884d83a 	srl	r2,r17,r2
    8c94:	98d0983a 	sll	r8,r19,r3
    8c98:	88e2983a 	sll	r17,r17,r3
    8c9c:	1204b03a 	or	r2,r2,r8
    8ca0:	1c007416 	blt	r3,r16,8e74 <__adddf3+0x388>
    8ca4:	1c21c83a 	sub	r16,r3,r16
    8ca8:	82000044 	addi	r8,r16,1
    8cac:	00c007c4 	movi	r3,31
    8cb0:	1a009116 	blt	r3,r8,8ef8 <__adddf3+0x40c>
    8cb4:	00c00804 	movi	r3,32
    8cb8:	1a07c83a 	sub	r3,r3,r8
    8cbc:	8a08d83a 	srl	r4,r17,r8
    8cc0:	88e2983a 	sll	r17,r17,r3
    8cc4:	10c6983a 	sll	r3,r2,r3
    8cc8:	1210d83a 	srl	r8,r2,r8
    8ccc:	8804c03a 	cmpne	r2,r17,zero
    8cd0:	1906b03a 	or	r3,r3,r4
    8cd4:	18a2b03a 	or	r17,r3,r2
    8cd8:	0021883a 	mov	r16,zero
    8cdc:	003fa206 	br	8b68 <_gp+0xffff5360>
    8ce0:	1890b03a 	or	r8,r3,r2
    8ce4:	40017d26 	beq	r8,zero,92dc <__adddf3+0x7f0>
    8ce8:	1011883a 	mov	r8,r2
    8cec:	1823883a 	mov	r17,r3
    8cf0:	888001cc 	andi	r2,r17,7
    8cf4:	103f9e1e 	bne	r2,zero,8b70 <_gp+0xffff5368>
    8cf8:	4004977a 	slli	r2,r8,29
    8cfc:	8822d0fa 	srli	r17,r17,3
    8d00:	4010d0fa 	srli	r8,r8,3
    8d04:	9007883a 	mov	r3,r18
    8d08:	1444b03a 	or	r2,r2,r17
    8d0c:	0101ffc4 	movi	r4,2047
    8d10:	81002426 	beq	r16,r4,8da4 <__adddf3+0x2b8>
    8d14:	8120703a 	and	r16,r16,r4
    8d18:	01000434 	movhi	r4,16
    8d1c:	213fffc4 	addi	r4,r4,-1
    8d20:	4110703a 	and	r8,r8,r4
    8d24:	003fa806 	br	8bc8 <_gp+0xffff53c0>
    8d28:	8089c83a 	sub	r4,r16,r2
    8d2c:	01005e0e 	bge	zero,r4,8ea8 <__adddf3+0x3bc>
    8d30:	10002b26 	beq	r2,zero,8de0 <__adddf3+0x2f4>
    8d34:	0081ffc4 	movi	r2,2047
    8d38:	80bf8b26 	beq	r16,r2,8b68 <_gp+0xffff5360>
    8d3c:	4a402034 	orhi	r9,r9,128
    8d40:	00800e04 	movi	r2,56
    8d44:	1100a40e 	bge	r2,r4,8fd8 <__adddf3+0x4ec>
    8d48:	498cb03a 	or	r6,r9,r6
    8d4c:	300ac03a 	cmpne	r5,r6,zero
    8d50:	0013883a 	mov	r9,zero
    8d54:	2c4b883a 	add	r5,r5,r17
    8d58:	2c63803a 	cmpltu	r17,r5,r17
    8d5c:	4a11883a 	add	r8,r9,r8
    8d60:	8a11883a 	add	r8,r17,r8
    8d64:	2823883a 	mov	r17,r5
    8d68:	4080202c 	andhi	r2,r8,128
    8d6c:	103fe026 	beq	r2,zero,8cf0 <_gp+0xffff54e8>
    8d70:	84000044 	addi	r16,r16,1
    8d74:	0081ffc4 	movi	r2,2047
    8d78:	8080d226 	beq	r16,r2,90c4 <__adddf3+0x5d8>
    8d7c:	00bfe034 	movhi	r2,65408
    8d80:	10bfffc4 	addi	r2,r2,-1
    8d84:	4090703a 	and	r8,r8,r2
    8d88:	880ad07a 	srli	r5,r17,1
    8d8c:	400897fa 	slli	r4,r8,31
    8d90:	88c0004c 	andi	r3,r17,1
    8d94:	28e2b03a 	or	r17,r5,r3
    8d98:	4010d07a 	srli	r8,r8,1
    8d9c:	2462b03a 	or	r17,r4,r17
    8da0:	003f7106 	br	8b68 <_gp+0xffff5360>
    8da4:	4088b03a 	or	r4,r8,r2
    8da8:	20014526 	beq	r4,zero,92c0 <__adddf3+0x7d4>
    8dac:	01000434 	movhi	r4,16
    8db0:	42000234 	orhi	r8,r8,8
    8db4:	213fffc4 	addi	r4,r4,-1
    8db8:	4110703a 	and	r8,r8,r4
    8dbc:	003f8206 	br	8bc8 <_gp+0xffff53c0>
    8dc0:	18ffffc4 	addi	r3,r3,-1
    8dc4:	1800491e 	bne	r3,zero,8eec <__adddf3+0x400>
    8dc8:	898bc83a 	sub	r5,r17,r6
    8dcc:	8963803a 	cmpltu	r17,r17,r5
    8dd0:	4251c83a 	sub	r8,r8,r9
    8dd4:	4451c83a 	sub	r8,r8,r17
    8dd8:	2823883a 	mov	r17,r5
    8ddc:	003f9f06 	br	8c5c <_gp+0xffff5454>
    8de0:	4984b03a 	or	r2,r9,r6
    8de4:	103f6026 	beq	r2,zero,8b68 <_gp+0xffff5360>
    8de8:	213fffc4 	addi	r4,r4,-1
    8dec:	2000931e 	bne	r4,zero,903c <__adddf3+0x550>
    8df0:	898d883a 	add	r6,r17,r6
    8df4:	3463803a 	cmpltu	r17,r6,r17
    8df8:	4251883a 	add	r8,r8,r9
    8dfc:	8a11883a 	add	r8,r17,r8
    8e00:	3023883a 	mov	r17,r6
    8e04:	003fd806 	br	8d68 <_gp+0xffff5560>
    8e08:	1800541e 	bne	r3,zero,8f5c <__adddf3+0x470>
    8e0c:	80800044 	addi	r2,r16,1
    8e10:	1081ffcc 	andi	r2,r2,2047
    8e14:	00c00044 	movi	r3,1
    8e18:	1880a00e 	bge	r3,r2,909c <__adddf3+0x5b0>
    8e1c:	8989c83a 	sub	r4,r17,r6
    8e20:	8905803a 	cmpltu	r2,r17,r4
    8e24:	4267c83a 	sub	r19,r8,r9
    8e28:	98a7c83a 	sub	r19,r19,r2
    8e2c:	9880202c 	andhi	r2,r19,128
    8e30:	10006326 	beq	r2,zero,8fc0 <__adddf3+0x4d4>
    8e34:	3463c83a 	sub	r17,r6,r17
    8e38:	4a07c83a 	sub	r3,r9,r8
    8e3c:	344d803a 	cmpltu	r6,r6,r17
    8e40:	19a7c83a 	sub	r19,r3,r6
    8e44:	3825883a 	mov	r18,r7
    8e48:	983f8a1e 	bne	r19,zero,8c74 <_gp+0xffff546c>
    8e4c:	8809883a 	mov	r4,r17
    8e50:	0009e440 	call	9e44 <__clzsi2>
    8e54:	10800804 	addi	r2,r2,32
    8e58:	10fffe04 	addi	r3,r2,-8
    8e5c:	010007c4 	movi	r4,31
    8e60:	20ff890e 	bge	r4,r3,8c88 <_gp+0xffff5480>
    8e64:	10bff604 	addi	r2,r2,-40
    8e68:	8884983a 	sll	r2,r17,r2
    8e6c:	0023883a 	mov	r17,zero
    8e70:	1c3f8c0e 	bge	r3,r16,8ca4 <_gp+0xffff549c>
    8e74:	023fe034 	movhi	r8,65408
    8e78:	423fffc4 	addi	r8,r8,-1
    8e7c:	80e1c83a 	sub	r16,r16,r3
    8e80:	1210703a 	and	r8,r2,r8
    8e84:	003f3806 	br	8b68 <_gp+0xffff5360>
    8e88:	9007883a 	mov	r3,r18
    8e8c:	0011883a 	mov	r8,zero
    8e90:	0005883a 	mov	r2,zero
    8e94:	003f4c06 	br	8bc8 <_gp+0xffff53c0>
    8e98:	498cb03a 	or	r6,r9,r6
    8e9c:	300cc03a 	cmpne	r6,r6,zero
    8ea0:	0007883a 	mov	r3,zero
    8ea4:	003f6806 	br	8c48 <_gp+0xffff5440>
    8ea8:	20009c1e 	bne	r4,zero,911c <__adddf3+0x630>
    8eac:	80800044 	addi	r2,r16,1
    8eb0:	1141ffcc 	andi	r5,r2,2047
    8eb4:	01000044 	movi	r4,1
    8eb8:	2140670e 	bge	r4,r5,9058 <__adddf3+0x56c>
    8ebc:	0101ffc4 	movi	r4,2047
    8ec0:	11007f26 	beq	r2,r4,90c0 <__adddf3+0x5d4>
    8ec4:	898d883a 	add	r6,r17,r6
    8ec8:	4247883a 	add	r3,r8,r9
    8ecc:	3451803a 	cmpltu	r8,r6,r17
    8ed0:	40d1883a 	add	r8,r8,r3
    8ed4:	402297fa 	slli	r17,r8,31
    8ed8:	300cd07a 	srli	r6,r6,1
    8edc:	4010d07a 	srli	r8,r8,1
    8ee0:	1021883a 	mov	r16,r2
    8ee4:	89a2b03a 	or	r17,r17,r6
    8ee8:	003f1f06 	br	8b68 <_gp+0xffff5360>
    8eec:	0081ffc4 	movi	r2,2047
    8ef0:	80bf481e 	bne	r16,r2,8c14 <_gp+0xffff540c>
    8ef4:	003f1c06 	br	8b68 <_gp+0xffff5360>
    8ef8:	843ff844 	addi	r16,r16,-31
    8efc:	01000804 	movi	r4,32
    8f00:	1406d83a 	srl	r3,r2,r16
    8f04:	41005026 	beq	r8,r4,9048 <__adddf3+0x55c>
    8f08:	01001004 	movi	r4,64
    8f0c:	2211c83a 	sub	r8,r4,r8
    8f10:	1204983a 	sll	r2,r2,r8
    8f14:	88a2b03a 	or	r17,r17,r2
    8f18:	8822c03a 	cmpne	r17,r17,zero
    8f1c:	1c62b03a 	or	r17,r3,r17
    8f20:	0011883a 	mov	r8,zero
    8f24:	0021883a 	mov	r16,zero
    8f28:	003f7106 	br	8cf0 <_gp+0xffff54e8>
    8f2c:	193ff804 	addi	r4,r3,-32
    8f30:	00800804 	movi	r2,32
    8f34:	4908d83a 	srl	r4,r9,r4
    8f38:	18804526 	beq	r3,r2,9050 <__adddf3+0x564>
    8f3c:	00801004 	movi	r2,64
    8f40:	10c5c83a 	sub	r2,r2,r3
    8f44:	4886983a 	sll	r3,r9,r2
    8f48:	198cb03a 	or	r6,r3,r6
    8f4c:	300cc03a 	cmpne	r6,r6,zero
    8f50:	218cb03a 	or	r6,r4,r6
    8f54:	0007883a 	mov	r3,zero
    8f58:	003f3b06 	br	8c48 <_gp+0xffff5440>
    8f5c:	80002a26 	beq	r16,zero,9008 <__adddf3+0x51c>
    8f60:	0101ffc4 	movi	r4,2047
    8f64:	11006826 	beq	r2,r4,9108 <__adddf3+0x61c>
    8f68:	00c7c83a 	sub	r3,zero,r3
    8f6c:	42002034 	orhi	r8,r8,128
    8f70:	01000e04 	movi	r4,56
    8f74:	20c07c16 	blt	r4,r3,9168 <__adddf3+0x67c>
    8f78:	010007c4 	movi	r4,31
    8f7c:	20c0da16 	blt	r4,r3,92e8 <__adddf3+0x7fc>
    8f80:	01000804 	movi	r4,32
    8f84:	20c9c83a 	sub	r4,r4,r3
    8f88:	4114983a 	sll	r10,r8,r4
    8f8c:	88cad83a 	srl	r5,r17,r3
    8f90:	8908983a 	sll	r4,r17,r4
    8f94:	40c6d83a 	srl	r3,r8,r3
    8f98:	5162b03a 	or	r17,r10,r5
    8f9c:	2008c03a 	cmpne	r4,r4,zero
    8fa0:	8922b03a 	or	r17,r17,r4
    8fa4:	3463c83a 	sub	r17,r6,r17
    8fa8:	48c7c83a 	sub	r3,r9,r3
    8fac:	344d803a 	cmpltu	r6,r6,r17
    8fb0:	1991c83a 	sub	r8,r3,r6
    8fb4:	1021883a 	mov	r16,r2
    8fb8:	3825883a 	mov	r18,r7
    8fbc:	003f2706 	br	8c5c <_gp+0xffff5454>
    8fc0:	24d0b03a 	or	r8,r4,r19
    8fc4:	40001b1e 	bne	r8,zero,9034 <__adddf3+0x548>
    8fc8:	0005883a 	mov	r2,zero
    8fcc:	0007883a 	mov	r3,zero
    8fd0:	0021883a 	mov	r16,zero
    8fd4:	003f4d06 	br	8d0c <_gp+0xffff5504>
    8fd8:	008007c4 	movi	r2,31
    8fdc:	11003c16 	blt	r2,r4,90d0 <__adddf3+0x5e4>
    8fe0:	00800804 	movi	r2,32
    8fe4:	1105c83a 	sub	r2,r2,r4
    8fe8:	488e983a 	sll	r7,r9,r2
    8fec:	310ad83a 	srl	r5,r6,r4
    8ff0:	3084983a 	sll	r2,r6,r2
    8ff4:	4912d83a 	srl	r9,r9,r4
    8ff8:	394ab03a 	or	r5,r7,r5
    8ffc:	1004c03a 	cmpne	r2,r2,zero
    9000:	288ab03a 	or	r5,r5,r2
    9004:	003f5306 	br	8d54 <_gp+0xffff554c>
    9008:	4448b03a 	or	r4,r8,r17
    900c:	20003e26 	beq	r4,zero,9108 <__adddf3+0x61c>
    9010:	00c6303a 	nor	r3,zero,r3
    9014:	18003a1e 	bne	r3,zero,9100 <__adddf3+0x614>
    9018:	3463c83a 	sub	r17,r6,r17
    901c:	4a07c83a 	sub	r3,r9,r8
    9020:	344d803a 	cmpltu	r6,r6,r17
    9024:	1991c83a 	sub	r8,r3,r6
    9028:	1021883a 	mov	r16,r2
    902c:	3825883a 	mov	r18,r7
    9030:	003f0a06 	br	8c5c <_gp+0xffff5454>
    9034:	2023883a 	mov	r17,r4
    9038:	003f0d06 	br	8c70 <_gp+0xffff5468>
    903c:	0081ffc4 	movi	r2,2047
    9040:	80bf3f1e 	bne	r16,r2,8d40 <_gp+0xffff5538>
    9044:	003ec806 	br	8b68 <_gp+0xffff5360>
    9048:	0005883a 	mov	r2,zero
    904c:	003fb106 	br	8f14 <_gp+0xffff570c>
    9050:	0007883a 	mov	r3,zero
    9054:	003fbc06 	br	8f48 <_gp+0xffff5740>
    9058:	4444b03a 	or	r2,r8,r17
    905c:	8000871e 	bne	r16,zero,927c <__adddf3+0x790>
    9060:	1000ba26 	beq	r2,zero,934c <__adddf3+0x860>
    9064:	4984b03a 	or	r2,r9,r6
    9068:	103ebf26 	beq	r2,zero,8b68 <_gp+0xffff5360>
    906c:	8985883a 	add	r2,r17,r6
    9070:	4247883a 	add	r3,r8,r9
    9074:	1451803a 	cmpltu	r8,r2,r17
    9078:	40d1883a 	add	r8,r8,r3
    907c:	40c0202c 	andhi	r3,r8,128
    9080:	1023883a 	mov	r17,r2
    9084:	183f1a26 	beq	r3,zero,8cf0 <_gp+0xffff54e8>
    9088:	00bfe034 	movhi	r2,65408
    908c:	10bfffc4 	addi	r2,r2,-1
    9090:	2021883a 	mov	r16,r4
    9094:	4090703a 	and	r8,r8,r2
    9098:	003eb306 	br	8b68 <_gp+0xffff5360>
    909c:	4444b03a 	or	r2,r8,r17
    90a0:	8000291e 	bne	r16,zero,9148 <__adddf3+0x65c>
    90a4:	10004b1e 	bne	r2,zero,91d4 <__adddf3+0x6e8>
    90a8:	4990b03a 	or	r8,r9,r6
    90ac:	40008b26 	beq	r8,zero,92dc <__adddf3+0x7f0>
    90b0:	4811883a 	mov	r8,r9
    90b4:	3023883a 	mov	r17,r6
    90b8:	3825883a 	mov	r18,r7
    90bc:	003eaa06 	br	8b68 <_gp+0xffff5360>
    90c0:	1021883a 	mov	r16,r2
    90c4:	0011883a 	mov	r8,zero
    90c8:	0005883a 	mov	r2,zero
    90cc:	003f0f06 	br	8d0c <_gp+0xffff5504>
    90d0:	217ff804 	addi	r5,r4,-32
    90d4:	00800804 	movi	r2,32
    90d8:	494ad83a 	srl	r5,r9,r5
    90dc:	20807d26 	beq	r4,r2,92d4 <__adddf3+0x7e8>
    90e0:	00801004 	movi	r2,64
    90e4:	1109c83a 	sub	r4,r2,r4
    90e8:	4912983a 	sll	r9,r9,r4
    90ec:	498cb03a 	or	r6,r9,r6
    90f0:	300cc03a 	cmpne	r6,r6,zero
    90f4:	298ab03a 	or	r5,r5,r6
    90f8:	0013883a 	mov	r9,zero
    90fc:	003f1506 	br	8d54 <_gp+0xffff554c>
    9100:	0101ffc4 	movi	r4,2047
    9104:	113f9a1e 	bne	r2,r4,8f70 <_gp+0xffff5768>
    9108:	4811883a 	mov	r8,r9
    910c:	3023883a 	mov	r17,r6
    9110:	1021883a 	mov	r16,r2
    9114:	3825883a 	mov	r18,r7
    9118:	003e9306 	br	8b68 <_gp+0xffff5360>
    911c:	8000161e 	bne	r16,zero,9178 <__adddf3+0x68c>
    9120:	444ab03a 	or	r5,r8,r17
    9124:	28005126 	beq	r5,zero,926c <__adddf3+0x780>
    9128:	0108303a 	nor	r4,zero,r4
    912c:	20004d1e 	bne	r4,zero,9264 <__adddf3+0x778>
    9130:	89a3883a 	add	r17,r17,r6
    9134:	4253883a 	add	r9,r8,r9
    9138:	898d803a 	cmpltu	r6,r17,r6
    913c:	3251883a 	add	r8,r6,r9
    9140:	1021883a 	mov	r16,r2
    9144:	003f0806 	br	8d68 <_gp+0xffff5560>
    9148:	1000301e 	bne	r2,zero,920c <__adddf3+0x720>
    914c:	4984b03a 	or	r2,r9,r6
    9150:	10007126 	beq	r2,zero,9318 <__adddf3+0x82c>
    9154:	4811883a 	mov	r8,r9
    9158:	3023883a 	mov	r17,r6
    915c:	3825883a 	mov	r18,r7
    9160:	0401ffc4 	movi	r16,2047
    9164:	003e8006 	br	8b68 <_gp+0xffff5360>
    9168:	4462b03a 	or	r17,r8,r17
    916c:	8822c03a 	cmpne	r17,r17,zero
    9170:	0007883a 	mov	r3,zero
    9174:	003f8b06 	br	8fa4 <_gp+0xffff579c>
    9178:	0141ffc4 	movi	r5,2047
    917c:	11403b26 	beq	r2,r5,926c <__adddf3+0x780>
    9180:	0109c83a 	sub	r4,zero,r4
    9184:	42002034 	orhi	r8,r8,128
    9188:	01400e04 	movi	r5,56
    918c:	29006716 	blt	r5,r4,932c <__adddf3+0x840>
    9190:	014007c4 	movi	r5,31
    9194:	29007016 	blt	r5,r4,9358 <__adddf3+0x86c>
    9198:	01400804 	movi	r5,32
    919c:	290bc83a 	sub	r5,r5,r4
    91a0:	4154983a 	sll	r10,r8,r5
    91a4:	890ed83a 	srl	r7,r17,r4
    91a8:	894a983a 	sll	r5,r17,r5
    91ac:	4108d83a 	srl	r4,r8,r4
    91b0:	51e2b03a 	or	r17,r10,r7
    91b4:	280ac03a 	cmpne	r5,r5,zero
    91b8:	8962b03a 	or	r17,r17,r5
    91bc:	89a3883a 	add	r17,r17,r6
    91c0:	2253883a 	add	r9,r4,r9
    91c4:	898d803a 	cmpltu	r6,r17,r6
    91c8:	3251883a 	add	r8,r6,r9
    91cc:	1021883a 	mov	r16,r2
    91d0:	003ee506 	br	8d68 <_gp+0xffff5560>
    91d4:	4984b03a 	or	r2,r9,r6
    91d8:	103e6326 	beq	r2,zero,8b68 <_gp+0xffff5360>
    91dc:	8987c83a 	sub	r3,r17,r6
    91e0:	88c9803a 	cmpltu	r4,r17,r3
    91e4:	4245c83a 	sub	r2,r8,r9
    91e8:	1105c83a 	sub	r2,r2,r4
    91ec:	1100202c 	andhi	r4,r2,128
    91f0:	203ebb26 	beq	r4,zero,8ce0 <_gp+0xffff54d8>
    91f4:	3463c83a 	sub	r17,r6,r17
    91f8:	4a07c83a 	sub	r3,r9,r8
    91fc:	344d803a 	cmpltu	r6,r6,r17
    9200:	1991c83a 	sub	r8,r3,r6
    9204:	3825883a 	mov	r18,r7
    9208:	003e5706 	br	8b68 <_gp+0xffff5360>
    920c:	4984b03a 	or	r2,r9,r6
    9210:	10002e26 	beq	r2,zero,92cc <__adddf3+0x7e0>
    9214:	4004d0fa 	srli	r2,r8,3
    9218:	8822d0fa 	srli	r17,r17,3
    921c:	4010977a 	slli	r8,r8,29
    9220:	10c0022c 	andhi	r3,r2,8
    9224:	4462b03a 	or	r17,r8,r17
    9228:	18000826 	beq	r3,zero,924c <__adddf3+0x760>
    922c:	4808d0fa 	srli	r4,r9,3
    9230:	20c0022c 	andhi	r3,r4,8
    9234:	1800051e 	bne	r3,zero,924c <__adddf3+0x760>
    9238:	300cd0fa 	srli	r6,r6,3
    923c:	4806977a 	slli	r3,r9,29
    9240:	2005883a 	mov	r2,r4
    9244:	3825883a 	mov	r18,r7
    9248:	19a2b03a 	or	r17,r3,r6
    924c:	8810d77a 	srli	r8,r17,29
    9250:	100490fa 	slli	r2,r2,3
    9254:	882290fa 	slli	r17,r17,3
    9258:	0401ffc4 	movi	r16,2047
    925c:	4090b03a 	or	r8,r8,r2
    9260:	003e4106 	br	8b68 <_gp+0xffff5360>
    9264:	0141ffc4 	movi	r5,2047
    9268:	117fc71e 	bne	r2,r5,9188 <_gp+0xffff5980>
    926c:	4811883a 	mov	r8,r9
    9270:	3023883a 	mov	r17,r6
    9274:	1021883a 	mov	r16,r2
    9278:	003e3b06 	br	8b68 <_gp+0xffff5360>
    927c:	10002f26 	beq	r2,zero,933c <__adddf3+0x850>
    9280:	4984b03a 	or	r2,r9,r6
    9284:	10001126 	beq	r2,zero,92cc <__adddf3+0x7e0>
    9288:	4004d0fa 	srli	r2,r8,3
    928c:	8822d0fa 	srli	r17,r17,3
    9290:	4010977a 	slli	r8,r8,29
    9294:	10c0022c 	andhi	r3,r2,8
    9298:	4462b03a 	or	r17,r8,r17
    929c:	183feb26 	beq	r3,zero,924c <_gp+0xffff5a44>
    92a0:	4808d0fa 	srli	r4,r9,3
    92a4:	20c0022c 	andhi	r3,r4,8
    92a8:	183fe81e 	bne	r3,zero,924c <_gp+0xffff5a44>
    92ac:	300cd0fa 	srli	r6,r6,3
    92b0:	4806977a 	slli	r3,r9,29
    92b4:	2005883a 	mov	r2,r4
    92b8:	19a2b03a 	or	r17,r3,r6
    92bc:	003fe306 	br	924c <_gp+0xffff5a44>
    92c0:	0011883a 	mov	r8,zero
    92c4:	0005883a 	mov	r2,zero
    92c8:	003e3f06 	br	8bc8 <_gp+0xffff53c0>
    92cc:	0401ffc4 	movi	r16,2047
    92d0:	003e2506 	br	8b68 <_gp+0xffff5360>
    92d4:	0013883a 	mov	r9,zero
    92d8:	003f8406 	br	90ec <_gp+0xffff58e4>
    92dc:	0005883a 	mov	r2,zero
    92e0:	0007883a 	mov	r3,zero
    92e4:	003e8906 	br	8d0c <_gp+0xffff5504>
    92e8:	197ff804 	addi	r5,r3,-32
    92ec:	01000804 	movi	r4,32
    92f0:	414ad83a 	srl	r5,r8,r5
    92f4:	19002426 	beq	r3,r4,9388 <__adddf3+0x89c>
    92f8:	01001004 	movi	r4,64
    92fc:	20c7c83a 	sub	r3,r4,r3
    9300:	40c6983a 	sll	r3,r8,r3
    9304:	1c46b03a 	or	r3,r3,r17
    9308:	1806c03a 	cmpne	r3,r3,zero
    930c:	28e2b03a 	or	r17,r5,r3
    9310:	0007883a 	mov	r3,zero
    9314:	003f2306 	br	8fa4 <_gp+0xffff579c>
    9318:	0007883a 	mov	r3,zero
    931c:	5811883a 	mov	r8,r11
    9320:	00bfffc4 	movi	r2,-1
    9324:	0401ffc4 	movi	r16,2047
    9328:	003e7806 	br	8d0c <_gp+0xffff5504>
    932c:	4462b03a 	or	r17,r8,r17
    9330:	8822c03a 	cmpne	r17,r17,zero
    9334:	0009883a 	mov	r4,zero
    9338:	003fa006 	br	91bc <_gp+0xffff59b4>
    933c:	4811883a 	mov	r8,r9
    9340:	3023883a 	mov	r17,r6
    9344:	0401ffc4 	movi	r16,2047
    9348:	003e0706 	br	8b68 <_gp+0xffff5360>
    934c:	4811883a 	mov	r8,r9
    9350:	3023883a 	mov	r17,r6
    9354:	003e0406 	br	8b68 <_gp+0xffff5360>
    9358:	21fff804 	addi	r7,r4,-32
    935c:	01400804 	movi	r5,32
    9360:	41ced83a 	srl	r7,r8,r7
    9364:	21400a26 	beq	r4,r5,9390 <__adddf3+0x8a4>
    9368:	01401004 	movi	r5,64
    936c:	2909c83a 	sub	r4,r5,r4
    9370:	4108983a 	sll	r4,r8,r4
    9374:	2448b03a 	or	r4,r4,r17
    9378:	2008c03a 	cmpne	r4,r4,zero
    937c:	3922b03a 	or	r17,r7,r4
    9380:	0009883a 	mov	r4,zero
    9384:	003f8d06 	br	91bc <_gp+0xffff59b4>
    9388:	0007883a 	mov	r3,zero
    938c:	003fdd06 	br	9304 <_gp+0xffff5afc>
    9390:	0009883a 	mov	r4,zero
    9394:	003ff706 	br	9374 <_gp+0xffff5b6c>

00009398 <__divdf3>:
    9398:	defff004 	addi	sp,sp,-64
    939c:	dc800815 	stw	r18,32(sp)
    93a0:	2824d53a 	srli	r18,r5,20
    93a4:	dd800c15 	stw	r22,48(sp)
    93a8:	282cd7fa 	srli	r22,r5,31
    93ac:	dc000615 	stw	r16,24(sp)
    93b0:	04000434 	movhi	r16,16
    93b4:	843fffc4 	addi	r16,r16,-1
    93b8:	dfc00f15 	stw	ra,60(sp)
    93bc:	df000e15 	stw	fp,56(sp)
    93c0:	ddc00d15 	stw	r23,52(sp)
    93c4:	dd400b15 	stw	r21,44(sp)
    93c8:	dd000a15 	stw	r20,40(sp)
    93cc:	dcc00915 	stw	r19,36(sp)
    93d0:	dc400715 	stw	r17,28(sp)
    93d4:	9481ffcc 	andi	r18,r18,2047
    93d8:	2c20703a 	and	r16,r5,r16
    93dc:	b2003fcc 	andi	r8,r22,255
    93e0:	90006126 	beq	r18,zero,9568 <__divdf3+0x1d0>
    93e4:	0081ffc4 	movi	r2,2047
    93e8:	202b883a 	mov	r21,r4
    93ec:	90803726 	beq	r18,r2,94cc <__divdf3+0x134>
    93f0:	80800434 	orhi	r2,r16,16
    93f4:	100490fa 	slli	r2,r2,3
    93f8:	2020d77a 	srli	r16,r4,29
    93fc:	202a90fa 	slli	r21,r4,3
    9400:	94bf0044 	addi	r18,r18,-1023
    9404:	80a0b03a 	or	r16,r16,r2
    9408:	0013883a 	mov	r9,zero
    940c:	000b883a 	mov	r5,zero
    9410:	3806d53a 	srli	r3,r7,20
    9414:	382ed7fa 	srli	r23,r7,31
    9418:	04400434 	movhi	r17,16
    941c:	8c7fffc4 	addi	r17,r17,-1
    9420:	18c1ffcc 	andi	r3,r3,2047
    9424:	3029883a 	mov	r20,r6
    9428:	3c62703a 	and	r17,r7,r17
    942c:	bf003fcc 	andi	fp,r23,255
    9430:	18006e26 	beq	r3,zero,95ec <__divdf3+0x254>
    9434:	0081ffc4 	movi	r2,2047
    9438:	18806626 	beq	r3,r2,95d4 <__divdf3+0x23c>
    943c:	88800434 	orhi	r2,r17,16
    9440:	100490fa 	slli	r2,r2,3
    9444:	3022d77a 	srli	r17,r6,29
    9448:	302890fa 	slli	r20,r6,3
    944c:	18ff0044 	addi	r3,r3,-1023
    9450:	88a2b03a 	or	r17,r17,r2
    9454:	000f883a 	mov	r7,zero
    9458:	b5e6f03a 	xor	r19,r22,r23
    945c:	3a4cb03a 	or	r6,r7,r9
    9460:	008003c4 	movi	r2,15
    9464:	9809883a 	mov	r4,r19
    9468:	90c7c83a 	sub	r3,r18,r3
    946c:	9cc03fcc 	andi	r19,r19,255
    9470:	11809636 	bltu	r2,r6,96cc <__divdf3+0x334>
    9474:	300c90ba 	slli	r6,r6,2
    9478:	00800074 	movhi	r2,1
    947c:	10a52304 	addi	r2,r2,-27508
    9480:	308d883a 	add	r6,r6,r2
    9484:	30800017 	ldw	r2,0(r6)
    9488:	1000683a 	jmp	r2
    948c:	000096cc 	andi	zero,zero,603
    9490:	00009504 	movi	zero,596
    9494:	000096bc 	xorhi	zero,zero,602
    9498:	000094f8 	rdprs	zero,zero,595
    949c:	000096bc 	xorhi	zero,zero,602
    94a0:	00009690 	cmplti	zero,zero,602
    94a4:	000096bc 	xorhi	zero,zero,602
    94a8:	000094f8 	rdprs	zero,zero,595
    94ac:	00009504 	movi	zero,596
    94b0:	00009504 	movi	zero,596
    94b4:	00009690 	cmplti	zero,zero,602
    94b8:	000094f8 	rdprs	zero,zero,595
    94bc:	000094e8 	cmpgeui	zero,zero,595
    94c0:	000094e8 	cmpgeui	zero,zero,595
    94c4:	000094e8 	cmpgeui	zero,zero,595
    94c8:	00009a54 	movui	zero,617
    94cc:	2404b03a 	or	r2,r4,r16
    94d0:	10006c1e 	bne	r2,zero,9684 <__divdf3+0x2ec>
    94d4:	02400204 	movi	r9,8
    94d8:	0021883a 	mov	r16,zero
    94dc:	002b883a 	mov	r21,zero
    94e0:	01400084 	movi	r5,2
    94e4:	003fca06 	br	9410 <_gp+0xffff5c08>
    94e8:	8023883a 	mov	r17,r16
    94ec:	a829883a 	mov	r20,r21
    94f0:	4039883a 	mov	fp,r8
    94f4:	280f883a 	mov	r7,r5
    94f8:	00800084 	movi	r2,2
    94fc:	3881601e 	bne	r7,r2,9a80 <__divdf3+0x6e8>
    9500:	e027883a 	mov	r19,fp
    9504:	9900004c 	andi	r4,r19,1
    9508:	0081ffc4 	movi	r2,2047
    950c:	0021883a 	mov	r16,zero
    9510:	002b883a 	mov	r21,zero
    9514:	1004953a 	slli	r2,r2,20
    9518:	20c03fcc 	andi	r3,r4,255
    951c:	01400434 	movhi	r5,16
    9520:	297fffc4 	addi	r5,r5,-1
    9524:	180697fa 	slli	r3,r3,31
    9528:	8160703a 	and	r16,r16,r5
    952c:	80a0b03a 	or	r16,r16,r2
    9530:	80c6b03a 	or	r3,r16,r3
    9534:	a805883a 	mov	r2,r21
    9538:	dfc00f17 	ldw	ra,60(sp)
    953c:	df000e17 	ldw	fp,56(sp)
    9540:	ddc00d17 	ldw	r23,52(sp)
    9544:	dd800c17 	ldw	r22,48(sp)
    9548:	dd400b17 	ldw	r21,44(sp)
    954c:	dd000a17 	ldw	r20,40(sp)
    9550:	dcc00917 	ldw	r19,36(sp)
    9554:	dc800817 	ldw	r18,32(sp)
    9558:	dc400717 	ldw	r17,28(sp)
    955c:	dc000617 	ldw	r16,24(sp)
    9560:	dec01004 	addi	sp,sp,64
    9564:	f800283a 	ret
    9568:	2404b03a 	or	r2,r4,r16
    956c:	2023883a 	mov	r17,r4
    9570:	10003f26 	beq	r2,zero,9670 <__divdf3+0x2d8>
    9574:	80015e26 	beq	r16,zero,9af0 <__divdf3+0x758>
    9578:	8009883a 	mov	r4,r16
    957c:	d9800215 	stw	r6,8(sp)
    9580:	d9c00515 	stw	r7,20(sp)
    9584:	da000415 	stw	r8,16(sp)
    9588:	0009e440 	call	9e44 <__clzsi2>
    958c:	d9800217 	ldw	r6,8(sp)
    9590:	d9c00517 	ldw	r7,20(sp)
    9594:	da000417 	ldw	r8,16(sp)
    9598:	113ffd44 	addi	r4,r2,-11
    959c:	00c00704 	movi	r3,28
    95a0:	19014f16 	blt	r3,r4,9ae0 <__divdf3+0x748>
    95a4:	00c00744 	movi	r3,29
    95a8:	157ffe04 	addi	r21,r2,-8
    95ac:	1907c83a 	sub	r3,r3,r4
    95b0:	8560983a 	sll	r16,r16,r21
    95b4:	88c6d83a 	srl	r3,r17,r3
    95b8:	8d6a983a 	sll	r21,r17,r21
    95bc:	1c20b03a 	or	r16,r3,r16
    95c0:	1080fcc4 	addi	r2,r2,1011
    95c4:	00a5c83a 	sub	r18,zero,r2
    95c8:	0013883a 	mov	r9,zero
    95cc:	000b883a 	mov	r5,zero
    95d0:	003f8f06 	br	9410 <_gp+0xffff5c08>
    95d4:	3444b03a 	or	r2,r6,r17
    95d8:	1000231e 	bne	r2,zero,9668 <__divdf3+0x2d0>
    95dc:	0023883a 	mov	r17,zero
    95e0:	0029883a 	mov	r20,zero
    95e4:	01c00084 	movi	r7,2
    95e8:	003f9b06 	br	9458 <_gp+0xffff5c50>
    95ec:	3444b03a 	or	r2,r6,r17
    95f0:	10001926 	beq	r2,zero,9658 <__divdf3+0x2c0>
    95f4:	88014b26 	beq	r17,zero,9b24 <__divdf3+0x78c>
    95f8:	8809883a 	mov	r4,r17
    95fc:	d9400115 	stw	r5,4(sp)
    9600:	d9800215 	stw	r6,8(sp)
    9604:	da000415 	stw	r8,16(sp)
    9608:	da400315 	stw	r9,12(sp)
    960c:	0009e440 	call	9e44 <__clzsi2>
    9610:	d9400117 	ldw	r5,4(sp)
    9614:	d9800217 	ldw	r6,8(sp)
    9618:	da000417 	ldw	r8,16(sp)
    961c:	da400317 	ldw	r9,12(sp)
    9620:	113ffd44 	addi	r4,r2,-11
    9624:	00c00704 	movi	r3,28
    9628:	19013a16 	blt	r3,r4,9b14 <__divdf3+0x77c>
    962c:	00c00744 	movi	r3,29
    9630:	153ffe04 	addi	r20,r2,-8
    9634:	1907c83a 	sub	r3,r3,r4
    9638:	8d22983a 	sll	r17,r17,r20
    963c:	30c6d83a 	srl	r3,r6,r3
    9640:	3528983a 	sll	r20,r6,r20
    9644:	1c62b03a 	or	r17,r3,r17
    9648:	1080fcc4 	addi	r2,r2,1011
    964c:	0087c83a 	sub	r3,zero,r2
    9650:	000f883a 	mov	r7,zero
    9654:	003f8006 	br	9458 <_gp+0xffff5c50>
    9658:	0023883a 	mov	r17,zero
    965c:	0029883a 	mov	r20,zero
    9660:	01c00044 	movi	r7,1
    9664:	003f7c06 	br	9458 <_gp+0xffff5c50>
    9668:	01c000c4 	movi	r7,3
    966c:	003f7a06 	br	9458 <_gp+0xffff5c50>
    9670:	02400104 	movi	r9,4
    9674:	0021883a 	mov	r16,zero
    9678:	002b883a 	mov	r21,zero
    967c:	01400044 	movi	r5,1
    9680:	003f6306 	br	9410 <_gp+0xffff5c08>
    9684:	02400304 	movi	r9,12
    9688:	014000c4 	movi	r5,3
    968c:	003f6006 	br	9410 <_gp+0xffff5c08>
    9690:	04000434 	movhi	r16,16
    9694:	0009883a 	mov	r4,zero
    9698:	843fffc4 	addi	r16,r16,-1
    969c:	057fffc4 	movi	r21,-1
    96a0:	0081ffc4 	movi	r2,2047
    96a4:	003f9b06 	br	9514 <_gp+0xffff5d0c>
    96a8:	00c00044 	movi	r3,1
    96ac:	1887c83a 	sub	r3,r3,r2
    96b0:	01000e04 	movi	r4,56
    96b4:	20c1530e 	bge	r4,r3,9c04 <__divdf3+0x86c>
    96b8:	9900004c 	andi	r4,r19,1
    96bc:	0005883a 	mov	r2,zero
    96c0:	0021883a 	mov	r16,zero
    96c4:	002b883a 	mov	r21,zero
    96c8:	003f9206 	br	9514 <_gp+0xffff5d0c>
    96cc:	8c012e36 	bltu	r17,r16,9b88 <__divdf3+0x7f0>
    96d0:	84412c26 	beq	r16,r17,9b84 <__divdf3+0x7ec>
    96d4:	a82f883a 	mov	r23,r21
    96d8:	18ffffc4 	addi	r3,r3,-1
    96dc:	002b883a 	mov	r21,zero
    96e0:	a004d63a 	srli	r2,r20,24
    96e4:	8822923a 	slli	r17,r17,8
    96e8:	a028923a 	slli	r20,r20,8
    96ec:	8009883a 	mov	r4,r16
    96f0:	88acb03a 	or	r22,r17,r2
    96f4:	dd000015 	stw	r20,0(sp)
    96f8:	b028d43a 	srli	r20,r22,16
    96fc:	d8c00215 	stw	r3,8(sp)
    9700:	b4bfffcc 	andi	r18,r22,65535
    9704:	a00b883a 	mov	r5,r20
    9708:	0008a300 	call	8a30 <__udivsi3>
    970c:	100b883a 	mov	r5,r2
    9710:	9009883a 	mov	r4,r18
    9714:	1023883a 	mov	r17,r2
    9718:	0009ea80 	call	9ea8 <__mulsi3>
    971c:	8009883a 	mov	r4,r16
    9720:	a00b883a 	mov	r5,r20
    9724:	1039883a 	mov	fp,r2
    9728:	0008a940 	call	8a94 <__umodsi3>
    972c:	1004943a 	slli	r2,r2,16
    9730:	b808d43a 	srli	r4,r23,16
    9734:	d8c00217 	ldw	r3,8(sp)
    9738:	2084b03a 	or	r2,r4,r2
    973c:	1700062e 	bgeu	r2,fp,9758 <__divdf3+0x3c0>
    9740:	1585883a 	add	r2,r2,r22
    9744:	893fffc4 	addi	r4,r17,-1
    9748:	15811d36 	bltu	r2,r22,9bc0 <__divdf3+0x828>
    974c:	17011c2e 	bgeu	r2,fp,9bc0 <__divdf3+0x828>
    9750:	8c7fff84 	addi	r17,r17,-2
    9754:	1585883a 	add	r2,r2,r22
    9758:	1739c83a 	sub	fp,r2,fp
    975c:	a00b883a 	mov	r5,r20
    9760:	e009883a 	mov	r4,fp
    9764:	d8c00215 	stw	r3,8(sp)
    9768:	0008a300 	call	8a30 <__udivsi3>
    976c:	100b883a 	mov	r5,r2
    9770:	9009883a 	mov	r4,r18
    9774:	1021883a 	mov	r16,r2
    9778:	0009ea80 	call	9ea8 <__mulsi3>
    977c:	a00b883a 	mov	r5,r20
    9780:	e009883a 	mov	r4,fp
    9784:	d8800415 	stw	r2,16(sp)
    9788:	0008a940 	call	8a94 <__umodsi3>
    978c:	1004943a 	slli	r2,r2,16
    9790:	da000417 	ldw	r8,16(sp)
    9794:	bdffffcc 	andi	r23,r23,65535
    9798:	b884b03a 	or	r2,r23,r2
    979c:	d8c00217 	ldw	r3,8(sp)
    97a0:	1200062e 	bgeu	r2,r8,97bc <__divdf3+0x424>
    97a4:	1585883a 	add	r2,r2,r22
    97a8:	813fffc4 	addi	r4,r16,-1
    97ac:	15810236 	bltu	r2,r22,9bb8 <__divdf3+0x820>
    97b0:	1201012e 	bgeu	r2,r8,9bb8 <__divdf3+0x820>
    97b4:	843fff84 	addi	r16,r16,-2
    97b8:	1585883a 	add	r2,r2,r22
    97bc:	8822943a 	slli	r17,r17,16
    97c0:	d9800017 	ldw	r6,0(sp)
    97c4:	1211c83a 	sub	r8,r2,r8
    97c8:	8c22b03a 	or	r17,r17,r16
    97cc:	373fffcc 	andi	fp,r6,65535
    97d0:	8abfffcc 	andi	r10,r17,65535
    97d4:	8820d43a 	srli	r16,r17,16
    97d8:	5009883a 	mov	r4,r10
    97dc:	e00b883a 	mov	r5,fp
    97e0:	302ed43a 	srli	r23,r6,16
    97e4:	d8c00215 	stw	r3,8(sp)
    97e8:	da000415 	stw	r8,16(sp)
    97ec:	da800115 	stw	r10,4(sp)
    97f0:	0009ea80 	call	9ea8 <__mulsi3>
    97f4:	800b883a 	mov	r5,r16
    97f8:	e009883a 	mov	r4,fp
    97fc:	d8800515 	stw	r2,20(sp)
    9800:	0009ea80 	call	9ea8 <__mulsi3>
    9804:	8009883a 	mov	r4,r16
    9808:	b80b883a 	mov	r5,r23
    980c:	d8800315 	stw	r2,12(sp)
    9810:	0009ea80 	call	9ea8 <__mulsi3>
    9814:	da800117 	ldw	r10,4(sp)
    9818:	b80b883a 	mov	r5,r23
    981c:	1021883a 	mov	r16,r2
    9820:	5009883a 	mov	r4,r10
    9824:	0009ea80 	call	9ea8 <__mulsi3>
    9828:	d9c00517 	ldw	r7,20(sp)
    982c:	da400317 	ldw	r9,12(sp)
    9830:	d8c00217 	ldw	r3,8(sp)
    9834:	3808d43a 	srli	r4,r7,16
    9838:	1245883a 	add	r2,r2,r9
    983c:	da000417 	ldw	r8,16(sp)
    9840:	2085883a 	add	r2,r4,r2
    9844:	1240022e 	bgeu	r2,r9,9850 <__divdf3+0x4b8>
    9848:	01000074 	movhi	r4,1
    984c:	8121883a 	add	r16,r16,r4
    9850:	1008d43a 	srli	r4,r2,16
    9854:	1004943a 	slli	r2,r2,16
    9858:	39ffffcc 	andi	r7,r7,65535
    985c:	2409883a 	add	r4,r4,r16
    9860:	11c5883a 	add	r2,r2,r7
    9864:	4100bb36 	bltu	r8,r4,9b54 <__divdf3+0x7bc>
    9868:	4100d726 	beq	r8,r4,9bc8 <__divdf3+0x830>
    986c:	4109c83a 	sub	r4,r8,r4
    9870:	a8a1c83a 	sub	r16,r21,r2
    9874:	ac2b803a 	cmpltu	r21,r21,r16
    9878:	256bc83a 	sub	r21,r4,r21
    987c:	b540d926 	beq	r22,r21,9be4 <__divdf3+0x84c>
    9880:	a00b883a 	mov	r5,r20
    9884:	a809883a 	mov	r4,r21
    9888:	d8c00215 	stw	r3,8(sp)
    988c:	0008a300 	call	8a30 <__udivsi3>
    9890:	100b883a 	mov	r5,r2
    9894:	9009883a 	mov	r4,r18
    9898:	d8800515 	stw	r2,20(sp)
    989c:	0009ea80 	call	9ea8 <__mulsi3>
    98a0:	a809883a 	mov	r4,r21
    98a4:	a00b883a 	mov	r5,r20
    98a8:	d8800415 	stw	r2,16(sp)
    98ac:	0008a940 	call	8a94 <__umodsi3>
    98b0:	1004943a 	slli	r2,r2,16
    98b4:	8008d43a 	srli	r4,r16,16
    98b8:	da000417 	ldw	r8,16(sp)
    98bc:	d8c00217 	ldw	r3,8(sp)
    98c0:	2084b03a 	or	r2,r4,r2
    98c4:	d9c00517 	ldw	r7,20(sp)
    98c8:	1200062e 	bgeu	r2,r8,98e4 <__divdf3+0x54c>
    98cc:	1585883a 	add	r2,r2,r22
    98d0:	393fffc4 	addi	r4,r7,-1
    98d4:	1580c536 	bltu	r2,r22,9bec <__divdf3+0x854>
    98d8:	1200c42e 	bgeu	r2,r8,9bec <__divdf3+0x854>
    98dc:	39ffff84 	addi	r7,r7,-2
    98e0:	1585883a 	add	r2,r2,r22
    98e4:	122bc83a 	sub	r21,r2,r8
    98e8:	a00b883a 	mov	r5,r20
    98ec:	a809883a 	mov	r4,r21
    98f0:	d8c00215 	stw	r3,8(sp)
    98f4:	d9c00515 	stw	r7,20(sp)
    98f8:	0008a300 	call	8a30 <__udivsi3>
    98fc:	9009883a 	mov	r4,r18
    9900:	100b883a 	mov	r5,r2
    9904:	d8800415 	stw	r2,16(sp)
    9908:	0009ea80 	call	9ea8 <__mulsi3>
    990c:	a809883a 	mov	r4,r21
    9910:	a00b883a 	mov	r5,r20
    9914:	1025883a 	mov	r18,r2
    9918:	0008a940 	call	8a94 <__umodsi3>
    991c:	1004943a 	slli	r2,r2,16
    9920:	813fffcc 	andi	r4,r16,65535
    9924:	d8c00217 	ldw	r3,8(sp)
    9928:	20a0b03a 	or	r16,r4,r2
    992c:	d9c00517 	ldw	r7,20(sp)
    9930:	da000417 	ldw	r8,16(sp)
    9934:	8480062e 	bgeu	r16,r18,9950 <__divdf3+0x5b8>
    9938:	85a1883a 	add	r16,r16,r22
    993c:	40bfffc4 	addi	r2,r8,-1
    9940:	8580ac36 	bltu	r16,r22,9bf4 <__divdf3+0x85c>
    9944:	8480ab2e 	bgeu	r16,r18,9bf4 <__divdf3+0x85c>
    9948:	423fff84 	addi	r8,r8,-2
    994c:	85a1883a 	add	r16,r16,r22
    9950:	3804943a 	slli	r2,r7,16
    9954:	84a1c83a 	sub	r16,r16,r18
    9958:	e009883a 	mov	r4,fp
    995c:	1228b03a 	or	r20,r2,r8
    9960:	a1ffffcc 	andi	r7,r20,65535
    9964:	a024d43a 	srli	r18,r20,16
    9968:	380b883a 	mov	r5,r7
    996c:	d8c00215 	stw	r3,8(sp)
    9970:	d9c00515 	stw	r7,20(sp)
    9974:	0009ea80 	call	9ea8 <__mulsi3>
    9978:	900b883a 	mov	r5,r18
    997c:	e009883a 	mov	r4,fp
    9980:	102b883a 	mov	r21,r2
    9984:	0009ea80 	call	9ea8 <__mulsi3>
    9988:	900b883a 	mov	r5,r18
    998c:	b809883a 	mov	r4,r23
    9990:	1039883a 	mov	fp,r2
    9994:	0009ea80 	call	9ea8 <__mulsi3>
    9998:	d9c00517 	ldw	r7,20(sp)
    999c:	b80b883a 	mov	r5,r23
    99a0:	1025883a 	mov	r18,r2
    99a4:	3809883a 	mov	r4,r7
    99a8:	0009ea80 	call	9ea8 <__mulsi3>
    99ac:	a808d43a 	srli	r4,r21,16
    99b0:	1705883a 	add	r2,r2,fp
    99b4:	d8c00217 	ldw	r3,8(sp)
    99b8:	2085883a 	add	r2,r4,r2
    99bc:	1700022e 	bgeu	r2,fp,99c8 <__divdf3+0x630>
    99c0:	01000074 	movhi	r4,1
    99c4:	9125883a 	add	r18,r18,r4
    99c8:	1008d43a 	srli	r4,r2,16
    99cc:	1004943a 	slli	r2,r2,16
    99d0:	ad7fffcc 	andi	r21,r21,65535
    99d4:	2489883a 	add	r4,r4,r18
    99d8:	1545883a 	add	r2,r2,r21
    99dc:	81003836 	bltu	r16,r4,9ac0 <__divdf3+0x728>
    99e0:	81003626 	beq	r16,r4,9abc <__divdf3+0x724>
    99e4:	a5000054 	ori	r20,r20,1
    99e8:	1880ffc4 	addi	r2,r3,1023
    99ec:	00bf2e0e 	bge	zero,r2,96a8 <_gp+0xffff5ea0>
    99f0:	a10001cc 	andi	r4,r20,7
    99f4:	20000726 	beq	r4,zero,9a14 <__divdf3+0x67c>
    99f8:	a10003cc 	andi	r4,r20,15
    99fc:	01400104 	movi	r5,4
    9a00:	21400426 	beq	r4,r5,9a14 <__divdf3+0x67c>
    9a04:	a149883a 	add	r4,r20,r5
    9a08:	2529803a 	cmpltu	r20,r4,r20
    9a0c:	8d23883a 	add	r17,r17,r20
    9a10:	2029883a 	mov	r20,r4
    9a14:	8900402c 	andhi	r4,r17,256
    9a18:	20000426 	beq	r4,zero,9a2c <__divdf3+0x694>
    9a1c:	18810004 	addi	r2,r3,1024
    9a20:	00ffc034 	movhi	r3,65280
    9a24:	18ffffc4 	addi	r3,r3,-1
    9a28:	88e2703a 	and	r17,r17,r3
    9a2c:	00c1ff84 	movi	r3,2046
    9a30:	18beb416 	blt	r3,r2,9504 <_gp+0xffff5cfc>
    9a34:	a028d0fa 	srli	r20,r20,3
    9a38:	882a977a 	slli	r21,r17,29
    9a3c:	8820927a 	slli	r16,r17,9
    9a40:	1081ffcc 	andi	r2,r2,2047
    9a44:	ad2ab03a 	or	r21,r21,r20
    9a48:	8020d33a 	srli	r16,r16,12
    9a4c:	9900004c 	andi	r4,r19,1
    9a50:	003eb006 	br	9514 <_gp+0xffff5d0c>
    9a54:	8080022c 	andhi	r2,r16,8
    9a58:	10001226 	beq	r2,zero,9aa4 <__divdf3+0x70c>
    9a5c:	8880022c 	andhi	r2,r17,8
    9a60:	1000101e 	bne	r2,zero,9aa4 <__divdf3+0x70c>
    9a64:	00800434 	movhi	r2,16
    9a68:	8c000234 	orhi	r16,r17,8
    9a6c:	10bfffc4 	addi	r2,r2,-1
    9a70:	b809883a 	mov	r4,r23
    9a74:	80a0703a 	and	r16,r16,r2
    9a78:	a02b883a 	mov	r21,r20
    9a7c:	003f0806 	br	96a0 <_gp+0xffff5e98>
    9a80:	008000c4 	movi	r2,3
    9a84:	3880b126 	beq	r7,r2,9d4c <__divdf3+0x9b4>
    9a88:	00800044 	movi	r2,1
    9a8c:	38805b1e 	bne	r7,r2,9bfc <__divdf3+0x864>
    9a90:	e009883a 	mov	r4,fp
    9a94:	0005883a 	mov	r2,zero
    9a98:	0021883a 	mov	r16,zero
    9a9c:	002b883a 	mov	r21,zero
    9aa0:	003e9c06 	br	9514 <_gp+0xffff5d0c>
    9aa4:	00800434 	movhi	r2,16
    9aa8:	84000234 	orhi	r16,r16,8
    9aac:	10bfffc4 	addi	r2,r2,-1
    9ab0:	b009883a 	mov	r4,r22
    9ab4:	80a0703a 	and	r16,r16,r2
    9ab8:	003ef906 	br	96a0 <_gp+0xffff5e98>
    9abc:	103fca26 	beq	r2,zero,99e8 <_gp+0xffff61e0>
    9ac0:	b421883a 	add	r16,r22,r16
    9ac4:	a17fffc4 	addi	r5,r20,-1
    9ac8:	8580422e 	bgeu	r16,r22,9bd4 <__divdf3+0x83c>
    9acc:	2829883a 	mov	r20,r5
    9ad0:	813fc41e 	bne	r16,r4,99e4 <_gp+0xffff61dc>
    9ad4:	d9800017 	ldw	r6,0(sp)
    9ad8:	30bfc21e 	bne	r6,r2,99e4 <_gp+0xffff61dc>
    9adc:	003fc206 	br	99e8 <_gp+0xffff61e0>
    9ae0:	143ff604 	addi	r16,r2,-40
    9ae4:	8c20983a 	sll	r16,r17,r16
    9ae8:	002b883a 	mov	r21,zero
    9aec:	003eb406 	br	95c0 <_gp+0xffff5db8>
    9af0:	d9800215 	stw	r6,8(sp)
    9af4:	d9c00515 	stw	r7,20(sp)
    9af8:	da000415 	stw	r8,16(sp)
    9afc:	0009e440 	call	9e44 <__clzsi2>
    9b00:	10800804 	addi	r2,r2,32
    9b04:	da000417 	ldw	r8,16(sp)
    9b08:	d9c00517 	ldw	r7,20(sp)
    9b0c:	d9800217 	ldw	r6,8(sp)
    9b10:	003ea106 	br	9598 <_gp+0xffff5d90>
    9b14:	147ff604 	addi	r17,r2,-40
    9b18:	3462983a 	sll	r17,r6,r17
    9b1c:	0029883a 	mov	r20,zero
    9b20:	003ec906 	br	9648 <_gp+0xffff5e40>
    9b24:	3009883a 	mov	r4,r6
    9b28:	d9400115 	stw	r5,4(sp)
    9b2c:	d9800215 	stw	r6,8(sp)
    9b30:	da000415 	stw	r8,16(sp)
    9b34:	da400315 	stw	r9,12(sp)
    9b38:	0009e440 	call	9e44 <__clzsi2>
    9b3c:	10800804 	addi	r2,r2,32
    9b40:	da400317 	ldw	r9,12(sp)
    9b44:	da000417 	ldw	r8,16(sp)
    9b48:	d9800217 	ldw	r6,8(sp)
    9b4c:	d9400117 	ldw	r5,4(sp)
    9b50:	003eb306 	br	9620 <_gp+0xffff5e18>
    9b54:	d9800017 	ldw	r6,0(sp)
    9b58:	a9ab883a 	add	r21,r21,r6
    9b5c:	a98b803a 	cmpltu	r5,r21,r6
    9b60:	2d8b883a 	add	r5,r5,r22
    9b64:	2a11883a 	add	r8,r5,r8
    9b68:	897fffc4 	addi	r5,r17,-1
    9b6c:	b2000c2e 	bgeu	r22,r8,9ba0 <__divdf3+0x808>
    9b70:	41003f36 	bltu	r8,r4,9c70 <__divdf3+0x8d8>
    9b74:	22006c26 	beq	r4,r8,9d28 <__divdf3+0x990>
    9b78:	4109c83a 	sub	r4,r8,r4
    9b7c:	2823883a 	mov	r17,r5
    9b80:	003f3b06 	br	9870 <_gp+0xffff6068>
    9b84:	ad3ed336 	bltu	r21,r20,96d4 <_gp+0xffff5ecc>
    9b88:	a804d07a 	srli	r2,r21,1
    9b8c:	802e97fa 	slli	r23,r16,31
    9b90:	a82a97fa 	slli	r21,r21,31
    9b94:	8020d07a 	srli	r16,r16,1
    9b98:	b8aeb03a 	or	r23,r23,r2
    9b9c:	003ed006 	br	96e0 <_gp+0xffff5ed8>
    9ba0:	b23ff51e 	bne	r22,r8,9b78 <_gp+0xffff6370>
    9ba4:	d9800017 	ldw	r6,0(sp)
    9ba8:	a9bff12e 	bgeu	r21,r6,9b70 <_gp+0xffff6368>
    9bac:	b109c83a 	sub	r4,r22,r4
    9bb0:	2823883a 	mov	r17,r5
    9bb4:	003f2e06 	br	9870 <_gp+0xffff6068>
    9bb8:	2021883a 	mov	r16,r4
    9bbc:	003eff06 	br	97bc <_gp+0xffff5fb4>
    9bc0:	2023883a 	mov	r17,r4
    9bc4:	003ee406 	br	9758 <_gp+0xffff5f50>
    9bc8:	a8bfe236 	bltu	r21,r2,9b54 <_gp+0xffff634c>
    9bcc:	0009883a 	mov	r4,zero
    9bd0:	003f2706 	br	9870 <_gp+0xffff6068>
    9bd4:	81002d36 	bltu	r16,r4,9c8c <__divdf3+0x8f4>
    9bd8:	24005626 	beq	r4,r16,9d34 <__divdf3+0x99c>
    9bdc:	2829883a 	mov	r20,r5
    9be0:	003f8006 	br	99e4 <_gp+0xffff61dc>
    9be4:	053fffc4 	movi	r20,-1
    9be8:	003f7f06 	br	99e8 <_gp+0xffff61e0>
    9bec:	200f883a 	mov	r7,r4
    9bf0:	003f3c06 	br	98e4 <_gp+0xffff60dc>
    9bf4:	1011883a 	mov	r8,r2
    9bf8:	003f5506 	br	9950 <_gp+0xffff6148>
    9bfc:	e027883a 	mov	r19,fp
    9c00:	003f7906 	br	99e8 <_gp+0xffff61e0>
    9c04:	010007c4 	movi	r4,31
    9c08:	20c02816 	blt	r4,r3,9cac <__divdf3+0x914>
    9c0c:	00800804 	movi	r2,32
    9c10:	10c5c83a 	sub	r2,r2,r3
    9c14:	888a983a 	sll	r5,r17,r2
    9c18:	a0c8d83a 	srl	r4,r20,r3
    9c1c:	a084983a 	sll	r2,r20,r2
    9c20:	88e2d83a 	srl	r17,r17,r3
    9c24:	2906b03a 	or	r3,r5,r4
    9c28:	1004c03a 	cmpne	r2,r2,zero
    9c2c:	1886b03a 	or	r3,r3,r2
    9c30:	188001cc 	andi	r2,r3,7
    9c34:	10000726 	beq	r2,zero,9c54 <__divdf3+0x8bc>
    9c38:	188003cc 	andi	r2,r3,15
    9c3c:	01000104 	movi	r4,4
    9c40:	11000426 	beq	r2,r4,9c54 <__divdf3+0x8bc>
    9c44:	1805883a 	mov	r2,r3
    9c48:	10c00104 	addi	r3,r2,4
    9c4c:	1885803a 	cmpltu	r2,r3,r2
    9c50:	88a3883a 	add	r17,r17,r2
    9c54:	8880202c 	andhi	r2,r17,128
    9c58:	10002926 	beq	r2,zero,9d00 <__divdf3+0x968>
    9c5c:	9900004c 	andi	r4,r19,1
    9c60:	00800044 	movi	r2,1
    9c64:	0021883a 	mov	r16,zero
    9c68:	002b883a 	mov	r21,zero
    9c6c:	003e2906 	br	9514 <_gp+0xffff5d0c>
    9c70:	d9800017 	ldw	r6,0(sp)
    9c74:	8c7fff84 	addi	r17,r17,-2
    9c78:	a9ab883a 	add	r21,r21,r6
    9c7c:	a98b803a 	cmpltu	r5,r21,r6
    9c80:	2d8b883a 	add	r5,r5,r22
    9c84:	2a11883a 	add	r8,r5,r8
    9c88:	003ef806 	br	986c <_gp+0xffff6064>
    9c8c:	d9800017 	ldw	r6,0(sp)
    9c90:	318f883a 	add	r7,r6,r6
    9c94:	398b803a 	cmpltu	r5,r7,r6
    9c98:	2d8d883a 	add	r6,r5,r22
    9c9c:	81a1883a 	add	r16,r16,r6
    9ca0:	a17fff84 	addi	r5,r20,-2
    9ca4:	d9c00015 	stw	r7,0(sp)
    9ca8:	003f8806 	br	9acc <_gp+0xffff62c4>
    9cac:	013ff844 	movi	r4,-31
    9cb0:	2085c83a 	sub	r2,r4,r2
    9cb4:	8888d83a 	srl	r4,r17,r2
    9cb8:	00800804 	movi	r2,32
    9cbc:	18802126 	beq	r3,r2,9d44 <__divdf3+0x9ac>
    9cc0:	04001004 	movi	r16,64
    9cc4:	80c7c83a 	sub	r3,r16,r3
    9cc8:	88e0983a 	sll	r16,r17,r3
    9ccc:	8504b03a 	or	r2,r16,r20
    9cd0:	1004c03a 	cmpne	r2,r2,zero
    9cd4:	2084b03a 	or	r2,r4,r2
    9cd8:	144001cc 	andi	r17,r2,7
    9cdc:	88000d1e 	bne	r17,zero,9d14 <__divdf3+0x97c>
    9ce0:	0021883a 	mov	r16,zero
    9ce4:	102ad0fa 	srli	r21,r2,3
    9ce8:	9900004c 	andi	r4,r19,1
    9cec:	0005883a 	mov	r2,zero
    9cf0:	ac6ab03a 	or	r21,r21,r17
    9cf4:	003e0706 	br	9514 <_gp+0xffff5d0c>
    9cf8:	1007883a 	mov	r3,r2
    9cfc:	0023883a 	mov	r17,zero
    9d00:	8820927a 	slli	r16,r17,9
    9d04:	1805883a 	mov	r2,r3
    9d08:	8822977a 	slli	r17,r17,29
    9d0c:	8020d33a 	srli	r16,r16,12
    9d10:	003ff406 	br	9ce4 <_gp+0xffff64dc>
    9d14:	10c003cc 	andi	r3,r2,15
    9d18:	01000104 	movi	r4,4
    9d1c:	193ff626 	beq	r3,r4,9cf8 <_gp+0xffff64f0>
    9d20:	0023883a 	mov	r17,zero
    9d24:	003fc806 	br	9c48 <_gp+0xffff6440>
    9d28:	a8bfd136 	bltu	r21,r2,9c70 <_gp+0xffff6468>
    9d2c:	2823883a 	mov	r17,r5
    9d30:	003fa606 	br	9bcc <_gp+0xffff63c4>
    9d34:	d9800017 	ldw	r6,0(sp)
    9d38:	30bfd436 	bltu	r6,r2,9c8c <_gp+0xffff6484>
    9d3c:	2829883a 	mov	r20,r5
    9d40:	003f6406 	br	9ad4 <_gp+0xffff62cc>
    9d44:	0021883a 	mov	r16,zero
    9d48:	003fe006 	br	9ccc <_gp+0xffff64c4>
    9d4c:	00800434 	movhi	r2,16
    9d50:	8c000234 	orhi	r16,r17,8
    9d54:	10bfffc4 	addi	r2,r2,-1
    9d58:	e009883a 	mov	r4,fp
    9d5c:	80a0703a 	and	r16,r16,r2
    9d60:	a02b883a 	mov	r21,r20
    9d64:	003e4e06 	br	96a0 <_gp+0xffff5e98>

00009d68 <__floatsidf>:
    9d68:	defffd04 	addi	sp,sp,-12
    9d6c:	dfc00215 	stw	ra,8(sp)
    9d70:	dc400115 	stw	r17,4(sp)
    9d74:	dc000015 	stw	r16,0(sp)
    9d78:	20002b26 	beq	r4,zero,9e28 <__floatsidf+0xc0>
    9d7c:	2023883a 	mov	r17,r4
    9d80:	2020d7fa 	srli	r16,r4,31
    9d84:	20002d16 	blt	r4,zero,9e3c <__floatsidf+0xd4>
    9d88:	8809883a 	mov	r4,r17
    9d8c:	0009e440 	call	9e44 <__clzsi2>
    9d90:	01410784 	movi	r5,1054
    9d94:	288bc83a 	sub	r5,r5,r2
    9d98:	01010cc4 	movi	r4,1075
    9d9c:	2149c83a 	sub	r4,r4,r5
    9da0:	00c007c4 	movi	r3,31
    9da4:	1900160e 	bge	r3,r4,9e00 <__floatsidf+0x98>
    9da8:	00c104c4 	movi	r3,1043
    9dac:	1947c83a 	sub	r3,r3,r5
    9db0:	88c6983a 	sll	r3,r17,r3
    9db4:	00800434 	movhi	r2,16
    9db8:	10bfffc4 	addi	r2,r2,-1
    9dbc:	1886703a 	and	r3,r3,r2
    9dc0:	2941ffcc 	andi	r5,r5,2047
    9dc4:	800d883a 	mov	r6,r16
    9dc8:	0005883a 	mov	r2,zero
    9dcc:	280a953a 	slli	r5,r5,20
    9dd0:	31803fcc 	andi	r6,r6,255
    9dd4:	01000434 	movhi	r4,16
    9dd8:	300c97fa 	slli	r6,r6,31
    9ddc:	213fffc4 	addi	r4,r4,-1
    9de0:	1906703a 	and	r3,r3,r4
    9de4:	1946b03a 	or	r3,r3,r5
    9de8:	1986b03a 	or	r3,r3,r6
    9dec:	dfc00217 	ldw	ra,8(sp)
    9df0:	dc400117 	ldw	r17,4(sp)
    9df4:	dc000017 	ldw	r16,0(sp)
    9df8:	dec00304 	addi	sp,sp,12
    9dfc:	f800283a 	ret
    9e00:	00c002c4 	movi	r3,11
    9e04:	1887c83a 	sub	r3,r3,r2
    9e08:	88c6d83a 	srl	r3,r17,r3
    9e0c:	8904983a 	sll	r2,r17,r4
    9e10:	01000434 	movhi	r4,16
    9e14:	213fffc4 	addi	r4,r4,-1
    9e18:	2941ffcc 	andi	r5,r5,2047
    9e1c:	1906703a 	and	r3,r3,r4
    9e20:	800d883a 	mov	r6,r16
    9e24:	003fe906 	br	9dcc <_gp+0xffff65c4>
    9e28:	000d883a 	mov	r6,zero
    9e2c:	000b883a 	mov	r5,zero
    9e30:	0007883a 	mov	r3,zero
    9e34:	0005883a 	mov	r2,zero
    9e38:	003fe406 	br	9dcc <_gp+0xffff65c4>
    9e3c:	0123c83a 	sub	r17,zero,r4
    9e40:	003fd106 	br	9d88 <_gp+0xffff6580>

00009e44 <__clzsi2>:
    9e44:	00bfffd4 	movui	r2,65535
    9e48:	11000536 	bltu	r2,r4,9e60 <__clzsi2+0x1c>
    9e4c:	00803fc4 	movi	r2,255
    9e50:	11000f36 	bltu	r2,r4,9e90 <__clzsi2+0x4c>
    9e54:	00800804 	movi	r2,32
    9e58:	0007883a 	mov	r3,zero
    9e5c:	00000506 	br	9e74 <__clzsi2+0x30>
    9e60:	00804034 	movhi	r2,256
    9e64:	10bfffc4 	addi	r2,r2,-1
    9e68:	11000c2e 	bgeu	r2,r4,9e9c <__clzsi2+0x58>
    9e6c:	00800204 	movi	r2,8
    9e70:	00c00604 	movi	r3,24
    9e74:	20c8d83a 	srl	r4,r4,r3
    9e78:	00c00074 	movhi	r3,1
    9e7c:	18ed70c4 	addi	r3,r3,-19005
    9e80:	1909883a 	add	r4,r3,r4
    9e84:	20c00003 	ldbu	r3,0(r4)
    9e88:	10c5c83a 	sub	r2,r2,r3
    9e8c:	f800283a 	ret
    9e90:	00800604 	movi	r2,24
    9e94:	00c00204 	movi	r3,8
    9e98:	003ff606 	br	9e74 <_gp+0xffff666c>
    9e9c:	00800404 	movi	r2,16
    9ea0:	1007883a 	mov	r3,r2
    9ea4:	003ff306 	br	9e74 <_gp+0xffff666c>

00009ea8 <__mulsi3>:
    9ea8:	0005883a 	mov	r2,zero
    9eac:	20000726 	beq	r4,zero,9ecc <__mulsi3+0x24>
    9eb0:	20c0004c 	andi	r3,r4,1
    9eb4:	2008d07a 	srli	r4,r4,1
    9eb8:	18000126 	beq	r3,zero,9ec0 <__mulsi3+0x18>
    9ebc:	1145883a 	add	r2,r2,r5
    9ec0:	294b883a 	add	r5,r5,r5
    9ec4:	203ffa1e 	bne	r4,zero,9eb0 <_gp+0xffff66a8>
    9ec8:	f800283a 	ret
    9ecc:	f800283a 	ret

00009ed0 <_printf_r>:
    9ed0:	defffd04 	addi	sp,sp,-12
    9ed4:	dfc00015 	stw	ra,0(sp)
    9ed8:	d9800115 	stw	r6,4(sp)
    9edc:	d9c00215 	stw	r7,8(sp)
    9ee0:	20c00217 	ldw	r3,8(r4)
    9ee4:	01800074 	movhi	r6,1
    9ee8:	31ab5204 	addi	r6,r6,-21176
    9eec:	19800115 	stw	r6,4(r3)
    9ef0:	280d883a 	mov	r6,r5
    9ef4:	21400217 	ldw	r5,8(r4)
    9ef8:	d9c00104 	addi	r7,sp,4
    9efc:	000a8000 	call	a800 <___vfprintf_internal_r>
    9f00:	dfc00017 	ldw	ra,0(sp)
    9f04:	dec00304 	addi	sp,sp,12
    9f08:	f800283a 	ret

00009f0c <printf>:
    9f0c:	defffc04 	addi	sp,sp,-16
    9f10:	dfc00015 	stw	ra,0(sp)
    9f14:	d9400115 	stw	r5,4(sp)
    9f18:	d9800215 	stw	r6,8(sp)
    9f1c:	d9c00315 	stw	r7,12(sp)
    9f20:	00800074 	movhi	r2,1
    9f24:	10ae0404 	addi	r2,r2,-18416
    9f28:	10800017 	ldw	r2,0(r2)
    9f2c:	01400074 	movhi	r5,1
    9f30:	296b5204 	addi	r5,r5,-21176
    9f34:	10c00217 	ldw	r3,8(r2)
    9f38:	d9800104 	addi	r6,sp,4
    9f3c:	19400115 	stw	r5,4(r3)
    9f40:	200b883a 	mov	r5,r4
    9f44:	11000217 	ldw	r4,8(r2)
    9f48:	000ad2c0 	call	ad2c <__vfprintf_internal>
    9f4c:	dfc00017 	ldw	ra,0(sp)
    9f50:	dec00404 	addi	sp,sp,16
    9f54:	f800283a 	ret

00009f58 <_putchar_r>:
    9f58:	21800217 	ldw	r6,8(r4)
    9f5c:	000af5c1 	jmpi	af5c <_putc_r>

00009f60 <putchar>:
    9f60:	00800074 	movhi	r2,1
    9f64:	10ae0404 	addi	r2,r2,-18416
    9f68:	10800017 	ldw	r2,0(r2)
    9f6c:	200b883a 	mov	r5,r4
    9f70:	11800217 	ldw	r6,8(r2)
    9f74:	1009883a 	mov	r4,r2
    9f78:	000af5c1 	jmpi	af5c <_putc_r>

00009f7c <_puts_r>:
    9f7c:	defffd04 	addi	sp,sp,-12
    9f80:	dc000015 	stw	r16,0(sp)
    9f84:	2021883a 	mov	r16,r4
    9f88:	2809883a 	mov	r4,r5
    9f8c:	dfc00215 	stw	ra,8(sp)
    9f90:	dc400115 	stw	r17,4(sp)
    9f94:	2823883a 	mov	r17,r5
    9f98:	000a1c40 	call	a1c4 <strlen>
    9f9c:	81400217 	ldw	r5,8(r16)
    9fa0:	01000074 	movhi	r4,1
    9fa4:	212b5204 	addi	r4,r4,-21176
    9fa8:	29000115 	stw	r4,4(r5)
    9fac:	100f883a 	mov	r7,r2
    9fb0:	880d883a 	mov	r6,r17
    9fb4:	8009883a 	mov	r4,r16
    9fb8:	000ad480 	call	ad48 <__sfvwrite_small_dev>
    9fbc:	00ffffc4 	movi	r3,-1
    9fc0:	10c00926 	beq	r2,r3,9fe8 <_puts_r+0x6c>
    9fc4:	81400217 	ldw	r5,8(r16)
    9fc8:	01800074 	movhi	r6,1
    9fcc:	01c00044 	movi	r7,1
    9fd0:	28800117 	ldw	r2,4(r5)
    9fd4:	31ad3904 	addi	r6,r6,-19228
    9fd8:	8009883a 	mov	r4,r16
    9fdc:	103ee83a 	callr	r2
    9fe0:	10bfffe0 	cmpeqi	r2,r2,-1
    9fe4:	0085c83a 	sub	r2,zero,r2
    9fe8:	dfc00217 	ldw	ra,8(sp)
    9fec:	dc400117 	ldw	r17,4(sp)
    9ff0:	dc000017 	ldw	r16,0(sp)
    9ff4:	dec00304 	addi	sp,sp,12
    9ff8:	f800283a 	ret

00009ffc <puts>:
    9ffc:	00800074 	movhi	r2,1
    a000:	10ae0404 	addi	r2,r2,-18416
    a004:	200b883a 	mov	r5,r4
    a008:	11000017 	ldw	r4,0(r2)
    a00c:	0009f7c1 	jmpi	9f7c <_puts_r>

0000a010 <srand>:
    a010:	00800074 	movhi	r2,1
    a014:	10ae6b04 	addi	r2,r2,-18004
    a018:	11000015 	stw	r4,0(r2)
    a01c:	10000115 	stw	zero,4(r2)
    a020:	f800283a 	ret

0000a024 <rand>:
    a024:	defffe04 	addi	sp,sp,-8
    a028:	dc000015 	stw	r16,0(sp)
    a02c:	04000074 	movhi	r16,1
    a030:	842e6b04 	addi	r16,r16,-18004
    a034:	81000017 	ldw	r4,0(r16)
    a038:	81400117 	ldw	r5,4(r16)
    a03c:	01932574 	movhi	r6,19605
    a040:	01d614b4 	movhi	r7,22610
    a044:	319fcb44 	addi	r6,r6,32557
    a048:	39fd0b44 	addi	r7,r7,-3027
    a04c:	dfc00115 	stw	ra,4(sp)
    a050:	000b00c0 	call	b00c <__muldi3>
    a054:	11000044 	addi	r4,r2,1
    a058:	2085803a 	cmpltu	r2,r4,r2
    a05c:	10c7883a 	add	r3,r2,r3
    a060:	00a00034 	movhi	r2,32768
    a064:	10bfffc4 	addi	r2,r2,-1
    a068:	1884703a 	and	r2,r3,r2
    a06c:	81000015 	stw	r4,0(r16)
    a070:	80c00115 	stw	r3,4(r16)
    a074:	dfc00117 	ldw	ra,4(sp)
    a078:	dc000017 	ldw	r16,0(sp)
    a07c:	dec00204 	addi	sp,sp,8
    a080:	f800283a 	ret

0000a084 <_sprintf_r>:
    a084:	defff704 	addi	sp,sp,-36
    a088:	dfc00715 	stw	ra,28(sp)
    a08c:	d9c00815 	stw	r7,32(sp)
    a090:	00808204 	movi	r2,520
    a094:	d880000d 	sth	r2,0(sp)
    a098:	00a00034 	movhi	r2,32768
    a09c:	10bfffc4 	addi	r2,r2,-1
    a0a0:	d8800515 	stw	r2,20(sp)
    a0a4:	d8800315 	stw	r2,12(sp)
    a0a8:	00bfffc4 	movi	r2,-1
    a0ac:	d880008d 	sth	r2,2(sp)
    a0b0:	00800074 	movhi	r2,1
    a0b4:	d9400415 	stw	r5,16(sp)
    a0b8:	d9400215 	stw	r5,8(sp)
    a0bc:	10ab8004 	addi	r2,r2,-20992
    a0c0:	d9c00804 	addi	r7,sp,32
    a0c4:	d80b883a 	mov	r5,sp
    a0c8:	d8800115 	stw	r2,4(sp)
    a0cc:	d8000615 	stw	zero,24(sp)
    a0d0:	000a24c0 	call	a24c <___svfprintf_internal_r>
    a0d4:	d8c00417 	ldw	r3,16(sp)
    a0d8:	18000005 	stb	zero,0(r3)
    a0dc:	dfc00717 	ldw	ra,28(sp)
    a0e0:	dec00904 	addi	sp,sp,36
    a0e4:	f800283a 	ret

0000a0e8 <sprintf>:
    a0e8:	defff604 	addi	sp,sp,-40
    a0ec:	dfc00715 	stw	ra,28(sp)
    a0f0:	d9800815 	stw	r6,32(sp)
    a0f4:	d9c00915 	stw	r7,36(sp)
    a0f8:	00808204 	movi	r2,520
    a0fc:	d880000d 	sth	r2,0(sp)
    a100:	00a00034 	movhi	r2,32768
    a104:	10bfffc4 	addi	r2,r2,-1
    a108:	d8800515 	stw	r2,20(sp)
    a10c:	d8800315 	stw	r2,12(sp)
    a110:	00bfffc4 	movi	r2,-1
    a114:	d880008d 	sth	r2,2(sp)
    a118:	00800074 	movhi	r2,1
    a11c:	10ab8004 	addi	r2,r2,-20992
    a120:	d8800115 	stw	r2,4(sp)
    a124:	00800074 	movhi	r2,1
    a128:	10ae0404 	addi	r2,r2,-18416
    a12c:	d9000415 	stw	r4,16(sp)
    a130:	d9000215 	stw	r4,8(sp)
    a134:	11000017 	ldw	r4,0(r2)
    a138:	280d883a 	mov	r6,r5
    a13c:	d9c00804 	addi	r7,sp,32
    a140:	d80b883a 	mov	r5,sp
    a144:	d8000615 	stw	zero,24(sp)
    a148:	000a24c0 	call	a24c <___svfprintf_internal_r>
    a14c:	d8c00417 	ldw	r3,16(sp)
    a150:	18000005 	stb	zero,0(r3)
    a154:	dfc00717 	ldw	ra,28(sp)
    a158:	dec00a04 	addi	sp,sp,40
    a15c:	f800283a 	ret

0000a160 <strcmp>:
    a160:	20800003 	ldbu	r2,0(r4)
    a164:	10c03fcc 	andi	r3,r2,255
    a168:	18c0201c 	xori	r3,r3,128
    a16c:	18ffe004 	addi	r3,r3,-128
    a170:	18000526 	beq	r3,zero,a188 <strcmp+0x28>
    a174:	29800007 	ldb	r6,0(r5)
    a178:	1980031e 	bne	r3,r6,a188 <strcmp+0x28>
    a17c:	21000044 	addi	r4,r4,1
    a180:	29400044 	addi	r5,r5,1
    a184:	003ff606 	br	a160 <_gp+0xffff6958>
    a188:	28c00003 	ldbu	r3,0(r5)
    a18c:	10803fcc 	andi	r2,r2,255
    a190:	10c5c83a 	sub	r2,r2,r3
    a194:	f800283a 	ret

0000a198 <strcpy>:
    a198:	2005883a 	mov	r2,r4
    a19c:	200d883a 	mov	r6,r4
    a1a0:	28c00003 	ldbu	r3,0(r5)
    a1a4:	31800044 	addi	r6,r6,1
    a1a8:	29400044 	addi	r5,r5,1
    a1ac:	30ffffc5 	stb	r3,-1(r6)
    a1b0:	18c03fcc 	andi	r3,r3,255
    a1b4:	18c0201c 	xori	r3,r3,128
    a1b8:	18ffe004 	addi	r3,r3,-128
    a1bc:	183ff81e 	bne	r3,zero,a1a0 <_gp+0xffff6998>
    a1c0:	f800283a 	ret

0000a1c4 <strlen>:
    a1c4:	2005883a 	mov	r2,r4
    a1c8:	10c00007 	ldb	r3,0(r2)
    a1cc:	18000226 	beq	r3,zero,a1d8 <strlen+0x14>
    a1d0:	10800044 	addi	r2,r2,1
    a1d4:	003ffc06 	br	a1c8 <_gp+0xffff69c0>
    a1d8:	1105c83a 	sub	r2,r2,r4
    a1dc:	f800283a 	ret

0000a1e0 <print_repeat>:
    a1e0:	defffb04 	addi	sp,sp,-20
    a1e4:	dc800315 	stw	r18,12(sp)
    a1e8:	dc400215 	stw	r17,8(sp)
    a1ec:	dc000115 	stw	r16,4(sp)
    a1f0:	dfc00415 	stw	ra,16(sp)
    a1f4:	2025883a 	mov	r18,r4
    a1f8:	2823883a 	mov	r17,r5
    a1fc:	d9800005 	stb	r6,0(sp)
    a200:	3821883a 	mov	r16,r7
    a204:	04000a0e 	bge	zero,r16,a230 <print_repeat+0x50>
    a208:	88800117 	ldw	r2,4(r17)
    a20c:	01c00044 	movi	r7,1
    a210:	d80d883a 	mov	r6,sp
    a214:	880b883a 	mov	r5,r17
    a218:	9009883a 	mov	r4,r18
    a21c:	103ee83a 	callr	r2
    a220:	843fffc4 	addi	r16,r16,-1
    a224:	103ff726 	beq	r2,zero,a204 <_gp+0xffff69fc>
    a228:	00bfffc4 	movi	r2,-1
    a22c:	00000106 	br	a234 <print_repeat+0x54>
    a230:	0005883a 	mov	r2,zero
    a234:	dfc00417 	ldw	ra,16(sp)
    a238:	dc800317 	ldw	r18,12(sp)
    a23c:	dc400217 	ldw	r17,8(sp)
    a240:	dc000117 	ldw	r16,4(sp)
    a244:	dec00504 	addi	sp,sp,20
    a248:	f800283a 	ret

0000a24c <___svfprintf_internal_r>:
    a24c:	deffe504 	addi	sp,sp,-108
    a250:	d8c00804 	addi	r3,sp,32
    a254:	ddc01815 	stw	r23,96(sp)
    a258:	dd801715 	stw	r22,92(sp)
    a25c:	dd401615 	stw	r21,88(sp)
    a260:	dd001515 	stw	r20,84(sp)
    a264:	dcc01415 	stw	r19,80(sp)
    a268:	dc801315 	stw	r18,76(sp)
    a26c:	dc401215 	stw	r17,72(sp)
    a270:	dc001115 	stw	r16,68(sp)
    a274:	dfc01a15 	stw	ra,104(sp)
    a278:	df001915 	stw	fp,100(sp)
    a27c:	2029883a 	mov	r20,r4
    a280:	2823883a 	mov	r17,r5
    a284:	382d883a 	mov	r22,r7
    a288:	d9800f15 	stw	r6,60(sp)
    a28c:	0021883a 	mov	r16,zero
    a290:	d8000e15 	stw	zero,56(sp)
    a294:	d8000a15 	stw	zero,40(sp)
    a298:	002b883a 	mov	r21,zero
    a29c:	0027883a 	mov	r19,zero
    a2a0:	0025883a 	mov	r18,zero
    a2a4:	d8000c15 	stw	zero,48(sp)
    a2a8:	d8000b15 	stw	zero,44(sp)
    a2ac:	002f883a 	mov	r23,zero
    a2b0:	d8c00915 	stw	r3,36(sp)
    a2b4:	d8c00f17 	ldw	r3,60(sp)
    a2b8:	19000003 	ldbu	r4,0(r3)
    a2bc:	20803fcc 	andi	r2,r4,255
    a2c0:	1080201c 	xori	r2,r2,128
    a2c4:	10bfe004 	addi	r2,r2,-128
    a2c8:	10011e26 	beq	r2,zero,a744 <___svfprintf_internal_r+0x4f8>
    a2cc:	00c00044 	movi	r3,1
    a2d0:	b8c01426 	beq	r23,r3,a324 <___svfprintf_internal_r+0xd8>
    a2d4:	1dc00216 	blt	r3,r23,a2e0 <___svfprintf_internal_r+0x94>
    a2d8:	b8000626 	beq	r23,zero,a2f4 <___svfprintf_internal_r+0xa8>
    a2dc:	00011506 	br	a734 <___svfprintf_internal_r+0x4e8>
    a2e0:	01400084 	movi	r5,2
    a2e4:	b9401d26 	beq	r23,r5,a35c <___svfprintf_internal_r+0x110>
    a2e8:	014000c4 	movi	r5,3
    a2ec:	b9402b26 	beq	r23,r5,a39c <___svfprintf_internal_r+0x150>
    a2f0:	00011006 	br	a734 <___svfprintf_internal_r+0x4e8>
    a2f4:	01400944 	movi	r5,37
    a2f8:	1140fc26 	beq	r2,r5,a6ec <___svfprintf_internal_r+0x4a0>
    a2fc:	88800117 	ldw	r2,4(r17)
    a300:	d9000005 	stb	r4,0(sp)
    a304:	01c00044 	movi	r7,1
    a308:	d80d883a 	mov	r6,sp
    a30c:	880b883a 	mov	r5,r17
    a310:	a009883a 	mov	r4,r20
    a314:	103ee83a 	callr	r2
    a318:	1000d81e 	bne	r2,zero,a67c <___svfprintf_internal_r+0x430>
    a31c:	84000044 	addi	r16,r16,1
    a320:	00010406 	br	a734 <___svfprintf_internal_r+0x4e8>
    a324:	01400c04 	movi	r5,48
    a328:	1140fa26 	beq	r2,r5,a714 <___svfprintf_internal_r+0x4c8>
    a32c:	01400944 	movi	r5,37
    a330:	11400a1e 	bne	r2,r5,a35c <___svfprintf_internal_r+0x110>
    a334:	d8800005 	stb	r2,0(sp)
    a338:	88800117 	ldw	r2,4(r17)
    a33c:	b80f883a 	mov	r7,r23
    a340:	d80d883a 	mov	r6,sp
    a344:	880b883a 	mov	r5,r17
    a348:	a009883a 	mov	r4,r20
    a34c:	103ee83a 	callr	r2
    a350:	1000ca1e 	bne	r2,zero,a67c <___svfprintf_internal_r+0x430>
    a354:	84000044 	addi	r16,r16,1
    a358:	0000f506 	br	a730 <___svfprintf_internal_r+0x4e4>
    a35c:	25fff404 	addi	r23,r4,-48
    a360:	bdc03fcc 	andi	r23,r23,255
    a364:	00c00244 	movi	r3,9
    a368:	1dc00936 	bltu	r3,r23,a390 <___svfprintf_internal_r+0x144>
    a36c:	00bfffc4 	movi	r2,-1
    a370:	90800426 	beq	r18,r2,a384 <___svfprintf_internal_r+0x138>
    a374:	01400284 	movi	r5,10
    a378:	9009883a 	mov	r4,r18
    a37c:	0009ea80 	call	9ea8 <__mulsi3>
    a380:	00000106 	br	a388 <___svfprintf_internal_r+0x13c>
    a384:	0005883a 	mov	r2,zero
    a388:	b8a5883a 	add	r18,r23,r2
    a38c:	0000e206 	br	a718 <___svfprintf_internal_r+0x4cc>
    a390:	01400b84 	movi	r5,46
    a394:	1140e426 	beq	r2,r5,a728 <___svfprintf_internal_r+0x4dc>
    a398:	05c00084 	movi	r23,2
    a39c:	213ff404 	addi	r4,r4,-48
    a3a0:	27003fcc 	andi	fp,r4,255
    a3a4:	00c00244 	movi	r3,9
    a3a8:	1f000936 	bltu	r3,fp,a3d0 <___svfprintf_internal_r+0x184>
    a3ac:	00bfffc4 	movi	r2,-1
    a3b0:	98800426 	beq	r19,r2,a3c4 <___svfprintf_internal_r+0x178>
    a3b4:	01400284 	movi	r5,10
    a3b8:	9809883a 	mov	r4,r19
    a3bc:	0009ea80 	call	9ea8 <__mulsi3>
    a3c0:	00000106 	br	a3c8 <___svfprintf_internal_r+0x17c>
    a3c4:	0005883a 	mov	r2,zero
    a3c8:	e0a7883a 	add	r19,fp,r2
    a3cc:	0000d906 	br	a734 <___svfprintf_internal_r+0x4e8>
    a3d0:	00c01b04 	movi	r3,108
    a3d4:	10c0d226 	beq	r2,r3,a720 <___svfprintf_internal_r+0x4d4>
    a3d8:	013fffc4 	movi	r4,-1
    a3dc:	99000226 	beq	r19,r4,a3e8 <___svfprintf_internal_r+0x19c>
    a3e0:	d8000b15 	stw	zero,44(sp)
    a3e4:	00000106 	br	a3ec <___svfprintf_internal_r+0x1a0>
    a3e8:	04c00044 	movi	r19,1
    a3ec:	01001a44 	movi	r4,105
    a3f0:	11001626 	beq	r2,r4,a44c <___svfprintf_internal_r+0x200>
    a3f4:	20800916 	blt	r4,r2,a41c <___svfprintf_internal_r+0x1d0>
    a3f8:	010018c4 	movi	r4,99
    a3fc:	11008826 	beq	r2,r4,a620 <___svfprintf_internal_r+0x3d4>
    a400:	01001904 	movi	r4,100
    a404:	11001126 	beq	r2,r4,a44c <___svfprintf_internal_r+0x200>
    a408:	01001604 	movi	r4,88
    a40c:	1100c81e 	bne	r2,r4,a730 <___svfprintf_internal_r+0x4e4>
    a410:	00c00044 	movi	r3,1
    a414:	d8c00e15 	stw	r3,56(sp)
    a418:	00001506 	br	a470 <___svfprintf_internal_r+0x224>
    a41c:	01001cc4 	movi	r4,115
    a420:	11009826 	beq	r2,r4,a684 <___svfprintf_internal_r+0x438>
    a424:	20800416 	blt	r4,r2,a438 <___svfprintf_internal_r+0x1ec>
    a428:	01001bc4 	movi	r4,111
    a42c:	1100c01e 	bne	r2,r4,a730 <___svfprintf_internal_r+0x4e4>
    a430:	05400204 	movi	r21,8
    a434:	00000f06 	br	a474 <___svfprintf_internal_r+0x228>
    a438:	01001d44 	movi	r4,117
    a43c:	11000d26 	beq	r2,r4,a474 <___svfprintf_internal_r+0x228>
    a440:	01001e04 	movi	r4,120
    a444:	11000a26 	beq	r2,r4,a470 <___svfprintf_internal_r+0x224>
    a448:	0000b906 	br	a730 <___svfprintf_internal_r+0x4e4>
    a44c:	d8c00a17 	ldw	r3,40(sp)
    a450:	b7000104 	addi	fp,r22,4
    a454:	18000726 	beq	r3,zero,a474 <___svfprintf_internal_r+0x228>
    a458:	df000d15 	stw	fp,52(sp)
    a45c:	b5c00017 	ldw	r23,0(r22)
    a460:	b800080e 	bge	r23,zero,a484 <___svfprintf_internal_r+0x238>
    a464:	05efc83a 	sub	r23,zero,r23
    a468:	02400044 	movi	r9,1
    a46c:	00000606 	br	a488 <___svfprintf_internal_r+0x23c>
    a470:	05400404 	movi	r21,16
    a474:	b0c00104 	addi	r3,r22,4
    a478:	d8c00d15 	stw	r3,52(sp)
    a47c:	b5c00017 	ldw	r23,0(r22)
    a480:	d8000a15 	stw	zero,40(sp)
    a484:	0013883a 	mov	r9,zero
    a488:	d839883a 	mov	fp,sp
    a48c:	b8001726 	beq	r23,zero,a4ec <___svfprintf_internal_r+0x2a0>
    a490:	a80b883a 	mov	r5,r21
    a494:	b809883a 	mov	r4,r23
    a498:	da401015 	stw	r9,64(sp)
    a49c:	0008a300 	call	8a30 <__udivsi3>
    a4a0:	a80b883a 	mov	r5,r21
    a4a4:	1009883a 	mov	r4,r2
    a4a8:	102d883a 	mov	r22,r2
    a4ac:	0009ea80 	call	9ea8 <__mulsi3>
    a4b0:	b885c83a 	sub	r2,r23,r2
    a4b4:	00c00244 	movi	r3,9
    a4b8:	da401017 	ldw	r9,64(sp)
    a4bc:	18800216 	blt	r3,r2,a4c8 <___svfprintf_internal_r+0x27c>
    a4c0:	10800c04 	addi	r2,r2,48
    a4c4:	00000506 	br	a4dc <___svfprintf_internal_r+0x290>
    a4c8:	d8c00e17 	ldw	r3,56(sp)
    a4cc:	18000226 	beq	r3,zero,a4d8 <___svfprintf_internal_r+0x28c>
    a4d0:	10800dc4 	addi	r2,r2,55
    a4d4:	00000106 	br	a4dc <___svfprintf_internal_r+0x290>
    a4d8:	108015c4 	addi	r2,r2,87
    a4dc:	e0800005 	stb	r2,0(fp)
    a4e0:	b02f883a 	mov	r23,r22
    a4e4:	e7000044 	addi	fp,fp,1
    a4e8:	003fe806 	br	a48c <_gp+0xffff6c84>
    a4ec:	e6efc83a 	sub	r23,fp,sp
    a4f0:	9dc5c83a 	sub	r2,r19,r23
    a4f4:	0080090e 	bge	zero,r2,a51c <___svfprintf_internal_r+0x2d0>
    a4f8:	e085883a 	add	r2,fp,r2
    a4fc:	01400c04 	movi	r5,48
    a500:	d8c00917 	ldw	r3,36(sp)
    a504:	e009883a 	mov	r4,fp
    a508:	e0c0032e 	bgeu	fp,r3,a518 <___svfprintf_internal_r+0x2cc>
    a50c:	e7000044 	addi	fp,fp,1
    a510:	21400005 	stb	r5,0(r4)
    a514:	e0bffa1e 	bne	fp,r2,a500 <_gp+0xffff6cf8>
    a518:	e6efc83a 	sub	r23,fp,sp
    a51c:	d8c00b17 	ldw	r3,44(sp)
    a520:	4dd1883a 	add	r8,r9,r23
    a524:	922dc83a 	sub	r22,r18,r8
    a528:	18001626 	beq	r3,zero,a584 <___svfprintf_internal_r+0x338>
    a52c:	48000a26 	beq	r9,zero,a558 <___svfprintf_internal_r+0x30c>
    a530:	00800b44 	movi	r2,45
    a534:	d8800805 	stb	r2,32(sp)
    a538:	88800117 	ldw	r2,4(r17)
    a53c:	01c00044 	movi	r7,1
    a540:	d9800804 	addi	r6,sp,32
    a544:	880b883a 	mov	r5,r17
    a548:	a009883a 	mov	r4,r20
    a54c:	103ee83a 	callr	r2
    a550:	10004a1e 	bne	r2,zero,a67c <___svfprintf_internal_r+0x430>
    a554:	84000044 	addi	r16,r16,1
    a558:	0580070e 	bge	zero,r22,a578 <___svfprintf_internal_r+0x32c>
    a55c:	b00f883a 	mov	r7,r22
    a560:	01800c04 	movi	r6,48
    a564:	880b883a 	mov	r5,r17
    a568:	a009883a 	mov	r4,r20
    a56c:	000a1e00 	call	a1e0 <print_repeat>
    a570:	1000421e 	bne	r2,zero,a67c <___svfprintf_internal_r+0x430>
    a574:	85a1883a 	add	r16,r16,r22
    a578:	e02d883a 	mov	r22,fp
    a57c:	bf2fc83a 	sub	r23,r23,fp
    a580:	00002006 	br	a604 <___svfprintf_internal_r+0x3b8>
    a584:	0580090e 	bge	zero,r22,a5ac <___svfprintf_internal_r+0x360>
    a588:	b00f883a 	mov	r7,r22
    a58c:	01800804 	movi	r6,32
    a590:	880b883a 	mov	r5,r17
    a594:	a009883a 	mov	r4,r20
    a598:	da401015 	stw	r9,64(sp)
    a59c:	000a1e00 	call	a1e0 <print_repeat>
    a5a0:	da401017 	ldw	r9,64(sp)
    a5a4:	1000351e 	bne	r2,zero,a67c <___svfprintf_internal_r+0x430>
    a5a8:	85a1883a 	add	r16,r16,r22
    a5ac:	483ff226 	beq	r9,zero,a578 <_gp+0xffff6d70>
    a5b0:	00800b44 	movi	r2,45
    a5b4:	d8800805 	stb	r2,32(sp)
    a5b8:	88800117 	ldw	r2,4(r17)
    a5bc:	01c00044 	movi	r7,1
    a5c0:	d9800804 	addi	r6,sp,32
    a5c4:	880b883a 	mov	r5,r17
    a5c8:	a009883a 	mov	r4,r20
    a5cc:	103ee83a 	callr	r2
    a5d0:	10002a1e 	bne	r2,zero,a67c <___svfprintf_internal_r+0x430>
    a5d4:	84000044 	addi	r16,r16,1
    a5d8:	003fe706 	br	a578 <_gp+0xffff6d70>
    a5dc:	b5bfffc4 	addi	r22,r22,-1
    a5e0:	b0800003 	ldbu	r2,0(r22)
    a5e4:	01c00044 	movi	r7,1
    a5e8:	d9800804 	addi	r6,sp,32
    a5ec:	d8800805 	stb	r2,32(sp)
    a5f0:	88800117 	ldw	r2,4(r17)
    a5f4:	880b883a 	mov	r5,r17
    a5f8:	a009883a 	mov	r4,r20
    a5fc:	103ee83a 	callr	r2
    a600:	10001e1e 	bne	r2,zero,a67c <___svfprintf_internal_r+0x430>
    a604:	8585c83a 	sub	r2,r16,r22
    a608:	b5c9883a 	add	r4,r22,r23
    a60c:	e085883a 	add	r2,fp,r2
    a610:	013ff216 	blt	zero,r4,a5dc <_gp+0xffff6dd4>
    a614:	1021883a 	mov	r16,r2
    a618:	dd800d17 	ldw	r22,52(sp)
    a61c:	00004406 	br	a730 <___svfprintf_internal_r+0x4e4>
    a620:	00800044 	movi	r2,1
    a624:	1480080e 	bge	r2,r18,a648 <___svfprintf_internal_r+0x3fc>
    a628:	95ffffc4 	addi	r23,r18,-1
    a62c:	b80f883a 	mov	r7,r23
    a630:	01800804 	movi	r6,32
    a634:	880b883a 	mov	r5,r17
    a638:	a009883a 	mov	r4,r20
    a63c:	000a1e00 	call	a1e0 <print_repeat>
    a640:	10000e1e 	bne	r2,zero,a67c <___svfprintf_internal_r+0x430>
    a644:	85e1883a 	add	r16,r16,r23
    a648:	b0800017 	ldw	r2,0(r22)
    a64c:	01c00044 	movi	r7,1
    a650:	d80d883a 	mov	r6,sp
    a654:	d8800005 	stb	r2,0(sp)
    a658:	88800117 	ldw	r2,4(r17)
    a65c:	880b883a 	mov	r5,r17
    a660:	a009883a 	mov	r4,r20
    a664:	b5c00104 	addi	r23,r22,4
    a668:	103ee83a 	callr	r2
    a66c:	1000031e 	bne	r2,zero,a67c <___svfprintf_internal_r+0x430>
    a670:	84000044 	addi	r16,r16,1
    a674:	b82d883a 	mov	r22,r23
    a678:	00002d06 	br	a730 <___svfprintf_internal_r+0x4e4>
    a67c:	00bfffc4 	movi	r2,-1
    a680:	00003106 	br	a748 <___svfprintf_internal_r+0x4fc>
    a684:	b5c00017 	ldw	r23,0(r22)
    a688:	b7000104 	addi	fp,r22,4
    a68c:	b809883a 	mov	r4,r23
    a690:	000a1c40 	call	a1c4 <strlen>
    a694:	9091c83a 	sub	r8,r18,r2
    a698:	102d883a 	mov	r22,r2
    a69c:	0200090e 	bge	zero,r8,a6c4 <___svfprintf_internal_r+0x478>
    a6a0:	400f883a 	mov	r7,r8
    a6a4:	01800804 	movi	r6,32
    a6a8:	880b883a 	mov	r5,r17
    a6ac:	a009883a 	mov	r4,r20
    a6b0:	da001015 	stw	r8,64(sp)
    a6b4:	000a1e00 	call	a1e0 <print_repeat>
    a6b8:	da001017 	ldw	r8,64(sp)
    a6bc:	103fef1e 	bne	r2,zero,a67c <_gp+0xffff6e74>
    a6c0:	8221883a 	add	r16,r16,r8
    a6c4:	88800117 	ldw	r2,4(r17)
    a6c8:	b00f883a 	mov	r7,r22
    a6cc:	b80d883a 	mov	r6,r23
    a6d0:	880b883a 	mov	r5,r17
    a6d4:	a009883a 	mov	r4,r20
    a6d8:	103ee83a 	callr	r2
    a6dc:	103fe71e 	bne	r2,zero,a67c <_gp+0xffff6e74>
    a6e0:	85a1883a 	add	r16,r16,r22
    a6e4:	e02d883a 	mov	r22,fp
    a6e8:	00001106 	br	a730 <___svfprintf_internal_r+0x4e4>
    a6ec:	00c00044 	movi	r3,1
    a6f0:	04ffffc4 	movi	r19,-1
    a6f4:	d8000e15 	stw	zero,56(sp)
    a6f8:	d8c00a15 	stw	r3,40(sp)
    a6fc:	05400284 	movi	r21,10
    a700:	9825883a 	mov	r18,r19
    a704:	d8000c15 	stw	zero,48(sp)
    a708:	d8000b15 	stw	zero,44(sp)
    a70c:	182f883a 	mov	r23,r3
    a710:	00000806 	br	a734 <___svfprintf_internal_r+0x4e8>
    a714:	ddc00b15 	stw	r23,44(sp)
    a718:	05c00084 	movi	r23,2
    a71c:	00000506 	br	a734 <___svfprintf_internal_r+0x4e8>
    a720:	00c00044 	movi	r3,1
    a724:	d8c00c15 	stw	r3,48(sp)
    a728:	05c000c4 	movi	r23,3
    a72c:	00000106 	br	a734 <___svfprintf_internal_r+0x4e8>
    a730:	002f883a 	mov	r23,zero
    a734:	d8c00f17 	ldw	r3,60(sp)
    a738:	18c00044 	addi	r3,r3,1
    a73c:	d8c00f15 	stw	r3,60(sp)
    a740:	003edc06 	br	a2b4 <_gp+0xffff6aac>
    a744:	8005883a 	mov	r2,r16
    a748:	dfc01a17 	ldw	ra,104(sp)
    a74c:	df001917 	ldw	fp,100(sp)
    a750:	ddc01817 	ldw	r23,96(sp)
    a754:	dd801717 	ldw	r22,92(sp)
    a758:	dd401617 	ldw	r21,88(sp)
    a75c:	dd001517 	ldw	r20,84(sp)
    a760:	dcc01417 	ldw	r19,80(sp)
    a764:	dc801317 	ldw	r18,76(sp)
    a768:	dc401217 	ldw	r17,72(sp)
    a76c:	dc001117 	ldw	r16,68(sp)
    a770:	dec01b04 	addi	sp,sp,108
    a774:	f800283a 	ret

0000a778 <__vfprintf_internal_unused>:
    a778:	00800074 	movhi	r2,1
    a77c:	10ae0404 	addi	r2,r2,-18416
    a780:	300f883a 	mov	r7,r6
    a784:	280d883a 	mov	r6,r5
    a788:	200b883a 	mov	r5,r4
    a78c:	11000017 	ldw	r4,0(r2)
    a790:	000a24c1 	jmpi	a24c <___svfprintf_internal_r>

0000a794 <print_repeat>:
    a794:	defffb04 	addi	sp,sp,-20
    a798:	dc800315 	stw	r18,12(sp)
    a79c:	dc400215 	stw	r17,8(sp)
    a7a0:	dc000115 	stw	r16,4(sp)
    a7a4:	dfc00415 	stw	ra,16(sp)
    a7a8:	2025883a 	mov	r18,r4
    a7ac:	2823883a 	mov	r17,r5
    a7b0:	d9800005 	stb	r6,0(sp)
    a7b4:	3821883a 	mov	r16,r7
    a7b8:	04000a0e 	bge	zero,r16,a7e4 <print_repeat+0x50>
    a7bc:	88800117 	ldw	r2,4(r17)
    a7c0:	01c00044 	movi	r7,1
    a7c4:	d80d883a 	mov	r6,sp
    a7c8:	880b883a 	mov	r5,r17
    a7cc:	9009883a 	mov	r4,r18
    a7d0:	103ee83a 	callr	r2
    a7d4:	843fffc4 	addi	r16,r16,-1
    a7d8:	103ff726 	beq	r2,zero,a7b8 <_gp+0xffff6fb0>
    a7dc:	00bfffc4 	movi	r2,-1
    a7e0:	00000106 	br	a7e8 <print_repeat+0x54>
    a7e4:	0005883a 	mov	r2,zero
    a7e8:	dfc00417 	ldw	ra,16(sp)
    a7ec:	dc800317 	ldw	r18,12(sp)
    a7f0:	dc400217 	ldw	r17,8(sp)
    a7f4:	dc000117 	ldw	r16,4(sp)
    a7f8:	dec00504 	addi	sp,sp,20
    a7fc:	f800283a 	ret

0000a800 <___vfprintf_internal_r>:
    a800:	deffe504 	addi	sp,sp,-108
    a804:	d8c00804 	addi	r3,sp,32
    a808:	ddc01815 	stw	r23,96(sp)
    a80c:	dd801715 	stw	r22,92(sp)
    a810:	dd401615 	stw	r21,88(sp)
    a814:	dd001515 	stw	r20,84(sp)
    a818:	dcc01415 	stw	r19,80(sp)
    a81c:	dc801315 	stw	r18,76(sp)
    a820:	dc401215 	stw	r17,72(sp)
    a824:	dc001115 	stw	r16,68(sp)
    a828:	dfc01a15 	stw	ra,104(sp)
    a82c:	df001915 	stw	fp,100(sp)
    a830:	2029883a 	mov	r20,r4
    a834:	2823883a 	mov	r17,r5
    a838:	382d883a 	mov	r22,r7
    a83c:	d9800f15 	stw	r6,60(sp)
    a840:	0021883a 	mov	r16,zero
    a844:	d8000e15 	stw	zero,56(sp)
    a848:	d8000a15 	stw	zero,40(sp)
    a84c:	002b883a 	mov	r21,zero
    a850:	0027883a 	mov	r19,zero
    a854:	0025883a 	mov	r18,zero
    a858:	d8000c15 	stw	zero,48(sp)
    a85c:	d8000b15 	stw	zero,44(sp)
    a860:	002f883a 	mov	r23,zero
    a864:	d8c00915 	stw	r3,36(sp)
    a868:	d8c00f17 	ldw	r3,60(sp)
    a86c:	19000003 	ldbu	r4,0(r3)
    a870:	20803fcc 	andi	r2,r4,255
    a874:	1080201c 	xori	r2,r2,128
    a878:	10bfe004 	addi	r2,r2,-128
    a87c:	10011e26 	beq	r2,zero,acf8 <___vfprintf_internal_r+0x4f8>
    a880:	00c00044 	movi	r3,1
    a884:	b8c01426 	beq	r23,r3,a8d8 <___vfprintf_internal_r+0xd8>
    a888:	1dc00216 	blt	r3,r23,a894 <___vfprintf_internal_r+0x94>
    a88c:	b8000626 	beq	r23,zero,a8a8 <___vfprintf_internal_r+0xa8>
    a890:	00011506 	br	ace8 <___vfprintf_internal_r+0x4e8>
    a894:	01400084 	movi	r5,2
    a898:	b9401d26 	beq	r23,r5,a910 <___vfprintf_internal_r+0x110>
    a89c:	014000c4 	movi	r5,3
    a8a0:	b9402b26 	beq	r23,r5,a950 <___vfprintf_internal_r+0x150>
    a8a4:	00011006 	br	ace8 <___vfprintf_internal_r+0x4e8>
    a8a8:	01400944 	movi	r5,37
    a8ac:	1140fc26 	beq	r2,r5,aca0 <___vfprintf_internal_r+0x4a0>
    a8b0:	88800117 	ldw	r2,4(r17)
    a8b4:	d9000005 	stb	r4,0(sp)
    a8b8:	01c00044 	movi	r7,1
    a8bc:	d80d883a 	mov	r6,sp
    a8c0:	880b883a 	mov	r5,r17
    a8c4:	a009883a 	mov	r4,r20
    a8c8:	103ee83a 	callr	r2
    a8cc:	1000d81e 	bne	r2,zero,ac30 <___vfprintf_internal_r+0x430>
    a8d0:	84000044 	addi	r16,r16,1
    a8d4:	00010406 	br	ace8 <___vfprintf_internal_r+0x4e8>
    a8d8:	01400c04 	movi	r5,48
    a8dc:	1140fa26 	beq	r2,r5,acc8 <___vfprintf_internal_r+0x4c8>
    a8e0:	01400944 	movi	r5,37
    a8e4:	11400a1e 	bne	r2,r5,a910 <___vfprintf_internal_r+0x110>
    a8e8:	d8800005 	stb	r2,0(sp)
    a8ec:	88800117 	ldw	r2,4(r17)
    a8f0:	b80f883a 	mov	r7,r23
    a8f4:	d80d883a 	mov	r6,sp
    a8f8:	880b883a 	mov	r5,r17
    a8fc:	a009883a 	mov	r4,r20
    a900:	103ee83a 	callr	r2
    a904:	1000ca1e 	bne	r2,zero,ac30 <___vfprintf_internal_r+0x430>
    a908:	84000044 	addi	r16,r16,1
    a90c:	0000f506 	br	ace4 <___vfprintf_internal_r+0x4e4>
    a910:	25fff404 	addi	r23,r4,-48
    a914:	bdc03fcc 	andi	r23,r23,255
    a918:	00c00244 	movi	r3,9
    a91c:	1dc00936 	bltu	r3,r23,a944 <___vfprintf_internal_r+0x144>
    a920:	00bfffc4 	movi	r2,-1
    a924:	90800426 	beq	r18,r2,a938 <___vfprintf_internal_r+0x138>
    a928:	01400284 	movi	r5,10
    a92c:	9009883a 	mov	r4,r18
    a930:	0009ea80 	call	9ea8 <__mulsi3>
    a934:	00000106 	br	a93c <___vfprintf_internal_r+0x13c>
    a938:	0005883a 	mov	r2,zero
    a93c:	b8a5883a 	add	r18,r23,r2
    a940:	0000e206 	br	accc <___vfprintf_internal_r+0x4cc>
    a944:	01400b84 	movi	r5,46
    a948:	1140e426 	beq	r2,r5,acdc <___vfprintf_internal_r+0x4dc>
    a94c:	05c00084 	movi	r23,2
    a950:	213ff404 	addi	r4,r4,-48
    a954:	27003fcc 	andi	fp,r4,255
    a958:	00c00244 	movi	r3,9
    a95c:	1f000936 	bltu	r3,fp,a984 <___vfprintf_internal_r+0x184>
    a960:	00bfffc4 	movi	r2,-1
    a964:	98800426 	beq	r19,r2,a978 <___vfprintf_internal_r+0x178>
    a968:	01400284 	movi	r5,10
    a96c:	9809883a 	mov	r4,r19
    a970:	0009ea80 	call	9ea8 <__mulsi3>
    a974:	00000106 	br	a97c <___vfprintf_internal_r+0x17c>
    a978:	0005883a 	mov	r2,zero
    a97c:	e0a7883a 	add	r19,fp,r2
    a980:	0000d906 	br	ace8 <___vfprintf_internal_r+0x4e8>
    a984:	00c01b04 	movi	r3,108
    a988:	10c0d226 	beq	r2,r3,acd4 <___vfprintf_internal_r+0x4d4>
    a98c:	013fffc4 	movi	r4,-1
    a990:	99000226 	beq	r19,r4,a99c <___vfprintf_internal_r+0x19c>
    a994:	d8000b15 	stw	zero,44(sp)
    a998:	00000106 	br	a9a0 <___vfprintf_internal_r+0x1a0>
    a99c:	04c00044 	movi	r19,1
    a9a0:	01001a44 	movi	r4,105
    a9a4:	11001626 	beq	r2,r4,aa00 <___vfprintf_internal_r+0x200>
    a9a8:	20800916 	blt	r4,r2,a9d0 <___vfprintf_internal_r+0x1d0>
    a9ac:	010018c4 	movi	r4,99
    a9b0:	11008826 	beq	r2,r4,abd4 <___vfprintf_internal_r+0x3d4>
    a9b4:	01001904 	movi	r4,100
    a9b8:	11001126 	beq	r2,r4,aa00 <___vfprintf_internal_r+0x200>
    a9bc:	01001604 	movi	r4,88
    a9c0:	1100c81e 	bne	r2,r4,ace4 <___vfprintf_internal_r+0x4e4>
    a9c4:	00c00044 	movi	r3,1
    a9c8:	d8c00e15 	stw	r3,56(sp)
    a9cc:	00001506 	br	aa24 <___vfprintf_internal_r+0x224>
    a9d0:	01001cc4 	movi	r4,115
    a9d4:	11009826 	beq	r2,r4,ac38 <___vfprintf_internal_r+0x438>
    a9d8:	20800416 	blt	r4,r2,a9ec <___vfprintf_internal_r+0x1ec>
    a9dc:	01001bc4 	movi	r4,111
    a9e0:	1100c01e 	bne	r2,r4,ace4 <___vfprintf_internal_r+0x4e4>
    a9e4:	05400204 	movi	r21,8
    a9e8:	00000f06 	br	aa28 <___vfprintf_internal_r+0x228>
    a9ec:	01001d44 	movi	r4,117
    a9f0:	11000d26 	beq	r2,r4,aa28 <___vfprintf_internal_r+0x228>
    a9f4:	01001e04 	movi	r4,120
    a9f8:	11000a26 	beq	r2,r4,aa24 <___vfprintf_internal_r+0x224>
    a9fc:	0000b906 	br	ace4 <___vfprintf_internal_r+0x4e4>
    aa00:	d8c00a17 	ldw	r3,40(sp)
    aa04:	b7000104 	addi	fp,r22,4
    aa08:	18000726 	beq	r3,zero,aa28 <___vfprintf_internal_r+0x228>
    aa0c:	df000d15 	stw	fp,52(sp)
    aa10:	b5c00017 	ldw	r23,0(r22)
    aa14:	b800080e 	bge	r23,zero,aa38 <___vfprintf_internal_r+0x238>
    aa18:	05efc83a 	sub	r23,zero,r23
    aa1c:	02400044 	movi	r9,1
    aa20:	00000606 	br	aa3c <___vfprintf_internal_r+0x23c>
    aa24:	05400404 	movi	r21,16
    aa28:	b0c00104 	addi	r3,r22,4
    aa2c:	d8c00d15 	stw	r3,52(sp)
    aa30:	b5c00017 	ldw	r23,0(r22)
    aa34:	d8000a15 	stw	zero,40(sp)
    aa38:	0013883a 	mov	r9,zero
    aa3c:	d839883a 	mov	fp,sp
    aa40:	b8001726 	beq	r23,zero,aaa0 <___vfprintf_internal_r+0x2a0>
    aa44:	a80b883a 	mov	r5,r21
    aa48:	b809883a 	mov	r4,r23
    aa4c:	da401015 	stw	r9,64(sp)
    aa50:	0008a300 	call	8a30 <__udivsi3>
    aa54:	a80b883a 	mov	r5,r21
    aa58:	1009883a 	mov	r4,r2
    aa5c:	102d883a 	mov	r22,r2
    aa60:	0009ea80 	call	9ea8 <__mulsi3>
    aa64:	b885c83a 	sub	r2,r23,r2
    aa68:	00c00244 	movi	r3,9
    aa6c:	da401017 	ldw	r9,64(sp)
    aa70:	18800216 	blt	r3,r2,aa7c <___vfprintf_internal_r+0x27c>
    aa74:	10800c04 	addi	r2,r2,48
    aa78:	00000506 	br	aa90 <___vfprintf_internal_r+0x290>
    aa7c:	d8c00e17 	ldw	r3,56(sp)
    aa80:	18000226 	beq	r3,zero,aa8c <___vfprintf_internal_r+0x28c>
    aa84:	10800dc4 	addi	r2,r2,55
    aa88:	00000106 	br	aa90 <___vfprintf_internal_r+0x290>
    aa8c:	108015c4 	addi	r2,r2,87
    aa90:	e0800005 	stb	r2,0(fp)
    aa94:	b02f883a 	mov	r23,r22
    aa98:	e7000044 	addi	fp,fp,1
    aa9c:	003fe806 	br	aa40 <_gp+0xffff7238>
    aaa0:	e6efc83a 	sub	r23,fp,sp
    aaa4:	9dc5c83a 	sub	r2,r19,r23
    aaa8:	0080090e 	bge	zero,r2,aad0 <___vfprintf_internal_r+0x2d0>
    aaac:	e085883a 	add	r2,fp,r2
    aab0:	01400c04 	movi	r5,48
    aab4:	d8c00917 	ldw	r3,36(sp)
    aab8:	e009883a 	mov	r4,fp
    aabc:	e0c0032e 	bgeu	fp,r3,aacc <___vfprintf_internal_r+0x2cc>
    aac0:	e7000044 	addi	fp,fp,1
    aac4:	21400005 	stb	r5,0(r4)
    aac8:	e0bffa1e 	bne	fp,r2,aab4 <_gp+0xffff72ac>
    aacc:	e6efc83a 	sub	r23,fp,sp
    aad0:	d8c00b17 	ldw	r3,44(sp)
    aad4:	4dd1883a 	add	r8,r9,r23
    aad8:	922dc83a 	sub	r22,r18,r8
    aadc:	18001626 	beq	r3,zero,ab38 <___vfprintf_internal_r+0x338>
    aae0:	48000a26 	beq	r9,zero,ab0c <___vfprintf_internal_r+0x30c>
    aae4:	00800b44 	movi	r2,45
    aae8:	d8800805 	stb	r2,32(sp)
    aaec:	88800117 	ldw	r2,4(r17)
    aaf0:	01c00044 	movi	r7,1
    aaf4:	d9800804 	addi	r6,sp,32
    aaf8:	880b883a 	mov	r5,r17
    aafc:	a009883a 	mov	r4,r20
    ab00:	103ee83a 	callr	r2
    ab04:	10004a1e 	bne	r2,zero,ac30 <___vfprintf_internal_r+0x430>
    ab08:	84000044 	addi	r16,r16,1
    ab0c:	0580070e 	bge	zero,r22,ab2c <___vfprintf_internal_r+0x32c>
    ab10:	b00f883a 	mov	r7,r22
    ab14:	01800c04 	movi	r6,48
    ab18:	880b883a 	mov	r5,r17
    ab1c:	a009883a 	mov	r4,r20
    ab20:	000a7940 	call	a794 <print_repeat>
    ab24:	1000421e 	bne	r2,zero,ac30 <___vfprintf_internal_r+0x430>
    ab28:	85a1883a 	add	r16,r16,r22
    ab2c:	e02d883a 	mov	r22,fp
    ab30:	bf2fc83a 	sub	r23,r23,fp
    ab34:	00002006 	br	abb8 <___vfprintf_internal_r+0x3b8>
    ab38:	0580090e 	bge	zero,r22,ab60 <___vfprintf_internal_r+0x360>
    ab3c:	b00f883a 	mov	r7,r22
    ab40:	01800804 	movi	r6,32
    ab44:	880b883a 	mov	r5,r17
    ab48:	a009883a 	mov	r4,r20
    ab4c:	da401015 	stw	r9,64(sp)
    ab50:	000a7940 	call	a794 <print_repeat>
    ab54:	da401017 	ldw	r9,64(sp)
    ab58:	1000351e 	bne	r2,zero,ac30 <___vfprintf_internal_r+0x430>
    ab5c:	85a1883a 	add	r16,r16,r22
    ab60:	483ff226 	beq	r9,zero,ab2c <_gp+0xffff7324>
    ab64:	00800b44 	movi	r2,45
    ab68:	d8800805 	stb	r2,32(sp)
    ab6c:	88800117 	ldw	r2,4(r17)
    ab70:	01c00044 	movi	r7,1
    ab74:	d9800804 	addi	r6,sp,32
    ab78:	880b883a 	mov	r5,r17
    ab7c:	a009883a 	mov	r4,r20
    ab80:	103ee83a 	callr	r2
    ab84:	10002a1e 	bne	r2,zero,ac30 <___vfprintf_internal_r+0x430>
    ab88:	84000044 	addi	r16,r16,1
    ab8c:	003fe706 	br	ab2c <_gp+0xffff7324>
    ab90:	b5bfffc4 	addi	r22,r22,-1
    ab94:	b0800003 	ldbu	r2,0(r22)
    ab98:	01c00044 	movi	r7,1
    ab9c:	d9800804 	addi	r6,sp,32
    aba0:	d8800805 	stb	r2,32(sp)
    aba4:	88800117 	ldw	r2,4(r17)
    aba8:	880b883a 	mov	r5,r17
    abac:	a009883a 	mov	r4,r20
    abb0:	103ee83a 	callr	r2
    abb4:	10001e1e 	bne	r2,zero,ac30 <___vfprintf_internal_r+0x430>
    abb8:	8585c83a 	sub	r2,r16,r22
    abbc:	b5c9883a 	add	r4,r22,r23
    abc0:	e085883a 	add	r2,fp,r2
    abc4:	013ff216 	blt	zero,r4,ab90 <_gp+0xffff7388>
    abc8:	1021883a 	mov	r16,r2
    abcc:	dd800d17 	ldw	r22,52(sp)
    abd0:	00004406 	br	ace4 <___vfprintf_internal_r+0x4e4>
    abd4:	00800044 	movi	r2,1
    abd8:	1480080e 	bge	r2,r18,abfc <___vfprintf_internal_r+0x3fc>
    abdc:	95ffffc4 	addi	r23,r18,-1
    abe0:	b80f883a 	mov	r7,r23
    abe4:	01800804 	movi	r6,32
    abe8:	880b883a 	mov	r5,r17
    abec:	a009883a 	mov	r4,r20
    abf0:	000a7940 	call	a794 <print_repeat>
    abf4:	10000e1e 	bne	r2,zero,ac30 <___vfprintf_internal_r+0x430>
    abf8:	85e1883a 	add	r16,r16,r23
    abfc:	b0800017 	ldw	r2,0(r22)
    ac00:	01c00044 	movi	r7,1
    ac04:	d80d883a 	mov	r6,sp
    ac08:	d8800005 	stb	r2,0(sp)
    ac0c:	88800117 	ldw	r2,4(r17)
    ac10:	880b883a 	mov	r5,r17
    ac14:	a009883a 	mov	r4,r20
    ac18:	b5c00104 	addi	r23,r22,4
    ac1c:	103ee83a 	callr	r2
    ac20:	1000031e 	bne	r2,zero,ac30 <___vfprintf_internal_r+0x430>
    ac24:	84000044 	addi	r16,r16,1
    ac28:	b82d883a 	mov	r22,r23
    ac2c:	00002d06 	br	ace4 <___vfprintf_internal_r+0x4e4>
    ac30:	00bfffc4 	movi	r2,-1
    ac34:	00003106 	br	acfc <___vfprintf_internal_r+0x4fc>
    ac38:	b5c00017 	ldw	r23,0(r22)
    ac3c:	b7000104 	addi	fp,r22,4
    ac40:	b809883a 	mov	r4,r23
    ac44:	000a1c40 	call	a1c4 <strlen>
    ac48:	9091c83a 	sub	r8,r18,r2
    ac4c:	102d883a 	mov	r22,r2
    ac50:	0200090e 	bge	zero,r8,ac78 <___vfprintf_internal_r+0x478>
    ac54:	400f883a 	mov	r7,r8
    ac58:	01800804 	movi	r6,32
    ac5c:	880b883a 	mov	r5,r17
    ac60:	a009883a 	mov	r4,r20
    ac64:	da001015 	stw	r8,64(sp)
    ac68:	000a7940 	call	a794 <print_repeat>
    ac6c:	da001017 	ldw	r8,64(sp)
    ac70:	103fef1e 	bne	r2,zero,ac30 <_gp+0xffff7428>
    ac74:	8221883a 	add	r16,r16,r8
    ac78:	88800117 	ldw	r2,4(r17)
    ac7c:	b00f883a 	mov	r7,r22
    ac80:	b80d883a 	mov	r6,r23
    ac84:	880b883a 	mov	r5,r17
    ac88:	a009883a 	mov	r4,r20
    ac8c:	103ee83a 	callr	r2
    ac90:	103fe71e 	bne	r2,zero,ac30 <_gp+0xffff7428>
    ac94:	85a1883a 	add	r16,r16,r22
    ac98:	e02d883a 	mov	r22,fp
    ac9c:	00001106 	br	ace4 <___vfprintf_internal_r+0x4e4>
    aca0:	00c00044 	movi	r3,1
    aca4:	04ffffc4 	movi	r19,-1
    aca8:	d8000e15 	stw	zero,56(sp)
    acac:	d8c00a15 	stw	r3,40(sp)
    acb0:	05400284 	movi	r21,10
    acb4:	9825883a 	mov	r18,r19
    acb8:	d8000c15 	stw	zero,48(sp)
    acbc:	d8000b15 	stw	zero,44(sp)
    acc0:	182f883a 	mov	r23,r3
    acc4:	00000806 	br	ace8 <___vfprintf_internal_r+0x4e8>
    acc8:	ddc00b15 	stw	r23,44(sp)
    accc:	05c00084 	movi	r23,2
    acd0:	00000506 	br	ace8 <___vfprintf_internal_r+0x4e8>
    acd4:	00c00044 	movi	r3,1
    acd8:	d8c00c15 	stw	r3,48(sp)
    acdc:	05c000c4 	movi	r23,3
    ace0:	00000106 	br	ace8 <___vfprintf_internal_r+0x4e8>
    ace4:	002f883a 	mov	r23,zero
    ace8:	d8c00f17 	ldw	r3,60(sp)
    acec:	18c00044 	addi	r3,r3,1
    acf0:	d8c00f15 	stw	r3,60(sp)
    acf4:	003edc06 	br	a868 <_gp+0xffff7060>
    acf8:	8005883a 	mov	r2,r16
    acfc:	dfc01a17 	ldw	ra,104(sp)
    ad00:	df001917 	ldw	fp,100(sp)
    ad04:	ddc01817 	ldw	r23,96(sp)
    ad08:	dd801717 	ldw	r22,92(sp)
    ad0c:	dd401617 	ldw	r21,88(sp)
    ad10:	dd001517 	ldw	r20,84(sp)
    ad14:	dcc01417 	ldw	r19,80(sp)
    ad18:	dc801317 	ldw	r18,76(sp)
    ad1c:	dc401217 	ldw	r17,72(sp)
    ad20:	dc001117 	ldw	r16,68(sp)
    ad24:	dec01b04 	addi	sp,sp,108
    ad28:	f800283a 	ret

0000ad2c <__vfprintf_internal>:
    ad2c:	00800074 	movhi	r2,1
    ad30:	10ae0404 	addi	r2,r2,-18416
    ad34:	300f883a 	mov	r7,r6
    ad38:	280d883a 	mov	r6,r5
    ad3c:	200b883a 	mov	r5,r4
    ad40:	11000017 	ldw	r4,0(r2)
    ad44:	000a8001 	jmpi	a800 <___vfprintf_internal_r>

0000ad48 <__sfvwrite_small_dev>:
    ad48:	2880000b 	ldhu	r2,0(r5)
    ad4c:	1080020c 	andi	r2,r2,8
    ad50:	10002126 	beq	r2,zero,add8 <__sfvwrite_small_dev+0x90>
    ad54:	2880008f 	ldh	r2,2(r5)
    ad58:	defffa04 	addi	sp,sp,-24
    ad5c:	dc000015 	stw	r16,0(sp)
    ad60:	dfc00515 	stw	ra,20(sp)
    ad64:	dd000415 	stw	r20,16(sp)
    ad68:	dcc00315 	stw	r19,12(sp)
    ad6c:	dc800215 	stw	r18,8(sp)
    ad70:	dc400115 	stw	r17,4(sp)
    ad74:	2821883a 	mov	r16,r5
    ad78:	10001216 	blt	r2,zero,adc4 <__sfvwrite_small_dev+0x7c>
    ad7c:	2027883a 	mov	r19,r4
    ad80:	3025883a 	mov	r18,r6
    ad84:	3823883a 	mov	r17,r7
    ad88:	05010004 	movi	r20,1024
    ad8c:	04400b0e 	bge	zero,r17,adbc <__sfvwrite_small_dev+0x74>
    ad90:	880f883a 	mov	r7,r17
    ad94:	a440010e 	bge	r20,r17,ad9c <__sfvwrite_small_dev+0x54>
    ad98:	01c10004 	movi	r7,1024
    ad9c:	8140008f 	ldh	r5,2(r16)
    ada0:	900d883a 	mov	r6,r18
    ada4:	9809883a 	mov	r4,r19
    ada8:	000afb40 	call	afb4 <_write_r>
    adac:	0080050e 	bge	zero,r2,adc4 <__sfvwrite_small_dev+0x7c>
    adb0:	88a3c83a 	sub	r17,r17,r2
    adb4:	90a5883a 	add	r18,r18,r2
    adb8:	003ff406 	br	ad8c <_gp+0xffff7584>
    adbc:	0005883a 	mov	r2,zero
    adc0:	00000706 	br	ade0 <__sfvwrite_small_dev+0x98>
    adc4:	8080000b 	ldhu	r2,0(r16)
    adc8:	10801014 	ori	r2,r2,64
    adcc:	8080000d 	sth	r2,0(r16)
    add0:	00bfffc4 	movi	r2,-1
    add4:	00000206 	br	ade0 <__sfvwrite_small_dev+0x98>
    add8:	00bfffc4 	movi	r2,-1
    addc:	f800283a 	ret
    ade0:	dfc00517 	ldw	ra,20(sp)
    ade4:	dd000417 	ldw	r20,16(sp)
    ade8:	dcc00317 	ldw	r19,12(sp)
    adec:	dc800217 	ldw	r18,8(sp)
    adf0:	dc400117 	ldw	r17,4(sp)
    adf4:	dc000017 	ldw	r16,0(sp)
    adf8:	dec00604 	addi	sp,sp,24
    adfc:	f800283a 	ret

0000ae00 <__sfvwrite_small_str>:
    ae00:	2880000b 	ldhu	r2,0(r5)
    ae04:	10c0020c 	andi	r3,r2,8
    ae08:	18002026 	beq	r3,zero,ae8c <__sfvwrite_small_str+0x8c>
    ae0c:	28c0008f 	ldh	r3,2(r5)
    ae10:	defffd04 	addi	sp,sp,-12
    ae14:	dc000015 	stw	r16,0(sp)
    ae18:	dfc00215 	stw	ra,8(sp)
    ae1c:	dc400115 	stw	r17,4(sp)
    ae20:	2821883a 	mov	r16,r5
    ae24:	1800150e 	bge	r3,zero,ae7c <__sfvwrite_small_str+0x7c>
    ae28:	10c0800c 	andi	r3,r2,512
    ae2c:	18001326 	beq	r3,zero,ae7c <__sfvwrite_small_str+0x7c>
    ae30:	2c400517 	ldw	r17,20(r5)
    ae34:	89c0030e 	bge	r17,r7,ae44 <__sfvwrite_small_str+0x44>
    ae38:	10c0200c 	andi	r3,r2,128
    ae3c:	18000326 	beq	r3,zero,ae4c <__sfvwrite_small_str+0x4c>
    ae40:	00000e06 	br	ae7c <__sfvwrite_small_str+0x7c>
    ae44:	3c40010e 	bge	r7,r17,ae4c <__sfvwrite_small_str+0x4c>
    ae48:	3823883a 	mov	r17,r7
    ae4c:	81000417 	ldw	r4,16(r16)
    ae50:	300b883a 	mov	r5,r6
    ae54:	880d883a 	mov	r6,r17
    ae58:	000aea80 	call	aea8 <memmove>
    ae5c:	80800517 	ldw	r2,20(r16)
    ae60:	1445c83a 	sub	r2,r2,r17
    ae64:	80800515 	stw	r2,20(r16)
    ae68:	80800417 	ldw	r2,16(r16)
    ae6c:	1463883a 	add	r17,r2,r17
    ae70:	84400415 	stw	r17,16(r16)
    ae74:	0005883a 	mov	r2,zero
    ae78:	00000606 	br	ae94 <__sfvwrite_small_str+0x94>
    ae7c:	10801014 	ori	r2,r2,64
    ae80:	8080000d 	sth	r2,0(r16)
    ae84:	00bfffc4 	movi	r2,-1
    ae88:	00000206 	br	ae94 <__sfvwrite_small_str+0x94>
    ae8c:	00bfffc4 	movi	r2,-1
    ae90:	f800283a 	ret
    ae94:	dfc00217 	ldw	ra,8(sp)
    ae98:	dc400117 	ldw	r17,4(sp)
    ae9c:	dc000017 	ldw	r16,0(sp)
    aea0:	dec00304 	addi	sp,sp,12
    aea4:	f800283a 	ret

0000aea8 <memmove>:
    aea8:	2005883a 	mov	r2,r4
    aeac:	218f883a 	add	r7,r4,r6
    aeb0:	29000236 	bltu	r5,r4,aebc <memmove+0x14>
    aeb4:	1007883a 	mov	r3,r2
    aeb8:	00000c06 	br	aeec <memmove+0x44>
    aebc:	2987883a 	add	r3,r5,r6
    aec0:	20fffc2e 	bgeu	r4,r3,aeb4 <_gp+0xffff76ac>
    aec4:	380b883a 	mov	r5,r7
    aec8:	30cdc83a 	sub	r6,r6,r3
    aecc:	1989883a 	add	r4,r3,r6
    aed0:	20000526 	beq	r4,zero,aee8 <memmove+0x40>
    aed4:	18ffffc4 	addi	r3,r3,-1
    aed8:	19000003 	ldbu	r4,0(r3)
    aedc:	297fffc4 	addi	r5,r5,-1
    aee0:	29000005 	stb	r4,0(r5)
    aee4:	003ff906 	br	aecc <_gp+0xffff76c4>
    aee8:	f800283a 	ret
    aeec:	19c00526 	beq	r3,r7,af04 <memmove+0x5c>
    aef0:	29000003 	ldbu	r4,0(r5)
    aef4:	18c00044 	addi	r3,r3,1
    aef8:	29400044 	addi	r5,r5,1
    aefc:	193fffc5 	stb	r4,-1(r3)
    af00:	003ffa06 	br	aeec <_gp+0xffff76e4>
    af04:	f800283a 	ret

0000af08 <putc>:
    af08:	defffd04 	addi	sp,sp,-12
    af0c:	00800074 	movhi	r2,1
    af10:	dc000115 	stw	r16,4(sp)
    af14:	dfc00215 	stw	ra,8(sp)
    af18:	10ab5204 	addi	r2,r2,-21176
    af1c:	28800115 	stw	r2,4(r5)
    af20:	00800074 	movhi	r2,1
    af24:	10ae0404 	addi	r2,r2,-18416
    af28:	d9000005 	stb	r4,0(sp)
    af2c:	2021883a 	mov	r16,r4
    af30:	11000017 	ldw	r4,0(r2)
    af34:	01c00044 	movi	r7,1
    af38:	d80d883a 	mov	r6,sp
    af3c:	000ad480 	call	ad48 <__sfvwrite_small_dev>
    af40:	00ffffc4 	movi	r3,-1
    af44:	10c00126 	beq	r2,r3,af4c <putc+0x44>
    af48:	8005883a 	mov	r2,r16
    af4c:	dfc00217 	ldw	ra,8(sp)
    af50:	dc000117 	ldw	r16,4(sp)
    af54:	dec00304 	addi	sp,sp,12
    af58:	f800283a 	ret

0000af5c <_putc_r>:
    af5c:	defffd04 	addi	sp,sp,-12
    af60:	00800074 	movhi	r2,1
    af64:	dc000115 	stw	r16,4(sp)
    af68:	dfc00215 	stw	ra,8(sp)
    af6c:	10ab5204 	addi	r2,r2,-21176
    af70:	30800115 	stw	r2,4(r6)
    af74:	00800074 	movhi	r2,1
    af78:	10ae0404 	addi	r2,r2,-18416
    af7c:	11000017 	ldw	r4,0(r2)
    af80:	2821883a 	mov	r16,r5
    af84:	01c00044 	movi	r7,1
    af88:	300b883a 	mov	r5,r6
    af8c:	d80d883a 	mov	r6,sp
    af90:	dc000005 	stb	r16,0(sp)
    af94:	000ad480 	call	ad48 <__sfvwrite_small_dev>
    af98:	00ffffc4 	movi	r3,-1
    af9c:	10c00126 	beq	r2,r3,afa4 <_putc_r+0x48>
    afa0:	8005883a 	mov	r2,r16
    afa4:	dfc00217 	ldw	ra,8(sp)
    afa8:	dc000117 	ldw	r16,4(sp)
    afac:	dec00304 	addi	sp,sp,12
    afb0:	f800283a 	ret

0000afb4 <_write_r>:
    afb4:	defffd04 	addi	sp,sp,-12
    afb8:	dc000015 	stw	r16,0(sp)
    afbc:	04000074 	movhi	r16,1
    afc0:	dc400115 	stw	r17,4(sp)
    afc4:	842e6d04 	addi	r16,r16,-17996
    afc8:	2023883a 	mov	r17,r4
    afcc:	2809883a 	mov	r4,r5
    afd0:	300b883a 	mov	r5,r6
    afd4:	380d883a 	mov	r6,r7
    afd8:	dfc00215 	stw	ra,8(sp)
    afdc:	80000015 	stw	zero,0(r16)
    afe0:	000b2680 	call	b268 <write>
    afe4:	00ffffc4 	movi	r3,-1
    afe8:	10c0031e 	bne	r2,r3,aff8 <_write_r+0x44>
    afec:	80c00017 	ldw	r3,0(r16)
    aff0:	18000126 	beq	r3,zero,aff8 <_write_r+0x44>
    aff4:	88c00015 	stw	r3,0(r17)
    aff8:	dfc00217 	ldw	ra,8(sp)
    affc:	dc400117 	ldw	r17,4(sp)
    b000:	dc000017 	ldw	r16,0(sp)
    b004:	dec00304 	addi	sp,sp,12
    b008:	f800283a 	ret

0000b00c <__muldi3>:
    b00c:	defff604 	addi	sp,sp,-40
    b010:	dd800615 	stw	r22,24(sp)
    b014:	dd400515 	stw	r21,20(sp)
    b018:	dc400115 	stw	r17,4(sp)
    b01c:	357fffcc 	andi	r21,r6,65535
    b020:	2022d43a 	srli	r17,r4,16
    b024:	25bfffcc 	andi	r22,r4,65535
    b028:	dcc00315 	stw	r19,12(sp)
    b02c:	dc800215 	stw	r18,8(sp)
    b030:	2027883a 	mov	r19,r4
    b034:	2825883a 	mov	r18,r5
    b038:	b009883a 	mov	r4,r22
    b03c:	a80b883a 	mov	r5,r21
    b040:	dfc00915 	stw	ra,36(sp)
    b044:	df000815 	stw	fp,32(sp)
    b048:	ddc00715 	stw	r23,28(sp)
    b04c:	3839883a 	mov	fp,r7
    b050:	302ed43a 	srli	r23,r6,16
    b054:	dd000415 	stw	r20,16(sp)
    b058:	dc000015 	stw	r16,0(sp)
    b05c:	3029883a 	mov	r20,r6
    b060:	0009ea80 	call	9ea8 <__mulsi3>
    b064:	a80b883a 	mov	r5,r21
    b068:	8809883a 	mov	r4,r17
    b06c:	1021883a 	mov	r16,r2
    b070:	0009ea80 	call	9ea8 <__mulsi3>
    b074:	8809883a 	mov	r4,r17
    b078:	b80b883a 	mov	r5,r23
    b07c:	102b883a 	mov	r21,r2
    b080:	0009ea80 	call	9ea8 <__mulsi3>
    b084:	b80b883a 	mov	r5,r23
    b088:	b009883a 	mov	r4,r22
    b08c:	1023883a 	mov	r17,r2
    b090:	0009ea80 	call	9ea8 <__mulsi3>
    b094:	8006d43a 	srli	r3,r16,16
    b098:	1545883a 	add	r2,r2,r21
    b09c:	1885883a 	add	r2,r3,r2
    b0a0:	1540022e 	bgeu	r2,r21,b0ac <__muldi3+0xa0>
    b0a4:	00c00074 	movhi	r3,1
    b0a8:	88e3883a 	add	r17,r17,r3
    b0ac:	1006d43a 	srli	r3,r2,16
    b0b0:	1004943a 	slli	r2,r2,16
    b0b4:	e00b883a 	mov	r5,fp
    b0b8:	9809883a 	mov	r4,r19
    b0bc:	843fffcc 	andi	r16,r16,65535
    b0c0:	1c63883a 	add	r17,r3,r17
    b0c4:	1421883a 	add	r16,r2,r16
    b0c8:	0009ea80 	call	9ea8 <__mulsi3>
    b0cc:	900b883a 	mov	r5,r18
    b0d0:	a009883a 	mov	r4,r20
    b0d4:	1027883a 	mov	r19,r2
    b0d8:	0009ea80 	call	9ea8 <__mulsi3>
    b0dc:	9885883a 	add	r2,r19,r2
    b0e0:	1447883a 	add	r3,r2,r17
    b0e4:	8005883a 	mov	r2,r16
    b0e8:	dfc00917 	ldw	ra,36(sp)
    b0ec:	df000817 	ldw	fp,32(sp)
    b0f0:	ddc00717 	ldw	r23,28(sp)
    b0f4:	dd800617 	ldw	r22,24(sp)
    b0f8:	dd400517 	ldw	r21,20(sp)
    b0fc:	dd000417 	ldw	r20,16(sp)
    b100:	dcc00317 	ldw	r19,12(sp)
    b104:	dc800217 	ldw	r18,8(sp)
    b108:	dc400117 	ldw	r17,4(sp)
    b10c:	dc000017 	ldw	r16,0(sp)
    b110:	dec00a04 	addi	sp,sp,40
    b114:	f800283a 	ret

0000b118 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    b118:	00800074 	movhi	r2,1
    b11c:	10adec04 	addi	r2,r2,-18512
    b120:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    b124:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    b128:	01000074 	movhi	r4,1
    b12c:	01800044 	movi	r6,1
    b130:	d80b883a 	mov	r5,sp
    b134:	212e0604 	addi	r4,r4,-18408
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    b138:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    b13c:	000b2ec0 	call	b2ec <altera_avalon_jtag_uart_read>
    b140:	0080020e 	bge	zero,r2,b14c <alt_getchar+0x34>
        return -1;
    }
    return c;
    b144:	d8800007 	ldb	r2,0(sp)
    b148:	00000106 	br	b150 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
    b14c:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
    b150:	dfc00117 	ldw	ra,4(sp)
    b154:	dec00204 	addi	sp,sp,8
    b158:	f800283a 	ret

0000b15c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    b15c:	deffff04 	addi	sp,sp,-4
    b160:	01000074 	movhi	r4,1
    b164:	01400074 	movhi	r5,1
    b168:	dfc00015 	stw	ra,0(sp)
    b16c:	212db404 	addi	r4,r4,-18736
    b170:	296e0d04 	addi	r5,r5,-18380

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    b174:	2140061e 	bne	r4,r5,b190 <alt_load+0x34>
    b178:	01000074 	movhi	r4,1
    b17c:	01400074 	movhi	r5,1
    b180:	21200804 	addi	r4,r4,-32736
    b184:	29600804 	addi	r5,r5,-32736
    b188:	2140121e 	bne	r4,r5,b1d4 <alt_load+0x78>
    b18c:	00000b06 	br	b1bc <alt_load+0x60>
    b190:	00c00074 	movhi	r3,1
    b194:	18ee0d04 	addi	r3,r3,-18380
    b198:	1907c83a 	sub	r3,r3,r4
    b19c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    b1a0:	10fff526 	beq	r2,r3,b178 <_gp+0xffff7970>
    {
      *to++ = *from++;
    b1a4:	114f883a 	add	r7,r2,r5
    b1a8:	39c00017 	ldw	r7,0(r7)
    b1ac:	110d883a 	add	r6,r2,r4
    b1b0:	10800104 	addi	r2,r2,4
    b1b4:	31c00015 	stw	r7,0(r6)
    b1b8:	003ff906 	br	b1a0 <_gp+0xffff7998>
    b1bc:	01000074 	movhi	r4,1
    b1c0:	01400074 	movhi	r5,1
    b1c4:	212ce504 	addi	r4,r4,-19564
    b1c8:	296ce504 	addi	r5,r5,-19564

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    b1cc:	2140101e 	bne	r4,r5,b210 <alt_load+0xb4>
    b1d0:	00000b06 	br	b200 <alt_load+0xa4>
    b1d4:	00c00074 	movhi	r3,1
    b1d8:	18e00804 	addi	r3,r3,-32736
    b1dc:	1907c83a 	sub	r3,r3,r4
    b1e0:	0005883a 	mov	r2,zero
  {
    while( to != end )
    b1e4:	10fff526 	beq	r2,r3,b1bc <_gp+0xffff79b4>
    {
      *to++ = *from++;
    b1e8:	114f883a 	add	r7,r2,r5
    b1ec:	39c00017 	ldw	r7,0(r7)
    b1f0:	110d883a 	add	r6,r2,r4
    b1f4:	10800104 	addi	r2,r2,4
    b1f8:	31c00015 	stw	r7,0(r6)
    b1fc:	003ff906 	br	b1e4 <_gp+0xffff79dc>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    b200:	000b37c0 	call	b37c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    b204:	dfc00017 	ldw	ra,0(sp)
    b208:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    b20c:	000b3881 	jmpi	b388 <alt_icache_flush_all>
    b210:	00c00074 	movhi	r3,1
    b214:	18edb404 	addi	r3,r3,-18736
    b218:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    b21c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    b220:	18bff726 	beq	r3,r2,b200 <_gp+0xffff79f8>
    {
      *to++ = *from++;
    b224:	114f883a 	add	r7,r2,r5
    b228:	39c00017 	ldw	r7,0(r7)
    b22c:	110d883a 	add	r6,r2,r4
    b230:	10800104 	addi	r2,r2,4
    b234:	31c00015 	stw	r7,0(r6)
    b238:	003ff906 	br	b220 <_gp+0xffff7a18>

0000b23c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    b23c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    b240:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    b244:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    b248:	000b2c80 	call	b2c8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    b24c:	000b2e80 	call	b2e8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    b250:	d1a06c17 	ldw	r6,-32336(gp)
    b254:	d1606d17 	ldw	r5,-32332(gp)
    b258:	d1206e17 	ldw	r4,-32328(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    b25c:	dfc00017 	ldw	ra,0(sp)
    b260:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    b264:	00084701 	jmpi	8470 <main>

0000b268 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    b268:	00800044 	movi	r2,1
    b26c:	20800226 	beq	r4,r2,b278 <write+0x10>
    b270:	00800084 	movi	r2,2
    b274:	2080041e 	bne	r4,r2,b288 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    b278:	01000074 	movhi	r4,1
    b27c:	000f883a 	mov	r7,zero
    b280:	212e0604 	addi	r4,r4,-18408
    b284:	000b3481 	jmpi	b348 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    b288:	d0a00a17 	ldw	r2,-32728(gp)
    b28c:	10000926 	beq	r2,zero,b2b4 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    b290:	deffff04 	addi	sp,sp,-4
    b294:	dfc00015 	stw	ra,0(sp)
    b298:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    b29c:	00c01444 	movi	r3,81
    b2a0:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    b2a4:	00bfffc4 	movi	r2,-1
    b2a8:	dfc00017 	ldw	ra,0(sp)
    b2ac:	dec00104 	addi	sp,sp,4
    b2b0:	f800283a 	ret
    b2b4:	d0a06b04 	addi	r2,gp,-32340
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    b2b8:	00c01444 	movi	r3,81
    b2bc:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    b2c0:	00bfffc4 	movi	r2,-1
    b2c4:	f800283a 	ret

0000b2c8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    b2c8:	deffff04 	addi	sp,sp,-4
    b2cc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    b2d0:	000b38c0 	call	b38c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    b2d4:	00800044 	movi	r2,1
    b2d8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    b2dc:	dfc00017 	ldw	ra,0(sp)
    b2e0:	dec00104 	addi	sp,sp,4
    b2e4:	f800283a 	ret

0000b2e8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    b2e8:	f800283a 	ret

0000b2ec <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
    b2ec:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
    b2f0:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    b2f4:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    b2f8:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    b2fc:	11800b2e 	bgeu	r2,r6,b32c <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    b300:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    b304:	1a60000c 	andi	r9,r3,32768
    b308:	48000326 	beq	r9,zero,b318 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    b30c:	10c00005 	stb	r3,0(r2)
    b310:	10800044 	addi	r2,r2,1
    b314:	003ff906 	br	b2fc <_gp+0xffff7af4>
    else if (ptr != buffer)
    b318:	11400226 	beq	r2,r5,b324 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
    b31c:	1145c83a 	sub	r2,r2,r5
    b320:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    b324:	403ff526 	beq	r8,zero,b2fc <_gp+0xffff7af4>
    b328:	00000106 	br	b330 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
    b32c:	117ffb1e 	bne	r2,r5,b31c <_gp+0xffff7b14>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    b330:	39d0000c 	andi	r7,r7,16384
    b334:	3800021e 	bne	r7,zero,b340 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
    b338:	00bffec4 	movi	r2,-5
    b33c:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    b340:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
    b344:	f800283a 	ret

0000b348 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    b348:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    b34c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    b350:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    b354:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    b358:	2980072e 	bgeu	r5,r6,b378 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    b35c:	38c00037 	ldwio	r3,0(r7)
    b360:	18ffffec 	andhi	r3,r3,65535
    b364:	183ffc26 	beq	r3,zero,b358 <_gp+0xffff7b50>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    b368:	28c00007 	ldb	r3,0(r5)
    b36c:	20c00035 	stwio	r3,0(r4)
    b370:	29400044 	addi	r5,r5,1
    b374:	003ff806 	br	b358 <_gp+0xffff7b50>

  return count;
}
    b378:	f800283a 	ret

0000b37c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    b37c:	f800283a 	ret

0000b380 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    b380:	3005883a 	mov	r2,r6
    b384:	f800283a 	ret

0000b388 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    b388:	f800283a 	ret

0000b38c <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    b38c:	000170fa 	wrctl	ienable,zero
    b390:	f800283a 	ret
