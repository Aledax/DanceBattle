
slave_de1.elf:     file format elf32-littlenios2
slave_de1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x00000dc4 memsz 0x00000dc4 flags r-x
    LOAD off    0x00001de4 vaddr 0x00001de4 paddr 0x00001ed8 align 2**12
         filesz 0x000000f4 memsz 0x000000f4 flags rw-
    LOAD off    0x00001fcc vaddr 0x00001fcc paddr 0x00001fcc align 2**12
         filesz 0x00000000 memsz 0x00000014 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00001020  00001020  00001ed8  2**0
                  CONTENTS
  2 .text         00000d5c  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000068  00001d7c  00001d7c  00001d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f4  00001de4  00001ed8  00001de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000014  00001fcc  00001fcc  00001fcc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00001fe0  00001fe0  00001ed8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001ed8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002e0  00000000  00000000  00001f00  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000441a  00000000  00000000  000021e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001709  00000000  00000000  000065fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001992  00000000  00000000  00007d03  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000444  00000000  00000000  00009698  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000010c9  00000000  00000000  00009adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000015b1  00000000  00000000  0000aba5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000c158  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000288  00000000  00000000  0000c168  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000d54e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000d551  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000d55d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000d55e  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0000d55f  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000d56a  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0000d575  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  0000d580  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000030  00000000  00000000  0000d58c  2**0
                  CONTENTS, READONLY
 26 .jdi          000053cc  00000000  00000000  0000d5bc  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003860c  00000000  00000000  00012988  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001020 l    d  .text	00000000 .text
00001d7c l    d  .rodata	00000000 .rodata
00001de4 l    d  .rwdata	00000000 .rwdata
00001fcc l    d  .bss	00000000 .bss
00001fe0 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../slave_de1_bsp//obj/HAL/src/crt0.o
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 vfprintf.c
00001240 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00001de4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00001224 g     F .text	0000001c putchar
00001c88 g     F .text	0000002c alt_main
00001ed8 g       *ABS*	00000000 __flash_rwdata_start
000011d0 g     F .text	0000004c printf
00001d74 g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
00001fd0 g     O .bss	00000004 errno
00001fd8 g     O .bss	00000004 alt_argv
00009ec4 g       *ABS*	00000000 _gp
0000121c g     F .text	00000008 _putchar_r
00001194 g     F .text	0000003c _printf_r
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00001ac4 g     F .text	00000064 .hidden __udivsi3
0000105c g     F .text	00000030 getFrame
00001ec4 g     O .rwdata	00000004 _global_impure_ptr
00001fe0 g       *ABS*	00000000 __bss_end
00001d6c g     F .text	00000004 alt_dcache_flush_all
00001ed8 g       *ABS*	00000000 __ram_rwdata_end
00001cb4 g     F .text	00000060 write
00001900 g     F .text	00000058 _putc_r
00001de4 g       *ABS*	00000000 __ram_rodata_end
00001ed0 g     O .rwdata	00000004 jtag_uart_0
00001b28 g     F .text	00000058 .hidden __umodsi3
00001fe0 g       *ABS*	00000000 end
00001124 g     F .text	0000003c writeThresholds
00002000 g       *ABS*	00000000 __alt_stack_pointer
00001d38 g     F .text	00000034 altera_avalon_jtag_uart_write
000012ac g     F .text	0000052c ___vfprintf_internal_r
00001020 g     F .text	0000003c _start
00001d34 g     F .text	00000004 alt_sys_init
00001b80 g     F .text	00000028 .hidden __mulsi3
00001de4 g       *ABS*	00000000 __ram_rwdata_start
00001d7c g       *ABS*	00000000 __ram_rodata_start
0000108c g     F .text	00000068 printCoords
00001fcc g     O .bss	00000004 camera_base
00001fe0 g       *ABS*	00000000 __alt_stack_base
000017f4 g     F .text	000000b8 __sfvwrite_small_dev
00001fcc g       *ABS*	00000000 __bss_start
00001160 g     F .text	00000034 main
00001fd4 g     O .bss	00000004 alt_envp
00001ecc g     O .rwdata	00000004 uart_0
00001ed4 g     O .rwdata	00000004 alt_errno
000018ac g     F .text	00000054 putc
000019cc g     F .text	00000084 .hidden __divsi3
00001d7c g       *ABS*	00000000 __flash_rodata_start
00001d14 g     F .text	00000020 alt_irq_init
00001974 g     F .text	00000058 _write_r
000010f4 g     F .text	00000030 printThresholds
00001ec8 g     O .rwdata	00000004 _impure_ptr
00001fdc g     O .bss	00000004 alt_argc
00001020 g       *ABS*	00000000 __ram_exceptions_start
00001ed8 g       *ABS*	00000000 _edata
00001fe0 g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
00001a50 g     F .text	00000074 .hidden __modsi3
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
00001958 g     F .text	0000001c strlen
00001d70 g     F .text	00000004 alt_icache_flush_all
000017d8 g     F .text	0000001c __vfprintf_internal
00001ba8 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a7b114 	ori	gp,gp,40644
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	1087f314 	ori	r2,r2,8140

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c7f814 	ori	r3,r3,8160

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_gp+0xffff7180>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	0001ba80 	call	1ba8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	0001c880 	call	1c88 <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <_gp+0xffff7194>

0000105c <getFrame>:
 * y = arr[i] >> 16;
 */
void getFrame(uint32_t *arr, int *len)
{
	arr = (uint32_t *)malloc(NUM_POINT_FINDERS * sizeof(uint32_t));
	*len = NUM_POINT_FINDERS;
    105c:	00800084 	movi	r2,2
    1060:	28800015 	stw	r2,0(r5)

	volatile uint32_t raw_coords;
	for (int i = 0; i < NUM_POINT_FINDERS; i++)
	{
		raw_coords = *(camera_base + i);
    1064:	d0a04217 	ldw	r2,-32504(gp)
 * (x,y) = (0,0) is at top left of VGA monitor
 * x = arr[i] & 0xFFFF;
 * y = arr[i] >> 16;
 */
void getFrame(uint32_t *arr, int *len)
{
    1068:	deffff04 	addi	sp,sp,-4
	*len = NUM_POINT_FINDERS;

	volatile uint32_t raw_coords;
	for (int i = 0; i < NUM_POINT_FINDERS; i++)
	{
		raw_coords = *(camera_base + i);
    106c:	10c00017 	ldw	r3,0(r2)
    1070:	d8c00015 	stw	r3,0(sp)
		arr[i] = raw_coords;
    1074:	d8c00017 	ldw	r3,0(sp)
	*len = NUM_POINT_FINDERS;

	volatile uint32_t raw_coords;
	for (int i = 0; i < NUM_POINT_FINDERS; i++)
	{
		raw_coords = *(camera_base + i);
    1078:	10800117 	ldw	r2,4(r2)
    107c:	d8800015 	stw	r2,0(sp)
		arr[i] = raw_coords;
    1080:	d8800017 	ldw	r2,0(sp)
		//	  uint16_t smallUpBigDown = raw_coords >> 16;
		//	  uint16_t smallLeftBigRight = raw_coords & 0xFFFF;
		//	  printf("smallUpBigDown: %i, smallLeftBigRight: %i\n", smallUpBigDown, smallLeftBigRight);
	}
}
    1084:	dec00104 	addi	sp,sp,4
    1088:	f800283a 	ret

0000108c <printCoords>:

void printCoords()
{
    108c:	defffd04 	addi	sp,sp,-12
	int len;
	uint32_t *arr = NULL;
	getFrame(arr, &len);
    1090:	d80b883a 	mov	r5,sp
    1094:	0009883a 	mov	r4,zero
		//	  printf("smallUpBigDown: %i, smallLeftBigRight: %i\n", smallUpBigDown, smallLeftBigRight);
	}
}

void printCoords()
{
    1098:	dc000115 	stw	r16,4(sp)
    109c:	dfc00215 	stw	ra,8(sp)
	int len;
	uint32_t *arr = NULL;
	getFrame(arr, &len);
	for (int i = 0; i < len; i++)
    10a0:	0021883a 	mov	r16,zero

void printCoords()
{
	int len;
	uint32_t *arr = NULL;
	getFrame(arr, &len);
    10a4:	000105c0 	call	105c <getFrame>
	for (int i = 0; i < len; i++)
    10a8:	d8800017 	ldw	r2,0(sp)
    10ac:	80800b0e 	bge	r16,r2,10dc <printCoords+0x50>
	{
		uint32_t raw_coords = arr[i];
    10b0:	8405883a 	add	r2,r16,r16
    10b4:	1085883a 	add	r2,r2,r2
    10b8:	11800017 	ldw	r6,0(r2)
		uint16_t x = raw_coords & 0xFFFF;
		uint16_t y = raw_coords >> 16;
		printf("%i at x: %i, y: %i, ", i, x, y);
    10bc:	01000034 	movhi	r4,0
    10c0:	800b883a 	mov	r5,r16
    10c4:	300ed43a 	srli	r7,r6,16
    10c8:	21075f04 	addi	r4,r4,7548
    10cc:	31bfffcc 	andi	r6,r6,65535
    10d0:	00011d00 	call	11d0 <printf>
void printCoords()
{
	int len;
	uint32_t *arr = NULL;
	getFrame(arr, &len);
	for (int i = 0; i < len; i++)
    10d4:	84000044 	addi	r16,r16,1
    10d8:	003ff306 	br	10a8 <_gp+0xffff71e4>
		uint32_t raw_coords = arr[i];
		uint16_t x = raw_coords & 0xFFFF;
		uint16_t y = raw_coords >> 16;
		printf("%i at x: %i, y: %i, ", i, x, y);
	}
	printf("\n");
    10dc:	01000284 	movi	r4,10
    10e0:	00012240 	call	1224 <putchar>
	free(arr);
}
    10e4:	dfc00217 	ldw	ra,8(sp)
    10e8:	dc000117 	ldw	r16,4(sp)
    10ec:	dec00304 	addi	sp,sp,12
    10f0:	f800283a 	ret

000010f4 <printThresholds>:

void printThresholds(int i)
{
    10f4:	defffe04 	addi	sp,sp,-8
    printf("cbLow: %lu, cbHigh: %lu, crLow: %lu, crHigh: %lu\n", (thresholds[i] >> 24) & 0xFF, (thresholds[i] >> 16) & 0xFF, (thresholds[i] >> 8) & 0xFF, thresholds[i] & 0xFF);
    10f8:	01000034 	movhi	r4,0
    10fc:	d8000015 	stw	zero,0(sp)
    1100:	000f883a 	mov	r7,zero
    1104:	000d883a 	mov	r6,zero
    1108:	000b883a 	mov	r5,zero
    110c:	21076504 	addi	r4,r4,7572
	printf("\n");
	free(arr);
}

void printThresholds(int i)
{
    1110:	dfc00115 	stw	ra,4(sp)
    printf("cbLow: %lu, cbHigh: %lu, crLow: %lu, crHigh: %lu\n", (thresholds[i] >> 24) & 0xFF, (thresholds[i] >> 16) & 0xFF, (thresholds[i] >> 8) & 0xFF, thresholds[i] & 0xFF);
    1114:	00011d00 	call	11d0 <printf>
}
    1118:	dfc00117 	ldw	ra,4(sp)
    111c:	dec00204 	addi	sp,sp,8
    1120:	f800283a 	ret

00001124 <writeThresholds>:

void writeThresholds(int i, uint8_t cbLow, uint8_t cbHigh, uint8_t crLow, uint8_t crHigh)
{
	*(camera_base + i) = (cbLow << 24) | (cbHigh << 16) | (crLow << 8) | crHigh;
    1124:	d0a04217 	ldw	r2,-32504(gp)
    1128:	2109883a 	add	r4,r4,r4
    112c:	2109883a 	add	r4,r4,r4
    1130:	39c03fcc 	andi	r7,r7,255
    1134:	1109883a 	add	r4,r2,r4
    1138:	380e923a 	slli	r7,r7,8
    113c:	d8800003 	ldbu	r2,0(sp)
    1140:	31803fcc 	andi	r6,r6,255
    1144:	300c943a 	slli	r6,r6,16
    1148:	280a963a 	slli	r5,r5,24
    114c:	388eb03a 	or	r7,r7,r2
    1150:	398cb03a 	or	r6,r7,r6
    1154:	314cb03a 	or	r6,r6,r5
    1158:	21800015 	stw	r6,0(r4)
    115c:	f800283a 	ret

00001160 <main>:
}

int main()
{
	const int __programNumber__ = 420;
	printf("Program start number: %i\n", __programNumber__);
    1160:	01000034 	movhi	r4,0
{
	*(camera_base + i) = (cbLow << 24) | (cbHigh << 16) | (crLow << 8) | crHigh;
}

int main()
{
    1164:	deffff04 	addi	sp,sp,-4
	const int __programNumber__ = 420;
	printf("Program start number: %i\n", __programNumber__);
    1168:	01406904 	movi	r5,420
    116c:	21077204 	addi	r4,r4,7624
{
	*(camera_base + i) = (cbLow << 24) | (cbHigh << 16) | (crLow << 8) | crHigh;
}

int main()
{
    1170:	dfc00015 	stw	ra,0(sp)
	const int __programNumber__ = 420;
	printf("Program start number: %i\n", __programNumber__);
    1174:	00011d00 	call	11d0 <printf>
    printf("cbLow: %lu, cbHigh: %lu, crLow: %lu, crHigh: %lu\n", (thresholds[i] >> 24) & 0xFF, (thresholds[i] >> 16) & 0xFF, (thresholds[i] >> 8) & 0xFF, thresholds[i] & 0xFF);
}

void writeThresholds(int i, uint8_t cbLow, uint8_t cbHigh, uint8_t crLow, uint8_t crHigh)
{
	*(camera_base + i) = (cbLow << 24) | (cbHigh << 16) | (crLow << 8) | crHigh;
    1178:	d0a04217 	ldw	r2,-32504(gp)
    117c:	00dbde34 	movhi	r3,28536
    1180:	18dc1e44 	addi	r3,r3,28793
    1184:	10c00015 	stw	r3,0(r2)
    1188:	10c00115 	stw	r3,4(r2)
	printf("Program start number: %i\n", __programNumber__);

	writeThresholds(0, 111, 120, 112, 121);
	writeThresholds(1, 111, 120, 112, 121);
    while (1) {
    	printCoords();
    118c:	000108c0 	call	108c <printCoords>
    1190:	003ffe06 	br	118c <_gp+0xffff72c8>

00001194 <_printf_r>:
    1194:	defffd04 	addi	sp,sp,-12
    1198:	dfc00015 	stw	ra,0(sp)
    119c:	d9800115 	stw	r6,4(sp)
    11a0:	d9c00215 	stw	r7,8(sp)
    11a4:	20c00217 	ldw	r3,8(r4)
    11a8:	01800034 	movhi	r6,0
    11ac:	3185fd04 	addi	r6,r6,6132
    11b0:	19800115 	stw	r6,4(r3)
    11b4:	280d883a 	mov	r6,r5
    11b8:	21400217 	ldw	r5,8(r4)
    11bc:	d9c00104 	addi	r7,sp,4
    11c0:	00012ac0 	call	12ac <___vfprintf_internal_r>
    11c4:	dfc00017 	ldw	ra,0(sp)
    11c8:	dec00304 	addi	sp,sp,12
    11cc:	f800283a 	ret

000011d0 <printf>:
    11d0:	defffc04 	addi	sp,sp,-16
    11d4:	dfc00015 	stw	ra,0(sp)
    11d8:	d9400115 	stw	r5,4(sp)
    11dc:	d9800215 	stw	r6,8(sp)
    11e0:	d9c00315 	stw	r7,12(sp)
    11e4:	00800034 	movhi	r2,0
    11e8:	1087b204 	addi	r2,r2,7880
    11ec:	10800017 	ldw	r2,0(r2)
    11f0:	01400034 	movhi	r5,0
    11f4:	2945fd04 	addi	r5,r5,6132
    11f8:	10c00217 	ldw	r3,8(r2)
    11fc:	d9800104 	addi	r6,sp,4
    1200:	19400115 	stw	r5,4(r3)
    1204:	200b883a 	mov	r5,r4
    1208:	11000217 	ldw	r4,8(r2)
    120c:	00017d80 	call	17d8 <__vfprintf_internal>
    1210:	dfc00017 	ldw	ra,0(sp)
    1214:	dec00404 	addi	sp,sp,16
    1218:	f800283a 	ret

0000121c <_putchar_r>:
    121c:	21800217 	ldw	r6,8(r4)
    1220:	00019001 	jmpi	1900 <_putc_r>

00001224 <putchar>:
    1224:	00800034 	movhi	r2,0
    1228:	1087b204 	addi	r2,r2,7880
    122c:	10800017 	ldw	r2,0(r2)
    1230:	200b883a 	mov	r5,r4
    1234:	11800217 	ldw	r6,8(r2)
    1238:	1009883a 	mov	r4,r2
    123c:	00019001 	jmpi	1900 <_putc_r>

00001240 <print_repeat>:
    1240:	defffb04 	addi	sp,sp,-20
    1244:	dc800315 	stw	r18,12(sp)
    1248:	dc400215 	stw	r17,8(sp)
    124c:	dc000115 	stw	r16,4(sp)
    1250:	dfc00415 	stw	ra,16(sp)
    1254:	2025883a 	mov	r18,r4
    1258:	2823883a 	mov	r17,r5
    125c:	d9800005 	stb	r6,0(sp)
    1260:	3821883a 	mov	r16,r7
    1264:	04000a0e 	bge	zero,r16,1290 <print_repeat+0x50>
    1268:	88800117 	ldw	r2,4(r17)
    126c:	01c00044 	movi	r7,1
    1270:	d80d883a 	mov	r6,sp
    1274:	880b883a 	mov	r5,r17
    1278:	9009883a 	mov	r4,r18
    127c:	103ee83a 	callr	r2
    1280:	843fffc4 	addi	r16,r16,-1
    1284:	103ff726 	beq	r2,zero,1264 <_gp+0xffff73a0>
    1288:	00bfffc4 	movi	r2,-1
    128c:	00000106 	br	1294 <print_repeat+0x54>
    1290:	0005883a 	mov	r2,zero
    1294:	dfc00417 	ldw	ra,16(sp)
    1298:	dc800317 	ldw	r18,12(sp)
    129c:	dc400217 	ldw	r17,8(sp)
    12a0:	dc000117 	ldw	r16,4(sp)
    12a4:	dec00504 	addi	sp,sp,20
    12a8:	f800283a 	ret

000012ac <___vfprintf_internal_r>:
    12ac:	deffe504 	addi	sp,sp,-108
    12b0:	d8c00804 	addi	r3,sp,32
    12b4:	ddc01815 	stw	r23,96(sp)
    12b8:	dd801715 	stw	r22,92(sp)
    12bc:	dd401615 	stw	r21,88(sp)
    12c0:	dd001515 	stw	r20,84(sp)
    12c4:	dcc01415 	stw	r19,80(sp)
    12c8:	dc801315 	stw	r18,76(sp)
    12cc:	dc401215 	stw	r17,72(sp)
    12d0:	dc001115 	stw	r16,68(sp)
    12d4:	dfc01a15 	stw	ra,104(sp)
    12d8:	df001915 	stw	fp,100(sp)
    12dc:	2029883a 	mov	r20,r4
    12e0:	2823883a 	mov	r17,r5
    12e4:	382d883a 	mov	r22,r7
    12e8:	d9800f15 	stw	r6,60(sp)
    12ec:	0021883a 	mov	r16,zero
    12f0:	d8000e15 	stw	zero,56(sp)
    12f4:	d8000a15 	stw	zero,40(sp)
    12f8:	002b883a 	mov	r21,zero
    12fc:	0027883a 	mov	r19,zero
    1300:	0025883a 	mov	r18,zero
    1304:	d8000c15 	stw	zero,48(sp)
    1308:	d8000b15 	stw	zero,44(sp)
    130c:	002f883a 	mov	r23,zero
    1310:	d8c00915 	stw	r3,36(sp)
    1314:	d8c00f17 	ldw	r3,60(sp)
    1318:	19000003 	ldbu	r4,0(r3)
    131c:	20803fcc 	andi	r2,r4,255
    1320:	1080201c 	xori	r2,r2,128
    1324:	10bfe004 	addi	r2,r2,-128
    1328:	10011e26 	beq	r2,zero,17a4 <___vfprintf_internal_r+0x4f8>
    132c:	00c00044 	movi	r3,1
    1330:	b8c01426 	beq	r23,r3,1384 <___vfprintf_internal_r+0xd8>
    1334:	1dc00216 	blt	r3,r23,1340 <___vfprintf_internal_r+0x94>
    1338:	b8000626 	beq	r23,zero,1354 <___vfprintf_internal_r+0xa8>
    133c:	00011506 	br	1794 <___vfprintf_internal_r+0x4e8>
    1340:	01400084 	movi	r5,2
    1344:	b9401d26 	beq	r23,r5,13bc <___vfprintf_internal_r+0x110>
    1348:	014000c4 	movi	r5,3
    134c:	b9402b26 	beq	r23,r5,13fc <___vfprintf_internal_r+0x150>
    1350:	00011006 	br	1794 <___vfprintf_internal_r+0x4e8>
    1354:	01400944 	movi	r5,37
    1358:	1140fc26 	beq	r2,r5,174c <___vfprintf_internal_r+0x4a0>
    135c:	88800117 	ldw	r2,4(r17)
    1360:	d9000005 	stb	r4,0(sp)
    1364:	01c00044 	movi	r7,1
    1368:	d80d883a 	mov	r6,sp
    136c:	880b883a 	mov	r5,r17
    1370:	a009883a 	mov	r4,r20
    1374:	103ee83a 	callr	r2
    1378:	1000d81e 	bne	r2,zero,16dc <___vfprintf_internal_r+0x430>
    137c:	84000044 	addi	r16,r16,1
    1380:	00010406 	br	1794 <___vfprintf_internal_r+0x4e8>
    1384:	01400c04 	movi	r5,48
    1388:	1140fa26 	beq	r2,r5,1774 <___vfprintf_internal_r+0x4c8>
    138c:	01400944 	movi	r5,37
    1390:	11400a1e 	bne	r2,r5,13bc <___vfprintf_internal_r+0x110>
    1394:	d8800005 	stb	r2,0(sp)
    1398:	88800117 	ldw	r2,4(r17)
    139c:	b80f883a 	mov	r7,r23
    13a0:	d80d883a 	mov	r6,sp
    13a4:	880b883a 	mov	r5,r17
    13a8:	a009883a 	mov	r4,r20
    13ac:	103ee83a 	callr	r2
    13b0:	1000ca1e 	bne	r2,zero,16dc <___vfprintf_internal_r+0x430>
    13b4:	84000044 	addi	r16,r16,1
    13b8:	0000f506 	br	1790 <___vfprintf_internal_r+0x4e4>
    13bc:	25fff404 	addi	r23,r4,-48
    13c0:	bdc03fcc 	andi	r23,r23,255
    13c4:	00c00244 	movi	r3,9
    13c8:	1dc00936 	bltu	r3,r23,13f0 <___vfprintf_internal_r+0x144>
    13cc:	00bfffc4 	movi	r2,-1
    13d0:	90800426 	beq	r18,r2,13e4 <___vfprintf_internal_r+0x138>
    13d4:	01400284 	movi	r5,10
    13d8:	9009883a 	mov	r4,r18
    13dc:	0001b800 	call	1b80 <__mulsi3>
    13e0:	00000106 	br	13e8 <___vfprintf_internal_r+0x13c>
    13e4:	0005883a 	mov	r2,zero
    13e8:	b8a5883a 	add	r18,r23,r2
    13ec:	0000e206 	br	1778 <___vfprintf_internal_r+0x4cc>
    13f0:	01400b84 	movi	r5,46
    13f4:	1140e426 	beq	r2,r5,1788 <___vfprintf_internal_r+0x4dc>
    13f8:	05c00084 	movi	r23,2
    13fc:	213ff404 	addi	r4,r4,-48
    1400:	27003fcc 	andi	fp,r4,255
    1404:	00c00244 	movi	r3,9
    1408:	1f000936 	bltu	r3,fp,1430 <___vfprintf_internal_r+0x184>
    140c:	00bfffc4 	movi	r2,-1
    1410:	98800426 	beq	r19,r2,1424 <___vfprintf_internal_r+0x178>
    1414:	01400284 	movi	r5,10
    1418:	9809883a 	mov	r4,r19
    141c:	0001b800 	call	1b80 <__mulsi3>
    1420:	00000106 	br	1428 <___vfprintf_internal_r+0x17c>
    1424:	0005883a 	mov	r2,zero
    1428:	e0a7883a 	add	r19,fp,r2
    142c:	0000d906 	br	1794 <___vfprintf_internal_r+0x4e8>
    1430:	00c01b04 	movi	r3,108
    1434:	10c0d226 	beq	r2,r3,1780 <___vfprintf_internal_r+0x4d4>
    1438:	013fffc4 	movi	r4,-1
    143c:	99000226 	beq	r19,r4,1448 <___vfprintf_internal_r+0x19c>
    1440:	d8000b15 	stw	zero,44(sp)
    1444:	00000106 	br	144c <___vfprintf_internal_r+0x1a0>
    1448:	04c00044 	movi	r19,1
    144c:	01001a44 	movi	r4,105
    1450:	11001626 	beq	r2,r4,14ac <___vfprintf_internal_r+0x200>
    1454:	20800916 	blt	r4,r2,147c <___vfprintf_internal_r+0x1d0>
    1458:	010018c4 	movi	r4,99
    145c:	11008826 	beq	r2,r4,1680 <___vfprintf_internal_r+0x3d4>
    1460:	01001904 	movi	r4,100
    1464:	11001126 	beq	r2,r4,14ac <___vfprintf_internal_r+0x200>
    1468:	01001604 	movi	r4,88
    146c:	1100c81e 	bne	r2,r4,1790 <___vfprintf_internal_r+0x4e4>
    1470:	00c00044 	movi	r3,1
    1474:	d8c00e15 	stw	r3,56(sp)
    1478:	00001506 	br	14d0 <___vfprintf_internal_r+0x224>
    147c:	01001cc4 	movi	r4,115
    1480:	11009826 	beq	r2,r4,16e4 <___vfprintf_internal_r+0x438>
    1484:	20800416 	blt	r4,r2,1498 <___vfprintf_internal_r+0x1ec>
    1488:	01001bc4 	movi	r4,111
    148c:	1100c01e 	bne	r2,r4,1790 <___vfprintf_internal_r+0x4e4>
    1490:	05400204 	movi	r21,8
    1494:	00000f06 	br	14d4 <___vfprintf_internal_r+0x228>
    1498:	01001d44 	movi	r4,117
    149c:	11000d26 	beq	r2,r4,14d4 <___vfprintf_internal_r+0x228>
    14a0:	01001e04 	movi	r4,120
    14a4:	11000a26 	beq	r2,r4,14d0 <___vfprintf_internal_r+0x224>
    14a8:	0000b906 	br	1790 <___vfprintf_internal_r+0x4e4>
    14ac:	d8c00a17 	ldw	r3,40(sp)
    14b0:	b7000104 	addi	fp,r22,4
    14b4:	18000726 	beq	r3,zero,14d4 <___vfprintf_internal_r+0x228>
    14b8:	df000d15 	stw	fp,52(sp)
    14bc:	b5c00017 	ldw	r23,0(r22)
    14c0:	b800080e 	bge	r23,zero,14e4 <___vfprintf_internal_r+0x238>
    14c4:	05efc83a 	sub	r23,zero,r23
    14c8:	02400044 	movi	r9,1
    14cc:	00000606 	br	14e8 <___vfprintf_internal_r+0x23c>
    14d0:	05400404 	movi	r21,16
    14d4:	b0c00104 	addi	r3,r22,4
    14d8:	d8c00d15 	stw	r3,52(sp)
    14dc:	b5c00017 	ldw	r23,0(r22)
    14e0:	d8000a15 	stw	zero,40(sp)
    14e4:	0013883a 	mov	r9,zero
    14e8:	d839883a 	mov	fp,sp
    14ec:	b8001726 	beq	r23,zero,154c <___vfprintf_internal_r+0x2a0>
    14f0:	a80b883a 	mov	r5,r21
    14f4:	b809883a 	mov	r4,r23
    14f8:	da401015 	stw	r9,64(sp)
    14fc:	0001ac40 	call	1ac4 <__udivsi3>
    1500:	a80b883a 	mov	r5,r21
    1504:	1009883a 	mov	r4,r2
    1508:	102d883a 	mov	r22,r2
    150c:	0001b800 	call	1b80 <__mulsi3>
    1510:	b885c83a 	sub	r2,r23,r2
    1514:	00c00244 	movi	r3,9
    1518:	da401017 	ldw	r9,64(sp)
    151c:	18800216 	blt	r3,r2,1528 <___vfprintf_internal_r+0x27c>
    1520:	10800c04 	addi	r2,r2,48
    1524:	00000506 	br	153c <___vfprintf_internal_r+0x290>
    1528:	d8c00e17 	ldw	r3,56(sp)
    152c:	18000226 	beq	r3,zero,1538 <___vfprintf_internal_r+0x28c>
    1530:	10800dc4 	addi	r2,r2,55
    1534:	00000106 	br	153c <___vfprintf_internal_r+0x290>
    1538:	108015c4 	addi	r2,r2,87
    153c:	e0800005 	stb	r2,0(fp)
    1540:	b02f883a 	mov	r23,r22
    1544:	e7000044 	addi	fp,fp,1
    1548:	003fe806 	br	14ec <_gp+0xffff7628>
    154c:	e6efc83a 	sub	r23,fp,sp
    1550:	9dc5c83a 	sub	r2,r19,r23
    1554:	0080090e 	bge	zero,r2,157c <___vfprintf_internal_r+0x2d0>
    1558:	e085883a 	add	r2,fp,r2
    155c:	01400c04 	movi	r5,48
    1560:	d8c00917 	ldw	r3,36(sp)
    1564:	e009883a 	mov	r4,fp
    1568:	e0c0032e 	bgeu	fp,r3,1578 <___vfprintf_internal_r+0x2cc>
    156c:	e7000044 	addi	fp,fp,1
    1570:	21400005 	stb	r5,0(r4)
    1574:	e0bffa1e 	bne	fp,r2,1560 <_gp+0xffff769c>
    1578:	e6efc83a 	sub	r23,fp,sp
    157c:	d8c00b17 	ldw	r3,44(sp)
    1580:	4dd1883a 	add	r8,r9,r23
    1584:	922dc83a 	sub	r22,r18,r8
    1588:	18001626 	beq	r3,zero,15e4 <___vfprintf_internal_r+0x338>
    158c:	48000a26 	beq	r9,zero,15b8 <___vfprintf_internal_r+0x30c>
    1590:	00800b44 	movi	r2,45
    1594:	d8800805 	stb	r2,32(sp)
    1598:	88800117 	ldw	r2,4(r17)
    159c:	01c00044 	movi	r7,1
    15a0:	d9800804 	addi	r6,sp,32
    15a4:	880b883a 	mov	r5,r17
    15a8:	a009883a 	mov	r4,r20
    15ac:	103ee83a 	callr	r2
    15b0:	10004a1e 	bne	r2,zero,16dc <___vfprintf_internal_r+0x430>
    15b4:	84000044 	addi	r16,r16,1
    15b8:	0580070e 	bge	zero,r22,15d8 <___vfprintf_internal_r+0x32c>
    15bc:	b00f883a 	mov	r7,r22
    15c0:	01800c04 	movi	r6,48
    15c4:	880b883a 	mov	r5,r17
    15c8:	a009883a 	mov	r4,r20
    15cc:	00012400 	call	1240 <print_repeat>
    15d0:	1000421e 	bne	r2,zero,16dc <___vfprintf_internal_r+0x430>
    15d4:	85a1883a 	add	r16,r16,r22
    15d8:	e02d883a 	mov	r22,fp
    15dc:	bf2fc83a 	sub	r23,r23,fp
    15e0:	00002006 	br	1664 <___vfprintf_internal_r+0x3b8>
    15e4:	0580090e 	bge	zero,r22,160c <___vfprintf_internal_r+0x360>
    15e8:	b00f883a 	mov	r7,r22
    15ec:	01800804 	movi	r6,32
    15f0:	880b883a 	mov	r5,r17
    15f4:	a009883a 	mov	r4,r20
    15f8:	da401015 	stw	r9,64(sp)
    15fc:	00012400 	call	1240 <print_repeat>
    1600:	da401017 	ldw	r9,64(sp)
    1604:	1000351e 	bne	r2,zero,16dc <___vfprintf_internal_r+0x430>
    1608:	85a1883a 	add	r16,r16,r22
    160c:	483ff226 	beq	r9,zero,15d8 <_gp+0xffff7714>
    1610:	00800b44 	movi	r2,45
    1614:	d8800805 	stb	r2,32(sp)
    1618:	88800117 	ldw	r2,4(r17)
    161c:	01c00044 	movi	r7,1
    1620:	d9800804 	addi	r6,sp,32
    1624:	880b883a 	mov	r5,r17
    1628:	a009883a 	mov	r4,r20
    162c:	103ee83a 	callr	r2
    1630:	10002a1e 	bne	r2,zero,16dc <___vfprintf_internal_r+0x430>
    1634:	84000044 	addi	r16,r16,1
    1638:	003fe706 	br	15d8 <_gp+0xffff7714>
    163c:	b5bfffc4 	addi	r22,r22,-1
    1640:	b0800003 	ldbu	r2,0(r22)
    1644:	01c00044 	movi	r7,1
    1648:	d9800804 	addi	r6,sp,32
    164c:	d8800805 	stb	r2,32(sp)
    1650:	88800117 	ldw	r2,4(r17)
    1654:	880b883a 	mov	r5,r17
    1658:	a009883a 	mov	r4,r20
    165c:	103ee83a 	callr	r2
    1660:	10001e1e 	bne	r2,zero,16dc <___vfprintf_internal_r+0x430>
    1664:	8585c83a 	sub	r2,r16,r22
    1668:	b5c9883a 	add	r4,r22,r23
    166c:	e085883a 	add	r2,fp,r2
    1670:	013ff216 	blt	zero,r4,163c <_gp+0xffff7778>
    1674:	1021883a 	mov	r16,r2
    1678:	dd800d17 	ldw	r22,52(sp)
    167c:	00004406 	br	1790 <___vfprintf_internal_r+0x4e4>
    1680:	00800044 	movi	r2,1
    1684:	1480080e 	bge	r2,r18,16a8 <___vfprintf_internal_r+0x3fc>
    1688:	95ffffc4 	addi	r23,r18,-1
    168c:	b80f883a 	mov	r7,r23
    1690:	01800804 	movi	r6,32
    1694:	880b883a 	mov	r5,r17
    1698:	a009883a 	mov	r4,r20
    169c:	00012400 	call	1240 <print_repeat>
    16a0:	10000e1e 	bne	r2,zero,16dc <___vfprintf_internal_r+0x430>
    16a4:	85e1883a 	add	r16,r16,r23
    16a8:	b0800017 	ldw	r2,0(r22)
    16ac:	01c00044 	movi	r7,1
    16b0:	d80d883a 	mov	r6,sp
    16b4:	d8800005 	stb	r2,0(sp)
    16b8:	88800117 	ldw	r2,4(r17)
    16bc:	880b883a 	mov	r5,r17
    16c0:	a009883a 	mov	r4,r20
    16c4:	b5c00104 	addi	r23,r22,4
    16c8:	103ee83a 	callr	r2
    16cc:	1000031e 	bne	r2,zero,16dc <___vfprintf_internal_r+0x430>
    16d0:	84000044 	addi	r16,r16,1
    16d4:	b82d883a 	mov	r22,r23
    16d8:	00002d06 	br	1790 <___vfprintf_internal_r+0x4e4>
    16dc:	00bfffc4 	movi	r2,-1
    16e0:	00003106 	br	17a8 <___vfprintf_internal_r+0x4fc>
    16e4:	b5c00017 	ldw	r23,0(r22)
    16e8:	b7000104 	addi	fp,r22,4
    16ec:	b809883a 	mov	r4,r23
    16f0:	00019580 	call	1958 <strlen>
    16f4:	9091c83a 	sub	r8,r18,r2
    16f8:	102d883a 	mov	r22,r2
    16fc:	0200090e 	bge	zero,r8,1724 <___vfprintf_internal_r+0x478>
    1700:	400f883a 	mov	r7,r8
    1704:	01800804 	movi	r6,32
    1708:	880b883a 	mov	r5,r17
    170c:	a009883a 	mov	r4,r20
    1710:	da001015 	stw	r8,64(sp)
    1714:	00012400 	call	1240 <print_repeat>
    1718:	da001017 	ldw	r8,64(sp)
    171c:	103fef1e 	bne	r2,zero,16dc <_gp+0xffff7818>
    1720:	8221883a 	add	r16,r16,r8
    1724:	88800117 	ldw	r2,4(r17)
    1728:	b00f883a 	mov	r7,r22
    172c:	b80d883a 	mov	r6,r23
    1730:	880b883a 	mov	r5,r17
    1734:	a009883a 	mov	r4,r20
    1738:	103ee83a 	callr	r2
    173c:	103fe71e 	bne	r2,zero,16dc <_gp+0xffff7818>
    1740:	85a1883a 	add	r16,r16,r22
    1744:	e02d883a 	mov	r22,fp
    1748:	00001106 	br	1790 <___vfprintf_internal_r+0x4e4>
    174c:	00c00044 	movi	r3,1
    1750:	04ffffc4 	movi	r19,-1
    1754:	d8000e15 	stw	zero,56(sp)
    1758:	d8c00a15 	stw	r3,40(sp)
    175c:	05400284 	movi	r21,10
    1760:	9825883a 	mov	r18,r19
    1764:	d8000c15 	stw	zero,48(sp)
    1768:	d8000b15 	stw	zero,44(sp)
    176c:	182f883a 	mov	r23,r3
    1770:	00000806 	br	1794 <___vfprintf_internal_r+0x4e8>
    1774:	ddc00b15 	stw	r23,44(sp)
    1778:	05c00084 	movi	r23,2
    177c:	00000506 	br	1794 <___vfprintf_internal_r+0x4e8>
    1780:	00c00044 	movi	r3,1
    1784:	d8c00c15 	stw	r3,48(sp)
    1788:	05c000c4 	movi	r23,3
    178c:	00000106 	br	1794 <___vfprintf_internal_r+0x4e8>
    1790:	002f883a 	mov	r23,zero
    1794:	d8c00f17 	ldw	r3,60(sp)
    1798:	18c00044 	addi	r3,r3,1
    179c:	d8c00f15 	stw	r3,60(sp)
    17a0:	003edc06 	br	1314 <_gp+0xffff7450>
    17a4:	8005883a 	mov	r2,r16
    17a8:	dfc01a17 	ldw	ra,104(sp)
    17ac:	df001917 	ldw	fp,100(sp)
    17b0:	ddc01817 	ldw	r23,96(sp)
    17b4:	dd801717 	ldw	r22,92(sp)
    17b8:	dd401617 	ldw	r21,88(sp)
    17bc:	dd001517 	ldw	r20,84(sp)
    17c0:	dcc01417 	ldw	r19,80(sp)
    17c4:	dc801317 	ldw	r18,76(sp)
    17c8:	dc401217 	ldw	r17,72(sp)
    17cc:	dc001117 	ldw	r16,68(sp)
    17d0:	dec01b04 	addi	sp,sp,108
    17d4:	f800283a 	ret

000017d8 <__vfprintf_internal>:
    17d8:	00800034 	movhi	r2,0
    17dc:	1087b204 	addi	r2,r2,7880
    17e0:	300f883a 	mov	r7,r6
    17e4:	280d883a 	mov	r6,r5
    17e8:	200b883a 	mov	r5,r4
    17ec:	11000017 	ldw	r4,0(r2)
    17f0:	00012ac1 	jmpi	12ac <___vfprintf_internal_r>

000017f4 <__sfvwrite_small_dev>:
    17f4:	2880000b 	ldhu	r2,0(r5)
    17f8:	1080020c 	andi	r2,r2,8
    17fc:	10002126 	beq	r2,zero,1884 <__sfvwrite_small_dev+0x90>
    1800:	2880008f 	ldh	r2,2(r5)
    1804:	defffa04 	addi	sp,sp,-24
    1808:	dc000015 	stw	r16,0(sp)
    180c:	dfc00515 	stw	ra,20(sp)
    1810:	dd000415 	stw	r20,16(sp)
    1814:	dcc00315 	stw	r19,12(sp)
    1818:	dc800215 	stw	r18,8(sp)
    181c:	dc400115 	stw	r17,4(sp)
    1820:	2821883a 	mov	r16,r5
    1824:	10001216 	blt	r2,zero,1870 <__sfvwrite_small_dev+0x7c>
    1828:	2027883a 	mov	r19,r4
    182c:	3025883a 	mov	r18,r6
    1830:	3823883a 	mov	r17,r7
    1834:	05010004 	movi	r20,1024
    1838:	04400b0e 	bge	zero,r17,1868 <__sfvwrite_small_dev+0x74>
    183c:	880f883a 	mov	r7,r17
    1840:	a440010e 	bge	r20,r17,1848 <__sfvwrite_small_dev+0x54>
    1844:	01c10004 	movi	r7,1024
    1848:	8140008f 	ldh	r5,2(r16)
    184c:	900d883a 	mov	r6,r18
    1850:	9809883a 	mov	r4,r19
    1854:	00019740 	call	1974 <_write_r>
    1858:	0080050e 	bge	zero,r2,1870 <__sfvwrite_small_dev+0x7c>
    185c:	88a3c83a 	sub	r17,r17,r2
    1860:	90a5883a 	add	r18,r18,r2
    1864:	003ff406 	br	1838 <_gp+0xffff7974>
    1868:	0005883a 	mov	r2,zero
    186c:	00000706 	br	188c <__sfvwrite_small_dev+0x98>
    1870:	8080000b 	ldhu	r2,0(r16)
    1874:	10801014 	ori	r2,r2,64
    1878:	8080000d 	sth	r2,0(r16)
    187c:	00bfffc4 	movi	r2,-1
    1880:	00000206 	br	188c <__sfvwrite_small_dev+0x98>
    1884:	00bfffc4 	movi	r2,-1
    1888:	f800283a 	ret
    188c:	dfc00517 	ldw	ra,20(sp)
    1890:	dd000417 	ldw	r20,16(sp)
    1894:	dcc00317 	ldw	r19,12(sp)
    1898:	dc800217 	ldw	r18,8(sp)
    189c:	dc400117 	ldw	r17,4(sp)
    18a0:	dc000017 	ldw	r16,0(sp)
    18a4:	dec00604 	addi	sp,sp,24
    18a8:	f800283a 	ret

000018ac <putc>:
    18ac:	defffd04 	addi	sp,sp,-12
    18b0:	00800034 	movhi	r2,0
    18b4:	dc000115 	stw	r16,4(sp)
    18b8:	dfc00215 	stw	ra,8(sp)
    18bc:	1085fd04 	addi	r2,r2,6132
    18c0:	28800115 	stw	r2,4(r5)
    18c4:	00800034 	movhi	r2,0
    18c8:	1087b204 	addi	r2,r2,7880
    18cc:	d9000005 	stb	r4,0(sp)
    18d0:	2021883a 	mov	r16,r4
    18d4:	11000017 	ldw	r4,0(r2)
    18d8:	01c00044 	movi	r7,1
    18dc:	d80d883a 	mov	r6,sp
    18e0:	00017f40 	call	17f4 <__sfvwrite_small_dev>
    18e4:	00ffffc4 	movi	r3,-1
    18e8:	10c00126 	beq	r2,r3,18f0 <putc+0x44>
    18ec:	8005883a 	mov	r2,r16
    18f0:	dfc00217 	ldw	ra,8(sp)
    18f4:	dc000117 	ldw	r16,4(sp)
    18f8:	dec00304 	addi	sp,sp,12
    18fc:	f800283a 	ret

00001900 <_putc_r>:
    1900:	defffd04 	addi	sp,sp,-12
    1904:	00800034 	movhi	r2,0
    1908:	dc000115 	stw	r16,4(sp)
    190c:	dfc00215 	stw	ra,8(sp)
    1910:	1085fd04 	addi	r2,r2,6132
    1914:	30800115 	stw	r2,4(r6)
    1918:	00800034 	movhi	r2,0
    191c:	1087b204 	addi	r2,r2,7880
    1920:	11000017 	ldw	r4,0(r2)
    1924:	2821883a 	mov	r16,r5
    1928:	01c00044 	movi	r7,1
    192c:	300b883a 	mov	r5,r6
    1930:	d80d883a 	mov	r6,sp
    1934:	dc000005 	stb	r16,0(sp)
    1938:	00017f40 	call	17f4 <__sfvwrite_small_dev>
    193c:	00ffffc4 	movi	r3,-1
    1940:	10c00126 	beq	r2,r3,1948 <_putc_r+0x48>
    1944:	8005883a 	mov	r2,r16
    1948:	dfc00217 	ldw	ra,8(sp)
    194c:	dc000117 	ldw	r16,4(sp)
    1950:	dec00304 	addi	sp,sp,12
    1954:	f800283a 	ret

00001958 <strlen>:
    1958:	2005883a 	mov	r2,r4
    195c:	10c00007 	ldb	r3,0(r2)
    1960:	18000226 	beq	r3,zero,196c <strlen+0x14>
    1964:	10800044 	addi	r2,r2,1
    1968:	003ffc06 	br	195c <_gp+0xffff7a98>
    196c:	1105c83a 	sub	r2,r2,r4
    1970:	f800283a 	ret

00001974 <_write_r>:
    1974:	defffd04 	addi	sp,sp,-12
    1978:	dc000015 	stw	r16,0(sp)
    197c:	04000034 	movhi	r16,0
    1980:	dc400115 	stw	r17,4(sp)
    1984:	8407f404 	addi	r16,r16,8144
    1988:	2023883a 	mov	r17,r4
    198c:	2809883a 	mov	r4,r5
    1990:	300b883a 	mov	r5,r6
    1994:	380d883a 	mov	r6,r7
    1998:	dfc00215 	stw	ra,8(sp)
    199c:	80000015 	stw	zero,0(r16)
    19a0:	0001cb40 	call	1cb4 <write>
    19a4:	00ffffc4 	movi	r3,-1
    19a8:	10c0031e 	bne	r2,r3,19b8 <_write_r+0x44>
    19ac:	80c00017 	ldw	r3,0(r16)
    19b0:	18000126 	beq	r3,zero,19b8 <_write_r+0x44>
    19b4:	88c00015 	stw	r3,0(r17)
    19b8:	dfc00217 	ldw	ra,8(sp)
    19bc:	dc400117 	ldw	r17,4(sp)
    19c0:	dc000017 	ldw	r16,0(sp)
    19c4:	dec00304 	addi	sp,sp,12
    19c8:	f800283a 	ret

000019cc <__divsi3>:
    19cc:	20001b16 	blt	r4,zero,1a3c <__divsi3+0x70>
    19d0:	000f883a 	mov	r7,zero
    19d4:	28001616 	blt	r5,zero,1a30 <__divsi3+0x64>
    19d8:	200d883a 	mov	r6,r4
    19dc:	29001a2e 	bgeu	r5,r4,1a48 <__divsi3+0x7c>
    19e0:	00800804 	movi	r2,32
    19e4:	00c00044 	movi	r3,1
    19e8:	00000106 	br	19f0 <__divsi3+0x24>
    19ec:	10000d26 	beq	r2,zero,1a24 <__divsi3+0x58>
    19f0:	294b883a 	add	r5,r5,r5
    19f4:	10bfffc4 	addi	r2,r2,-1
    19f8:	18c7883a 	add	r3,r3,r3
    19fc:	293ffb36 	bltu	r5,r4,19ec <_gp+0xffff7b28>
    1a00:	0005883a 	mov	r2,zero
    1a04:	18000726 	beq	r3,zero,1a24 <__divsi3+0x58>
    1a08:	0005883a 	mov	r2,zero
    1a0c:	31400236 	bltu	r6,r5,1a18 <__divsi3+0x4c>
    1a10:	314dc83a 	sub	r6,r6,r5
    1a14:	10c4b03a 	or	r2,r2,r3
    1a18:	1806d07a 	srli	r3,r3,1
    1a1c:	280ad07a 	srli	r5,r5,1
    1a20:	183ffa1e 	bne	r3,zero,1a0c <_gp+0xffff7b48>
    1a24:	38000126 	beq	r7,zero,1a2c <__divsi3+0x60>
    1a28:	0085c83a 	sub	r2,zero,r2
    1a2c:	f800283a 	ret
    1a30:	014bc83a 	sub	r5,zero,r5
    1a34:	39c0005c 	xori	r7,r7,1
    1a38:	003fe706 	br	19d8 <_gp+0xffff7b14>
    1a3c:	0109c83a 	sub	r4,zero,r4
    1a40:	01c00044 	movi	r7,1
    1a44:	003fe306 	br	19d4 <_gp+0xffff7b10>
    1a48:	00c00044 	movi	r3,1
    1a4c:	003fee06 	br	1a08 <_gp+0xffff7b44>

00001a50 <__modsi3>:
    1a50:	20001716 	blt	r4,zero,1ab0 <__modsi3+0x60>
    1a54:	000f883a 	mov	r7,zero
    1a58:	2005883a 	mov	r2,r4
    1a5c:	28001216 	blt	r5,zero,1aa8 <__modsi3+0x58>
    1a60:	2900162e 	bgeu	r5,r4,1abc <__modsi3+0x6c>
    1a64:	01800804 	movi	r6,32
    1a68:	00c00044 	movi	r3,1
    1a6c:	00000106 	br	1a74 <__modsi3+0x24>
    1a70:	30000a26 	beq	r6,zero,1a9c <__modsi3+0x4c>
    1a74:	294b883a 	add	r5,r5,r5
    1a78:	31bfffc4 	addi	r6,r6,-1
    1a7c:	18c7883a 	add	r3,r3,r3
    1a80:	293ffb36 	bltu	r5,r4,1a70 <_gp+0xffff7bac>
    1a84:	18000526 	beq	r3,zero,1a9c <__modsi3+0x4c>
    1a88:	1806d07a 	srli	r3,r3,1
    1a8c:	11400136 	bltu	r2,r5,1a94 <__modsi3+0x44>
    1a90:	1145c83a 	sub	r2,r2,r5
    1a94:	280ad07a 	srli	r5,r5,1
    1a98:	183ffb1e 	bne	r3,zero,1a88 <_gp+0xffff7bc4>
    1a9c:	38000126 	beq	r7,zero,1aa4 <__modsi3+0x54>
    1aa0:	0085c83a 	sub	r2,zero,r2
    1aa4:	f800283a 	ret
    1aa8:	014bc83a 	sub	r5,zero,r5
    1aac:	003fec06 	br	1a60 <_gp+0xffff7b9c>
    1ab0:	0109c83a 	sub	r4,zero,r4
    1ab4:	01c00044 	movi	r7,1
    1ab8:	003fe706 	br	1a58 <_gp+0xffff7b94>
    1abc:	00c00044 	movi	r3,1
    1ac0:	003ff106 	br	1a88 <_gp+0xffff7bc4>

00001ac4 <__udivsi3>:
    1ac4:	200d883a 	mov	r6,r4
    1ac8:	2900152e 	bgeu	r5,r4,1b20 <__udivsi3+0x5c>
    1acc:	28001416 	blt	r5,zero,1b20 <__udivsi3+0x5c>
    1ad0:	00800804 	movi	r2,32
    1ad4:	00c00044 	movi	r3,1
    1ad8:	00000206 	br	1ae4 <__udivsi3+0x20>
    1adc:	10000e26 	beq	r2,zero,1b18 <__udivsi3+0x54>
    1ae0:	28000516 	blt	r5,zero,1af8 <__udivsi3+0x34>
    1ae4:	294b883a 	add	r5,r5,r5
    1ae8:	10bfffc4 	addi	r2,r2,-1
    1aec:	18c7883a 	add	r3,r3,r3
    1af0:	293ffa36 	bltu	r5,r4,1adc <_gp+0xffff7c18>
    1af4:	18000826 	beq	r3,zero,1b18 <__udivsi3+0x54>
    1af8:	0005883a 	mov	r2,zero
    1afc:	31400236 	bltu	r6,r5,1b08 <__udivsi3+0x44>
    1b00:	314dc83a 	sub	r6,r6,r5
    1b04:	10c4b03a 	or	r2,r2,r3
    1b08:	1806d07a 	srli	r3,r3,1
    1b0c:	280ad07a 	srli	r5,r5,1
    1b10:	183ffa1e 	bne	r3,zero,1afc <_gp+0xffff7c38>
    1b14:	f800283a 	ret
    1b18:	0005883a 	mov	r2,zero
    1b1c:	f800283a 	ret
    1b20:	00c00044 	movi	r3,1
    1b24:	003ff406 	br	1af8 <_gp+0xffff7c34>

00001b28 <__umodsi3>:
    1b28:	2005883a 	mov	r2,r4
    1b2c:	2900122e 	bgeu	r5,r4,1b78 <__umodsi3+0x50>
    1b30:	28001116 	blt	r5,zero,1b78 <__umodsi3+0x50>
    1b34:	01800804 	movi	r6,32
    1b38:	00c00044 	movi	r3,1
    1b3c:	00000206 	br	1b48 <__umodsi3+0x20>
    1b40:	30000c26 	beq	r6,zero,1b74 <__umodsi3+0x4c>
    1b44:	28000516 	blt	r5,zero,1b5c <__umodsi3+0x34>
    1b48:	294b883a 	add	r5,r5,r5
    1b4c:	31bfffc4 	addi	r6,r6,-1
    1b50:	18c7883a 	add	r3,r3,r3
    1b54:	293ffa36 	bltu	r5,r4,1b40 <_gp+0xffff7c7c>
    1b58:	18000626 	beq	r3,zero,1b74 <__umodsi3+0x4c>
    1b5c:	1806d07a 	srli	r3,r3,1
    1b60:	11400136 	bltu	r2,r5,1b68 <__umodsi3+0x40>
    1b64:	1145c83a 	sub	r2,r2,r5
    1b68:	280ad07a 	srli	r5,r5,1
    1b6c:	183ffb1e 	bne	r3,zero,1b5c <_gp+0xffff7c98>
    1b70:	f800283a 	ret
    1b74:	f800283a 	ret
    1b78:	00c00044 	movi	r3,1
    1b7c:	003ff706 	br	1b5c <_gp+0xffff7c98>

00001b80 <__mulsi3>:
    1b80:	0005883a 	mov	r2,zero
    1b84:	20000726 	beq	r4,zero,1ba4 <__mulsi3+0x24>
    1b88:	20c0004c 	andi	r3,r4,1
    1b8c:	2008d07a 	srli	r4,r4,1
    1b90:	18000126 	beq	r3,zero,1b98 <__mulsi3+0x18>
    1b94:	1145883a 	add	r2,r2,r5
    1b98:	294b883a 	add	r5,r5,r5
    1b9c:	203ffa1e 	bne	r4,zero,1b88 <_gp+0xffff7cc4>
    1ba0:	f800283a 	ret
    1ba4:	f800283a 	ret

00001ba8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1ba8:	deffff04 	addi	sp,sp,-4
    1bac:	01000034 	movhi	r4,0
    1bb0:	01400034 	movhi	r5,0
    1bb4:	dfc00015 	stw	ra,0(sp)
    1bb8:	21077904 	addi	r4,r4,7652
    1bbc:	2947b604 	addi	r5,r5,7896

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1bc0:	2140061e 	bne	r4,r5,1bdc <alt_load+0x34>
    1bc4:	01000034 	movhi	r4,0
    1bc8:	01400034 	movhi	r5,0
    1bcc:	21040804 	addi	r4,r4,4128
    1bd0:	29440804 	addi	r5,r5,4128
    1bd4:	2140121e 	bne	r4,r5,1c20 <alt_load+0x78>
    1bd8:	00000b06 	br	1c08 <alt_load+0x60>
    1bdc:	00c00034 	movhi	r3,0
    1be0:	18c7b604 	addi	r3,r3,7896
    1be4:	1907c83a 	sub	r3,r3,r4
    1be8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1bec:	10fff526 	beq	r2,r3,1bc4 <_gp+0xffff7d00>
    {
      *to++ = *from++;
    1bf0:	114f883a 	add	r7,r2,r5
    1bf4:	39c00017 	ldw	r7,0(r7)
    1bf8:	110d883a 	add	r6,r2,r4
    1bfc:	10800104 	addi	r2,r2,4
    1c00:	31c00015 	stw	r7,0(r6)
    1c04:	003ff906 	br	1bec <_gp+0xffff7d28>
    1c08:	01000034 	movhi	r4,0
    1c0c:	01400034 	movhi	r5,0
    1c10:	21075f04 	addi	r4,r4,7548
    1c14:	29475f04 	addi	r5,r5,7548

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1c18:	2140101e 	bne	r4,r5,1c5c <alt_load+0xb4>
    1c1c:	00000b06 	br	1c4c <alt_load+0xa4>
    1c20:	00c00034 	movhi	r3,0
    1c24:	18c40804 	addi	r3,r3,4128
    1c28:	1907c83a 	sub	r3,r3,r4
    1c2c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1c30:	10fff526 	beq	r2,r3,1c08 <_gp+0xffff7d44>
    {
      *to++ = *from++;
    1c34:	114f883a 	add	r7,r2,r5
    1c38:	39c00017 	ldw	r7,0(r7)
    1c3c:	110d883a 	add	r6,r2,r4
    1c40:	10800104 	addi	r2,r2,4
    1c44:	31c00015 	stw	r7,0(r6)
    1c48:	003ff906 	br	1c30 <_gp+0xffff7d6c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1c4c:	0001d6c0 	call	1d6c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    1c50:	dfc00017 	ldw	ra,0(sp)
    1c54:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    1c58:	0001d701 	jmpi	1d70 <alt_icache_flush_all>
    1c5c:	00c00034 	movhi	r3,0
    1c60:	18c77904 	addi	r3,r3,7652
    1c64:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1c68:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1c6c:	18bff726 	beq	r3,r2,1c4c <_gp+0xffff7d88>
    {
      *to++ = *from++;
    1c70:	114f883a 	add	r7,r2,r5
    1c74:	39c00017 	ldw	r7,0(r7)
    1c78:	110d883a 	add	r6,r2,r4
    1c7c:	10800104 	addi	r2,r2,4
    1c80:	31c00015 	stw	r7,0(r6)
    1c84:	003ff906 	br	1c6c <_gp+0xffff7da8>

00001c88 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1c88:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1c8c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1c90:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1c94:	0001d140 	call	1d14 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1c98:	0001d340 	call	1d34 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1c9c:	d1a04417 	ldw	r6,-32496(gp)
    1ca0:	d1604517 	ldw	r5,-32492(gp)
    1ca4:	d1204617 	ldw	r4,-32488(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    1ca8:	dfc00017 	ldw	ra,0(sp)
    1cac:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1cb0:	00011601 	jmpi	1160 <main>

00001cb4 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    1cb4:	00800044 	movi	r2,1
    1cb8:	20800226 	beq	r4,r2,1cc4 <write+0x10>
    1cbc:	00800084 	movi	r2,2
    1cc0:	2080041e 	bne	r4,r2,1cd4 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    1cc4:	01000034 	movhi	r4,0
    1cc8:	000f883a 	mov	r7,zero
    1ccc:	2107b404 	addi	r4,r4,7888
    1cd0:	0001d381 	jmpi	1d38 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    1cd4:	d0a00417 	ldw	r2,-32752(gp)
    1cd8:	10000926 	beq	r2,zero,1d00 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    1cdc:	deffff04 	addi	sp,sp,-4
    1ce0:	dfc00015 	stw	ra,0(sp)
    1ce4:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    1ce8:	00c01444 	movi	r3,81
    1cec:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    1cf0:	00bfffc4 	movi	r2,-1
    1cf4:	dfc00017 	ldw	ra,0(sp)
    1cf8:	dec00104 	addi	sp,sp,4
    1cfc:	f800283a 	ret
    1d00:	d0a04304 	addi	r2,gp,-32500
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    1d04:	00c01444 	movi	r3,81
    1d08:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    1d0c:	00bfffc4 	movi	r2,-1
    1d10:	f800283a 	ret

00001d14 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1d14:	deffff04 	addi	sp,sp,-4
    1d18:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    1d1c:	0001d740 	call	1d74 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1d20:	00800044 	movi	r2,1
    1d24:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1d28:	dfc00017 	ldw	ra,0(sp)
    1d2c:	dec00104 	addi	sp,sp,4
    1d30:	f800283a 	ret

00001d34 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1d34:	f800283a 	ret

00001d38 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    1d38:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1d3c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    1d40:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1d44:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    1d48:	2980072e 	bgeu	r5,r6,1d68 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1d4c:	38c00037 	ldwio	r3,0(r7)
    1d50:	18ffffec 	andhi	r3,r3,65535
    1d54:	183ffc26 	beq	r3,zero,1d48 <_gp+0xffff7e84>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1d58:	28c00007 	ldb	r3,0(r5)
    1d5c:	20c00035 	stwio	r3,0(r4)
    1d60:	29400044 	addi	r5,r5,1
    1d64:	003ff806 	br	1d48 <_gp+0xffff7e84>

  return count;
}
    1d68:	f800283a 	ret

00001d6c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1d6c:	f800283a 	ret

00001d70 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1d70:	f800283a 	ret

00001d74 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1d74:	000170fa 	wrctl	ienable,zero
    1d78:	f800283a 	ret
