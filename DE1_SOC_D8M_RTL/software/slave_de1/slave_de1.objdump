
slave_de1.elf:     file format elf32-littlenios2
slave_de1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x00000bc8 memsz 0x00000bc8 flags r-x
    LOAD off    0x00001be8 vaddr 0x00001be8 paddr 0x00001cdc align 2**12
         filesz 0x000000f4 memsz 0x000000f4 flags rw-
    LOAD off    0x00001dd0 vaddr 0x00001dd0 paddr 0x00001dd0 align 2**12
         filesz 0x00000000 memsz 0x00000014 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00001020  00001020  00001cdc  2**0
                  CONTENTS
  2 .text         00000bb8  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000010  00001bd8  00001bd8  00001bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f4  00001be8  00001cdc  00001be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000014  00001dd0  00001dd0  00001dd0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00001de4  00001de4  00001cdc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001cdc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000290  00000000  00000000  00001d00  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000035d5  00000000  00000000  00001f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000012d7  00000000  00000000  00005565  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001589  00000000  00000000  0000683c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000374  00000000  00000000  00007dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000fcd  00000000  00000000  0000813c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001375  00000000  00000000  00009109  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000a480  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000240  00000000  00000000  0000a490  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000b742  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000b745  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000b751  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000b752  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0000b753  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000b75e  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0000b769  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  0000b774  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000030  00000000  00000000  0000b780  2**0
                  CONTENTS, READONLY
 26 .jdi          000053cc  00000000  00000000  0000b7b0  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003846f  00000000  00000000  00010b7c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001020 l    d  .text	00000000 .text
00001bd8 l    d  .rodata	00000000 .rodata
00001be8 l    d  .rwdata	00000000 .rwdata
00001dd0 l    d  .bss	00000000 .bss
00001de4 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../slave_de1_bsp//obj/HAL/src/crt0.o
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00001148 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00001be8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00001ae4 g     F .text	0000002c alt_main
00001cdc g       *ABS*	00000000 __flash_rwdata_start
000010fc g     F .text	0000004c printf
00001bd0 g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
00001dd4 g     O .bss	00000004 errno
00001ddc g     O .bss	00000004 alt_argv
00009cc8 g       *ABS*	00000000 _gp
000010c0 g     F .text	0000003c _printf_r
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00001920 g     F .text	00000064 .hidden __udivsi3
0000105c g     F .text	00000014 getFrame
00001cc8 g     O .rwdata	00000004 _global_impure_ptr
00001de4 g       *ABS*	00000000 __bss_end
00001bc8 g     F .text	00000004 alt_dcache_flush_all
00001cdc g       *ABS*	00000000 __ram_rwdata_end
00001b10 g     F .text	00000060 write
00001be8 g       *ABS*	00000000 __ram_rodata_end
00001cd4 g     O .rwdata	00000004 jtag_uart_0
00001984 g     F .text	00000058 .hidden __umodsi3
00001de4 g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
00001b94 g     F .text	00000034 altera_avalon_jtag_uart_write
000011b4 g     F .text	0000052c ___vfprintf_internal_r
00001020 g     F .text	0000003c _start
00001b90 g     F .text	00000004 alt_sys_init
000019dc g     F .text	00000028 .hidden __mulsi3
00001be8 g       *ABS*	00000000 __ram_rwdata_start
00001bd8 g       *ABS*	00000000 __ram_rodata_start
00001dd0 g     O .bss	00000004 camera_base
00001de4 g       *ABS*	00000000 __alt_stack_base
000016fc g     F .text	000000b8 __sfvwrite_small_dev
00001dd0 g       *ABS*	00000000 __bss_start
00001070 g     F .text	00000050 main
00001dd8 g     O .bss	00000004 alt_envp
00001cd0 g     O .rwdata	00000004 uart_0
00001cd8 g     O .rwdata	00000004 alt_errno
00001828 g     F .text	00000084 .hidden __divsi3
00001bd8 g       *ABS*	00000000 __flash_rodata_start
00001b70 g     F .text	00000020 alt_irq_init
000017d0 g     F .text	00000058 _write_r
00001ccc g     O .rwdata	00000004 _impure_ptr
00001de0 g     O .bss	00000004 alt_argc
00001020 g       *ABS*	00000000 __ram_exceptions_start
00001cdc g       *ABS*	00000000 _edata
00001de4 g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
000018ac g     F .text	00000074 .hidden __modsi3
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
000017b4 g     F .text	0000001c strlen
00001bcc g     F .text	00000004 alt_icache_flush_all
000016e0 g     F .text	0000001c __vfprintf_internal
00001a04 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a73214 	ori	gp,gp,40136
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	10877414 	ori	r2,r2,7632

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c77914 	ori	r3,r3,7652

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_gp+0xffff737c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	0001a040 	call	1a04 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	0001ae40 	call	1ae4 <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <_gp+0xffff7390>

0000105c <getFrame>:
 * y = arr[i] >> 16;
 */
int getFrame(uint32_t* arr, int* len) {
	static const int NUM_POINT_FINDERS = 1;
	arr = (uint32_t*)malloc(NUM_POINT_FINDERS * sizeof(uint32_t));
	*len = NUM_POINT_FINDERS;
    105c:	00800044 	movi	r2,1
    1060:	28800015 	stw	r2,0(r5)

	for (int i = 0; i < NUM_POINT_FINDERS; i++) {
	  uint32_t raw_coords = *(camera_base + i);
    1064:	d0a04217 	ldw	r2,-32504(gp)
    1068:	10800017 	ldw	r2,0(r2)
	  arr[i] = raw_coords;
//	  uint16_t smallUpBigDown = raw_coords >> 16;
//	  uint16_t smallLeftBigRight = raw_coords & 0xFFFF;
//	  printf("smallUpBigDown: %i, smallLeftBigRight: %i\n", smallUpBigDown, smallLeftBigRight);
	}
}
    106c:	f800283a 	ret

00001070 <main>:

int main()
{ 
    1070:	defffc04 	addi	sp,sp,-16
    1074:	dfc00315 	stw	ra,12(sp)
    1078:	dc400215 	stw	r17,8(sp)
    107c:	dc000115 	stw	r16,4(sp)
  while (1) {
	  uint32_t *arr;
	  int len;
	  getFrame(arr, &len);
    1080:	0021883a 	mov	r16,zero
    1084:	d80b883a 	mov	r5,sp
    1088:	8009883a 	mov	r4,r16
    108c:	000105c0 	call	105c <getFrame>
	  for (int i = 0; i < len; i++) {
    1090:	0023883a 	mov	r17,zero
    1094:	d8800017 	ldw	r2,0(sp)
    1098:	88bff90e 	bge	r17,r2,1080 <_gp+0xffff73b8>
		  uint32_t raw_coords = arr[i];
    109c:	81400017 	ldw	r5,0(r16)
		  uint16_t x = raw_coords & 0xFFFF;
		  uint16_t y = raw_coords >> 16;
		  printf("x: %i, y: %i\n", x, y);
    10a0:	01000034 	movhi	r4,0
    10a4:	2106f604 	addi	r4,r4,7128
    10a8:	280cd43a 	srli	r6,r5,16
    10ac:	297fffcc 	andi	r5,r5,65535
{ 
  while (1) {
	  uint32_t *arr;
	  int len;
	  getFrame(arr, &len);
	  for (int i = 0; i < len; i++) {
    10b0:	8c400044 	addi	r17,r17,1
		  uint32_t raw_coords = arr[i];
		  uint16_t x = raw_coords & 0xFFFF;
		  uint16_t y = raw_coords >> 16;
		  printf("x: %i, y: %i\n", x, y);
    10b4:	00010fc0 	call	10fc <printf>
    10b8:	84000104 	addi	r16,r16,4
    10bc:	003ff506 	br	1094 <_gp+0xffff73cc>

000010c0 <_printf_r>:
    10c0:	defffd04 	addi	sp,sp,-12
    10c4:	dfc00015 	stw	ra,0(sp)
    10c8:	d9800115 	stw	r6,4(sp)
    10cc:	d9c00215 	stw	r7,8(sp)
    10d0:	20c00217 	ldw	r3,8(r4)
    10d4:	01800034 	movhi	r6,0
    10d8:	3185bf04 	addi	r6,r6,5884
    10dc:	19800115 	stw	r6,4(r3)
    10e0:	280d883a 	mov	r6,r5
    10e4:	21400217 	ldw	r5,8(r4)
    10e8:	d9c00104 	addi	r7,sp,4
    10ec:	00011b40 	call	11b4 <___vfprintf_internal_r>
    10f0:	dfc00017 	ldw	ra,0(sp)
    10f4:	dec00304 	addi	sp,sp,12
    10f8:	f800283a 	ret

000010fc <printf>:
    10fc:	defffc04 	addi	sp,sp,-16
    1100:	dfc00015 	stw	ra,0(sp)
    1104:	d9400115 	stw	r5,4(sp)
    1108:	d9800215 	stw	r6,8(sp)
    110c:	d9c00315 	stw	r7,12(sp)
    1110:	00800034 	movhi	r2,0
    1114:	10873304 	addi	r2,r2,7372
    1118:	10800017 	ldw	r2,0(r2)
    111c:	01400034 	movhi	r5,0
    1120:	2945bf04 	addi	r5,r5,5884
    1124:	10c00217 	ldw	r3,8(r2)
    1128:	d9800104 	addi	r6,sp,4
    112c:	19400115 	stw	r5,4(r3)
    1130:	200b883a 	mov	r5,r4
    1134:	11000217 	ldw	r4,8(r2)
    1138:	00016e00 	call	16e0 <__vfprintf_internal>
    113c:	dfc00017 	ldw	ra,0(sp)
    1140:	dec00404 	addi	sp,sp,16
    1144:	f800283a 	ret

00001148 <print_repeat>:
    1148:	defffb04 	addi	sp,sp,-20
    114c:	dc800315 	stw	r18,12(sp)
    1150:	dc400215 	stw	r17,8(sp)
    1154:	dc000115 	stw	r16,4(sp)
    1158:	dfc00415 	stw	ra,16(sp)
    115c:	2025883a 	mov	r18,r4
    1160:	2823883a 	mov	r17,r5
    1164:	d9800005 	stb	r6,0(sp)
    1168:	3821883a 	mov	r16,r7
    116c:	04000a0e 	bge	zero,r16,1198 <print_repeat+0x50>
    1170:	88800117 	ldw	r2,4(r17)
    1174:	01c00044 	movi	r7,1
    1178:	d80d883a 	mov	r6,sp
    117c:	880b883a 	mov	r5,r17
    1180:	9009883a 	mov	r4,r18
    1184:	103ee83a 	callr	r2
    1188:	843fffc4 	addi	r16,r16,-1
    118c:	103ff726 	beq	r2,zero,116c <_gp+0xffff74a4>
    1190:	00bfffc4 	movi	r2,-1
    1194:	00000106 	br	119c <print_repeat+0x54>
    1198:	0005883a 	mov	r2,zero
    119c:	dfc00417 	ldw	ra,16(sp)
    11a0:	dc800317 	ldw	r18,12(sp)
    11a4:	dc400217 	ldw	r17,8(sp)
    11a8:	dc000117 	ldw	r16,4(sp)
    11ac:	dec00504 	addi	sp,sp,20
    11b0:	f800283a 	ret

000011b4 <___vfprintf_internal_r>:
    11b4:	deffe504 	addi	sp,sp,-108
    11b8:	d8c00804 	addi	r3,sp,32
    11bc:	ddc01815 	stw	r23,96(sp)
    11c0:	dd801715 	stw	r22,92(sp)
    11c4:	dd401615 	stw	r21,88(sp)
    11c8:	dd001515 	stw	r20,84(sp)
    11cc:	dcc01415 	stw	r19,80(sp)
    11d0:	dc801315 	stw	r18,76(sp)
    11d4:	dc401215 	stw	r17,72(sp)
    11d8:	dc001115 	stw	r16,68(sp)
    11dc:	dfc01a15 	stw	ra,104(sp)
    11e0:	df001915 	stw	fp,100(sp)
    11e4:	2029883a 	mov	r20,r4
    11e8:	2823883a 	mov	r17,r5
    11ec:	382d883a 	mov	r22,r7
    11f0:	d9800f15 	stw	r6,60(sp)
    11f4:	0021883a 	mov	r16,zero
    11f8:	d8000e15 	stw	zero,56(sp)
    11fc:	d8000a15 	stw	zero,40(sp)
    1200:	002b883a 	mov	r21,zero
    1204:	0027883a 	mov	r19,zero
    1208:	0025883a 	mov	r18,zero
    120c:	d8000c15 	stw	zero,48(sp)
    1210:	d8000b15 	stw	zero,44(sp)
    1214:	002f883a 	mov	r23,zero
    1218:	d8c00915 	stw	r3,36(sp)
    121c:	d8c00f17 	ldw	r3,60(sp)
    1220:	19000003 	ldbu	r4,0(r3)
    1224:	20803fcc 	andi	r2,r4,255
    1228:	1080201c 	xori	r2,r2,128
    122c:	10bfe004 	addi	r2,r2,-128
    1230:	10011e26 	beq	r2,zero,16ac <___vfprintf_internal_r+0x4f8>
    1234:	00c00044 	movi	r3,1
    1238:	b8c01426 	beq	r23,r3,128c <___vfprintf_internal_r+0xd8>
    123c:	1dc00216 	blt	r3,r23,1248 <___vfprintf_internal_r+0x94>
    1240:	b8000626 	beq	r23,zero,125c <___vfprintf_internal_r+0xa8>
    1244:	00011506 	br	169c <___vfprintf_internal_r+0x4e8>
    1248:	01400084 	movi	r5,2
    124c:	b9401d26 	beq	r23,r5,12c4 <___vfprintf_internal_r+0x110>
    1250:	014000c4 	movi	r5,3
    1254:	b9402b26 	beq	r23,r5,1304 <___vfprintf_internal_r+0x150>
    1258:	00011006 	br	169c <___vfprintf_internal_r+0x4e8>
    125c:	01400944 	movi	r5,37
    1260:	1140fc26 	beq	r2,r5,1654 <___vfprintf_internal_r+0x4a0>
    1264:	88800117 	ldw	r2,4(r17)
    1268:	d9000005 	stb	r4,0(sp)
    126c:	01c00044 	movi	r7,1
    1270:	d80d883a 	mov	r6,sp
    1274:	880b883a 	mov	r5,r17
    1278:	a009883a 	mov	r4,r20
    127c:	103ee83a 	callr	r2
    1280:	1000d81e 	bne	r2,zero,15e4 <___vfprintf_internal_r+0x430>
    1284:	84000044 	addi	r16,r16,1
    1288:	00010406 	br	169c <___vfprintf_internal_r+0x4e8>
    128c:	01400c04 	movi	r5,48
    1290:	1140fa26 	beq	r2,r5,167c <___vfprintf_internal_r+0x4c8>
    1294:	01400944 	movi	r5,37
    1298:	11400a1e 	bne	r2,r5,12c4 <___vfprintf_internal_r+0x110>
    129c:	d8800005 	stb	r2,0(sp)
    12a0:	88800117 	ldw	r2,4(r17)
    12a4:	b80f883a 	mov	r7,r23
    12a8:	d80d883a 	mov	r6,sp
    12ac:	880b883a 	mov	r5,r17
    12b0:	a009883a 	mov	r4,r20
    12b4:	103ee83a 	callr	r2
    12b8:	1000ca1e 	bne	r2,zero,15e4 <___vfprintf_internal_r+0x430>
    12bc:	84000044 	addi	r16,r16,1
    12c0:	0000f506 	br	1698 <___vfprintf_internal_r+0x4e4>
    12c4:	25fff404 	addi	r23,r4,-48
    12c8:	bdc03fcc 	andi	r23,r23,255
    12cc:	00c00244 	movi	r3,9
    12d0:	1dc00936 	bltu	r3,r23,12f8 <___vfprintf_internal_r+0x144>
    12d4:	00bfffc4 	movi	r2,-1
    12d8:	90800426 	beq	r18,r2,12ec <___vfprintf_internal_r+0x138>
    12dc:	01400284 	movi	r5,10
    12e0:	9009883a 	mov	r4,r18
    12e4:	00019dc0 	call	19dc <__mulsi3>
    12e8:	00000106 	br	12f0 <___vfprintf_internal_r+0x13c>
    12ec:	0005883a 	mov	r2,zero
    12f0:	b8a5883a 	add	r18,r23,r2
    12f4:	0000e206 	br	1680 <___vfprintf_internal_r+0x4cc>
    12f8:	01400b84 	movi	r5,46
    12fc:	1140e426 	beq	r2,r5,1690 <___vfprintf_internal_r+0x4dc>
    1300:	05c00084 	movi	r23,2
    1304:	213ff404 	addi	r4,r4,-48
    1308:	27003fcc 	andi	fp,r4,255
    130c:	00c00244 	movi	r3,9
    1310:	1f000936 	bltu	r3,fp,1338 <___vfprintf_internal_r+0x184>
    1314:	00bfffc4 	movi	r2,-1
    1318:	98800426 	beq	r19,r2,132c <___vfprintf_internal_r+0x178>
    131c:	01400284 	movi	r5,10
    1320:	9809883a 	mov	r4,r19
    1324:	00019dc0 	call	19dc <__mulsi3>
    1328:	00000106 	br	1330 <___vfprintf_internal_r+0x17c>
    132c:	0005883a 	mov	r2,zero
    1330:	e0a7883a 	add	r19,fp,r2
    1334:	0000d906 	br	169c <___vfprintf_internal_r+0x4e8>
    1338:	00c01b04 	movi	r3,108
    133c:	10c0d226 	beq	r2,r3,1688 <___vfprintf_internal_r+0x4d4>
    1340:	013fffc4 	movi	r4,-1
    1344:	99000226 	beq	r19,r4,1350 <___vfprintf_internal_r+0x19c>
    1348:	d8000b15 	stw	zero,44(sp)
    134c:	00000106 	br	1354 <___vfprintf_internal_r+0x1a0>
    1350:	04c00044 	movi	r19,1
    1354:	01001a44 	movi	r4,105
    1358:	11001626 	beq	r2,r4,13b4 <___vfprintf_internal_r+0x200>
    135c:	20800916 	blt	r4,r2,1384 <___vfprintf_internal_r+0x1d0>
    1360:	010018c4 	movi	r4,99
    1364:	11008826 	beq	r2,r4,1588 <___vfprintf_internal_r+0x3d4>
    1368:	01001904 	movi	r4,100
    136c:	11001126 	beq	r2,r4,13b4 <___vfprintf_internal_r+0x200>
    1370:	01001604 	movi	r4,88
    1374:	1100c81e 	bne	r2,r4,1698 <___vfprintf_internal_r+0x4e4>
    1378:	00c00044 	movi	r3,1
    137c:	d8c00e15 	stw	r3,56(sp)
    1380:	00001506 	br	13d8 <___vfprintf_internal_r+0x224>
    1384:	01001cc4 	movi	r4,115
    1388:	11009826 	beq	r2,r4,15ec <___vfprintf_internal_r+0x438>
    138c:	20800416 	blt	r4,r2,13a0 <___vfprintf_internal_r+0x1ec>
    1390:	01001bc4 	movi	r4,111
    1394:	1100c01e 	bne	r2,r4,1698 <___vfprintf_internal_r+0x4e4>
    1398:	05400204 	movi	r21,8
    139c:	00000f06 	br	13dc <___vfprintf_internal_r+0x228>
    13a0:	01001d44 	movi	r4,117
    13a4:	11000d26 	beq	r2,r4,13dc <___vfprintf_internal_r+0x228>
    13a8:	01001e04 	movi	r4,120
    13ac:	11000a26 	beq	r2,r4,13d8 <___vfprintf_internal_r+0x224>
    13b0:	0000b906 	br	1698 <___vfprintf_internal_r+0x4e4>
    13b4:	d8c00a17 	ldw	r3,40(sp)
    13b8:	b7000104 	addi	fp,r22,4
    13bc:	18000726 	beq	r3,zero,13dc <___vfprintf_internal_r+0x228>
    13c0:	df000d15 	stw	fp,52(sp)
    13c4:	b5c00017 	ldw	r23,0(r22)
    13c8:	b800080e 	bge	r23,zero,13ec <___vfprintf_internal_r+0x238>
    13cc:	05efc83a 	sub	r23,zero,r23
    13d0:	02400044 	movi	r9,1
    13d4:	00000606 	br	13f0 <___vfprintf_internal_r+0x23c>
    13d8:	05400404 	movi	r21,16
    13dc:	b0c00104 	addi	r3,r22,4
    13e0:	d8c00d15 	stw	r3,52(sp)
    13e4:	b5c00017 	ldw	r23,0(r22)
    13e8:	d8000a15 	stw	zero,40(sp)
    13ec:	0013883a 	mov	r9,zero
    13f0:	d839883a 	mov	fp,sp
    13f4:	b8001726 	beq	r23,zero,1454 <___vfprintf_internal_r+0x2a0>
    13f8:	a80b883a 	mov	r5,r21
    13fc:	b809883a 	mov	r4,r23
    1400:	da401015 	stw	r9,64(sp)
    1404:	00019200 	call	1920 <__udivsi3>
    1408:	a80b883a 	mov	r5,r21
    140c:	1009883a 	mov	r4,r2
    1410:	102d883a 	mov	r22,r2
    1414:	00019dc0 	call	19dc <__mulsi3>
    1418:	b885c83a 	sub	r2,r23,r2
    141c:	00c00244 	movi	r3,9
    1420:	da401017 	ldw	r9,64(sp)
    1424:	18800216 	blt	r3,r2,1430 <___vfprintf_internal_r+0x27c>
    1428:	10800c04 	addi	r2,r2,48
    142c:	00000506 	br	1444 <___vfprintf_internal_r+0x290>
    1430:	d8c00e17 	ldw	r3,56(sp)
    1434:	18000226 	beq	r3,zero,1440 <___vfprintf_internal_r+0x28c>
    1438:	10800dc4 	addi	r2,r2,55
    143c:	00000106 	br	1444 <___vfprintf_internal_r+0x290>
    1440:	108015c4 	addi	r2,r2,87
    1444:	e0800005 	stb	r2,0(fp)
    1448:	b02f883a 	mov	r23,r22
    144c:	e7000044 	addi	fp,fp,1
    1450:	003fe806 	br	13f4 <_gp+0xffff772c>
    1454:	e6efc83a 	sub	r23,fp,sp
    1458:	9dc5c83a 	sub	r2,r19,r23
    145c:	0080090e 	bge	zero,r2,1484 <___vfprintf_internal_r+0x2d0>
    1460:	e085883a 	add	r2,fp,r2
    1464:	01400c04 	movi	r5,48
    1468:	d8c00917 	ldw	r3,36(sp)
    146c:	e009883a 	mov	r4,fp
    1470:	e0c0032e 	bgeu	fp,r3,1480 <___vfprintf_internal_r+0x2cc>
    1474:	e7000044 	addi	fp,fp,1
    1478:	21400005 	stb	r5,0(r4)
    147c:	e0bffa1e 	bne	fp,r2,1468 <_gp+0xffff77a0>
    1480:	e6efc83a 	sub	r23,fp,sp
    1484:	d8c00b17 	ldw	r3,44(sp)
    1488:	4dd1883a 	add	r8,r9,r23
    148c:	922dc83a 	sub	r22,r18,r8
    1490:	18001626 	beq	r3,zero,14ec <___vfprintf_internal_r+0x338>
    1494:	48000a26 	beq	r9,zero,14c0 <___vfprintf_internal_r+0x30c>
    1498:	00800b44 	movi	r2,45
    149c:	d8800805 	stb	r2,32(sp)
    14a0:	88800117 	ldw	r2,4(r17)
    14a4:	01c00044 	movi	r7,1
    14a8:	d9800804 	addi	r6,sp,32
    14ac:	880b883a 	mov	r5,r17
    14b0:	a009883a 	mov	r4,r20
    14b4:	103ee83a 	callr	r2
    14b8:	10004a1e 	bne	r2,zero,15e4 <___vfprintf_internal_r+0x430>
    14bc:	84000044 	addi	r16,r16,1
    14c0:	0580070e 	bge	zero,r22,14e0 <___vfprintf_internal_r+0x32c>
    14c4:	b00f883a 	mov	r7,r22
    14c8:	01800c04 	movi	r6,48
    14cc:	880b883a 	mov	r5,r17
    14d0:	a009883a 	mov	r4,r20
    14d4:	00011480 	call	1148 <print_repeat>
    14d8:	1000421e 	bne	r2,zero,15e4 <___vfprintf_internal_r+0x430>
    14dc:	85a1883a 	add	r16,r16,r22
    14e0:	e02d883a 	mov	r22,fp
    14e4:	bf2fc83a 	sub	r23,r23,fp
    14e8:	00002006 	br	156c <___vfprintf_internal_r+0x3b8>
    14ec:	0580090e 	bge	zero,r22,1514 <___vfprintf_internal_r+0x360>
    14f0:	b00f883a 	mov	r7,r22
    14f4:	01800804 	movi	r6,32
    14f8:	880b883a 	mov	r5,r17
    14fc:	a009883a 	mov	r4,r20
    1500:	da401015 	stw	r9,64(sp)
    1504:	00011480 	call	1148 <print_repeat>
    1508:	da401017 	ldw	r9,64(sp)
    150c:	1000351e 	bne	r2,zero,15e4 <___vfprintf_internal_r+0x430>
    1510:	85a1883a 	add	r16,r16,r22
    1514:	483ff226 	beq	r9,zero,14e0 <_gp+0xffff7818>
    1518:	00800b44 	movi	r2,45
    151c:	d8800805 	stb	r2,32(sp)
    1520:	88800117 	ldw	r2,4(r17)
    1524:	01c00044 	movi	r7,1
    1528:	d9800804 	addi	r6,sp,32
    152c:	880b883a 	mov	r5,r17
    1530:	a009883a 	mov	r4,r20
    1534:	103ee83a 	callr	r2
    1538:	10002a1e 	bne	r2,zero,15e4 <___vfprintf_internal_r+0x430>
    153c:	84000044 	addi	r16,r16,1
    1540:	003fe706 	br	14e0 <_gp+0xffff7818>
    1544:	b5bfffc4 	addi	r22,r22,-1
    1548:	b0800003 	ldbu	r2,0(r22)
    154c:	01c00044 	movi	r7,1
    1550:	d9800804 	addi	r6,sp,32
    1554:	d8800805 	stb	r2,32(sp)
    1558:	88800117 	ldw	r2,4(r17)
    155c:	880b883a 	mov	r5,r17
    1560:	a009883a 	mov	r4,r20
    1564:	103ee83a 	callr	r2
    1568:	10001e1e 	bne	r2,zero,15e4 <___vfprintf_internal_r+0x430>
    156c:	8585c83a 	sub	r2,r16,r22
    1570:	b5c9883a 	add	r4,r22,r23
    1574:	e085883a 	add	r2,fp,r2
    1578:	013ff216 	blt	zero,r4,1544 <_gp+0xffff787c>
    157c:	1021883a 	mov	r16,r2
    1580:	dd800d17 	ldw	r22,52(sp)
    1584:	00004406 	br	1698 <___vfprintf_internal_r+0x4e4>
    1588:	00800044 	movi	r2,1
    158c:	1480080e 	bge	r2,r18,15b0 <___vfprintf_internal_r+0x3fc>
    1590:	95ffffc4 	addi	r23,r18,-1
    1594:	b80f883a 	mov	r7,r23
    1598:	01800804 	movi	r6,32
    159c:	880b883a 	mov	r5,r17
    15a0:	a009883a 	mov	r4,r20
    15a4:	00011480 	call	1148 <print_repeat>
    15a8:	10000e1e 	bne	r2,zero,15e4 <___vfprintf_internal_r+0x430>
    15ac:	85e1883a 	add	r16,r16,r23
    15b0:	b0800017 	ldw	r2,0(r22)
    15b4:	01c00044 	movi	r7,1
    15b8:	d80d883a 	mov	r6,sp
    15bc:	d8800005 	stb	r2,0(sp)
    15c0:	88800117 	ldw	r2,4(r17)
    15c4:	880b883a 	mov	r5,r17
    15c8:	a009883a 	mov	r4,r20
    15cc:	b5c00104 	addi	r23,r22,4
    15d0:	103ee83a 	callr	r2
    15d4:	1000031e 	bne	r2,zero,15e4 <___vfprintf_internal_r+0x430>
    15d8:	84000044 	addi	r16,r16,1
    15dc:	b82d883a 	mov	r22,r23
    15e0:	00002d06 	br	1698 <___vfprintf_internal_r+0x4e4>
    15e4:	00bfffc4 	movi	r2,-1
    15e8:	00003106 	br	16b0 <___vfprintf_internal_r+0x4fc>
    15ec:	b5c00017 	ldw	r23,0(r22)
    15f0:	b7000104 	addi	fp,r22,4
    15f4:	b809883a 	mov	r4,r23
    15f8:	00017b40 	call	17b4 <strlen>
    15fc:	9091c83a 	sub	r8,r18,r2
    1600:	102d883a 	mov	r22,r2
    1604:	0200090e 	bge	zero,r8,162c <___vfprintf_internal_r+0x478>
    1608:	400f883a 	mov	r7,r8
    160c:	01800804 	movi	r6,32
    1610:	880b883a 	mov	r5,r17
    1614:	a009883a 	mov	r4,r20
    1618:	da001015 	stw	r8,64(sp)
    161c:	00011480 	call	1148 <print_repeat>
    1620:	da001017 	ldw	r8,64(sp)
    1624:	103fef1e 	bne	r2,zero,15e4 <_gp+0xffff791c>
    1628:	8221883a 	add	r16,r16,r8
    162c:	88800117 	ldw	r2,4(r17)
    1630:	b00f883a 	mov	r7,r22
    1634:	b80d883a 	mov	r6,r23
    1638:	880b883a 	mov	r5,r17
    163c:	a009883a 	mov	r4,r20
    1640:	103ee83a 	callr	r2
    1644:	103fe71e 	bne	r2,zero,15e4 <_gp+0xffff791c>
    1648:	85a1883a 	add	r16,r16,r22
    164c:	e02d883a 	mov	r22,fp
    1650:	00001106 	br	1698 <___vfprintf_internal_r+0x4e4>
    1654:	00c00044 	movi	r3,1
    1658:	04ffffc4 	movi	r19,-1
    165c:	d8000e15 	stw	zero,56(sp)
    1660:	d8c00a15 	stw	r3,40(sp)
    1664:	05400284 	movi	r21,10
    1668:	9825883a 	mov	r18,r19
    166c:	d8000c15 	stw	zero,48(sp)
    1670:	d8000b15 	stw	zero,44(sp)
    1674:	182f883a 	mov	r23,r3
    1678:	00000806 	br	169c <___vfprintf_internal_r+0x4e8>
    167c:	ddc00b15 	stw	r23,44(sp)
    1680:	05c00084 	movi	r23,2
    1684:	00000506 	br	169c <___vfprintf_internal_r+0x4e8>
    1688:	00c00044 	movi	r3,1
    168c:	d8c00c15 	stw	r3,48(sp)
    1690:	05c000c4 	movi	r23,3
    1694:	00000106 	br	169c <___vfprintf_internal_r+0x4e8>
    1698:	002f883a 	mov	r23,zero
    169c:	d8c00f17 	ldw	r3,60(sp)
    16a0:	18c00044 	addi	r3,r3,1
    16a4:	d8c00f15 	stw	r3,60(sp)
    16a8:	003edc06 	br	121c <_gp+0xffff7554>
    16ac:	8005883a 	mov	r2,r16
    16b0:	dfc01a17 	ldw	ra,104(sp)
    16b4:	df001917 	ldw	fp,100(sp)
    16b8:	ddc01817 	ldw	r23,96(sp)
    16bc:	dd801717 	ldw	r22,92(sp)
    16c0:	dd401617 	ldw	r21,88(sp)
    16c4:	dd001517 	ldw	r20,84(sp)
    16c8:	dcc01417 	ldw	r19,80(sp)
    16cc:	dc801317 	ldw	r18,76(sp)
    16d0:	dc401217 	ldw	r17,72(sp)
    16d4:	dc001117 	ldw	r16,68(sp)
    16d8:	dec01b04 	addi	sp,sp,108
    16dc:	f800283a 	ret

000016e0 <__vfprintf_internal>:
    16e0:	00800034 	movhi	r2,0
    16e4:	10873304 	addi	r2,r2,7372
    16e8:	300f883a 	mov	r7,r6
    16ec:	280d883a 	mov	r6,r5
    16f0:	200b883a 	mov	r5,r4
    16f4:	11000017 	ldw	r4,0(r2)
    16f8:	00011b41 	jmpi	11b4 <___vfprintf_internal_r>

000016fc <__sfvwrite_small_dev>:
    16fc:	2880000b 	ldhu	r2,0(r5)
    1700:	1080020c 	andi	r2,r2,8
    1704:	10002126 	beq	r2,zero,178c <__sfvwrite_small_dev+0x90>
    1708:	2880008f 	ldh	r2,2(r5)
    170c:	defffa04 	addi	sp,sp,-24
    1710:	dc000015 	stw	r16,0(sp)
    1714:	dfc00515 	stw	ra,20(sp)
    1718:	dd000415 	stw	r20,16(sp)
    171c:	dcc00315 	stw	r19,12(sp)
    1720:	dc800215 	stw	r18,8(sp)
    1724:	dc400115 	stw	r17,4(sp)
    1728:	2821883a 	mov	r16,r5
    172c:	10001216 	blt	r2,zero,1778 <__sfvwrite_small_dev+0x7c>
    1730:	2027883a 	mov	r19,r4
    1734:	3025883a 	mov	r18,r6
    1738:	3823883a 	mov	r17,r7
    173c:	05010004 	movi	r20,1024
    1740:	04400b0e 	bge	zero,r17,1770 <__sfvwrite_small_dev+0x74>
    1744:	880f883a 	mov	r7,r17
    1748:	a440010e 	bge	r20,r17,1750 <__sfvwrite_small_dev+0x54>
    174c:	01c10004 	movi	r7,1024
    1750:	8140008f 	ldh	r5,2(r16)
    1754:	900d883a 	mov	r6,r18
    1758:	9809883a 	mov	r4,r19
    175c:	00017d00 	call	17d0 <_write_r>
    1760:	0080050e 	bge	zero,r2,1778 <__sfvwrite_small_dev+0x7c>
    1764:	88a3c83a 	sub	r17,r17,r2
    1768:	90a5883a 	add	r18,r18,r2
    176c:	003ff406 	br	1740 <_gp+0xffff7a78>
    1770:	0005883a 	mov	r2,zero
    1774:	00000706 	br	1794 <__sfvwrite_small_dev+0x98>
    1778:	8080000b 	ldhu	r2,0(r16)
    177c:	10801014 	ori	r2,r2,64
    1780:	8080000d 	sth	r2,0(r16)
    1784:	00bfffc4 	movi	r2,-1
    1788:	00000206 	br	1794 <__sfvwrite_small_dev+0x98>
    178c:	00bfffc4 	movi	r2,-1
    1790:	f800283a 	ret
    1794:	dfc00517 	ldw	ra,20(sp)
    1798:	dd000417 	ldw	r20,16(sp)
    179c:	dcc00317 	ldw	r19,12(sp)
    17a0:	dc800217 	ldw	r18,8(sp)
    17a4:	dc400117 	ldw	r17,4(sp)
    17a8:	dc000017 	ldw	r16,0(sp)
    17ac:	dec00604 	addi	sp,sp,24
    17b0:	f800283a 	ret

000017b4 <strlen>:
    17b4:	2005883a 	mov	r2,r4
    17b8:	10c00007 	ldb	r3,0(r2)
    17bc:	18000226 	beq	r3,zero,17c8 <strlen+0x14>
    17c0:	10800044 	addi	r2,r2,1
    17c4:	003ffc06 	br	17b8 <_gp+0xffff7af0>
    17c8:	1105c83a 	sub	r2,r2,r4
    17cc:	f800283a 	ret

000017d0 <_write_r>:
    17d0:	defffd04 	addi	sp,sp,-12
    17d4:	dc000015 	stw	r16,0(sp)
    17d8:	04000034 	movhi	r16,0
    17dc:	dc400115 	stw	r17,4(sp)
    17e0:	84077504 	addi	r16,r16,7636
    17e4:	2023883a 	mov	r17,r4
    17e8:	2809883a 	mov	r4,r5
    17ec:	300b883a 	mov	r5,r6
    17f0:	380d883a 	mov	r6,r7
    17f4:	dfc00215 	stw	ra,8(sp)
    17f8:	80000015 	stw	zero,0(r16)
    17fc:	0001b100 	call	1b10 <write>
    1800:	00ffffc4 	movi	r3,-1
    1804:	10c0031e 	bne	r2,r3,1814 <_write_r+0x44>
    1808:	80c00017 	ldw	r3,0(r16)
    180c:	18000126 	beq	r3,zero,1814 <_write_r+0x44>
    1810:	88c00015 	stw	r3,0(r17)
    1814:	dfc00217 	ldw	ra,8(sp)
    1818:	dc400117 	ldw	r17,4(sp)
    181c:	dc000017 	ldw	r16,0(sp)
    1820:	dec00304 	addi	sp,sp,12
    1824:	f800283a 	ret

00001828 <__divsi3>:
    1828:	20001b16 	blt	r4,zero,1898 <__divsi3+0x70>
    182c:	000f883a 	mov	r7,zero
    1830:	28001616 	blt	r5,zero,188c <__divsi3+0x64>
    1834:	200d883a 	mov	r6,r4
    1838:	29001a2e 	bgeu	r5,r4,18a4 <__divsi3+0x7c>
    183c:	00800804 	movi	r2,32
    1840:	00c00044 	movi	r3,1
    1844:	00000106 	br	184c <__divsi3+0x24>
    1848:	10000d26 	beq	r2,zero,1880 <__divsi3+0x58>
    184c:	294b883a 	add	r5,r5,r5
    1850:	10bfffc4 	addi	r2,r2,-1
    1854:	18c7883a 	add	r3,r3,r3
    1858:	293ffb36 	bltu	r5,r4,1848 <_gp+0xffff7b80>
    185c:	0005883a 	mov	r2,zero
    1860:	18000726 	beq	r3,zero,1880 <__divsi3+0x58>
    1864:	0005883a 	mov	r2,zero
    1868:	31400236 	bltu	r6,r5,1874 <__divsi3+0x4c>
    186c:	314dc83a 	sub	r6,r6,r5
    1870:	10c4b03a 	or	r2,r2,r3
    1874:	1806d07a 	srli	r3,r3,1
    1878:	280ad07a 	srli	r5,r5,1
    187c:	183ffa1e 	bne	r3,zero,1868 <_gp+0xffff7ba0>
    1880:	38000126 	beq	r7,zero,1888 <__divsi3+0x60>
    1884:	0085c83a 	sub	r2,zero,r2
    1888:	f800283a 	ret
    188c:	014bc83a 	sub	r5,zero,r5
    1890:	39c0005c 	xori	r7,r7,1
    1894:	003fe706 	br	1834 <_gp+0xffff7b6c>
    1898:	0109c83a 	sub	r4,zero,r4
    189c:	01c00044 	movi	r7,1
    18a0:	003fe306 	br	1830 <_gp+0xffff7b68>
    18a4:	00c00044 	movi	r3,1
    18a8:	003fee06 	br	1864 <_gp+0xffff7b9c>

000018ac <__modsi3>:
    18ac:	20001716 	blt	r4,zero,190c <__modsi3+0x60>
    18b0:	000f883a 	mov	r7,zero
    18b4:	2005883a 	mov	r2,r4
    18b8:	28001216 	blt	r5,zero,1904 <__modsi3+0x58>
    18bc:	2900162e 	bgeu	r5,r4,1918 <__modsi3+0x6c>
    18c0:	01800804 	movi	r6,32
    18c4:	00c00044 	movi	r3,1
    18c8:	00000106 	br	18d0 <__modsi3+0x24>
    18cc:	30000a26 	beq	r6,zero,18f8 <__modsi3+0x4c>
    18d0:	294b883a 	add	r5,r5,r5
    18d4:	31bfffc4 	addi	r6,r6,-1
    18d8:	18c7883a 	add	r3,r3,r3
    18dc:	293ffb36 	bltu	r5,r4,18cc <_gp+0xffff7c04>
    18e0:	18000526 	beq	r3,zero,18f8 <__modsi3+0x4c>
    18e4:	1806d07a 	srli	r3,r3,1
    18e8:	11400136 	bltu	r2,r5,18f0 <__modsi3+0x44>
    18ec:	1145c83a 	sub	r2,r2,r5
    18f0:	280ad07a 	srli	r5,r5,1
    18f4:	183ffb1e 	bne	r3,zero,18e4 <_gp+0xffff7c1c>
    18f8:	38000126 	beq	r7,zero,1900 <__modsi3+0x54>
    18fc:	0085c83a 	sub	r2,zero,r2
    1900:	f800283a 	ret
    1904:	014bc83a 	sub	r5,zero,r5
    1908:	003fec06 	br	18bc <_gp+0xffff7bf4>
    190c:	0109c83a 	sub	r4,zero,r4
    1910:	01c00044 	movi	r7,1
    1914:	003fe706 	br	18b4 <_gp+0xffff7bec>
    1918:	00c00044 	movi	r3,1
    191c:	003ff106 	br	18e4 <_gp+0xffff7c1c>

00001920 <__udivsi3>:
    1920:	200d883a 	mov	r6,r4
    1924:	2900152e 	bgeu	r5,r4,197c <__udivsi3+0x5c>
    1928:	28001416 	blt	r5,zero,197c <__udivsi3+0x5c>
    192c:	00800804 	movi	r2,32
    1930:	00c00044 	movi	r3,1
    1934:	00000206 	br	1940 <__udivsi3+0x20>
    1938:	10000e26 	beq	r2,zero,1974 <__udivsi3+0x54>
    193c:	28000516 	blt	r5,zero,1954 <__udivsi3+0x34>
    1940:	294b883a 	add	r5,r5,r5
    1944:	10bfffc4 	addi	r2,r2,-1
    1948:	18c7883a 	add	r3,r3,r3
    194c:	293ffa36 	bltu	r5,r4,1938 <_gp+0xffff7c70>
    1950:	18000826 	beq	r3,zero,1974 <__udivsi3+0x54>
    1954:	0005883a 	mov	r2,zero
    1958:	31400236 	bltu	r6,r5,1964 <__udivsi3+0x44>
    195c:	314dc83a 	sub	r6,r6,r5
    1960:	10c4b03a 	or	r2,r2,r3
    1964:	1806d07a 	srli	r3,r3,1
    1968:	280ad07a 	srli	r5,r5,1
    196c:	183ffa1e 	bne	r3,zero,1958 <_gp+0xffff7c90>
    1970:	f800283a 	ret
    1974:	0005883a 	mov	r2,zero
    1978:	f800283a 	ret
    197c:	00c00044 	movi	r3,1
    1980:	003ff406 	br	1954 <_gp+0xffff7c8c>

00001984 <__umodsi3>:
    1984:	2005883a 	mov	r2,r4
    1988:	2900122e 	bgeu	r5,r4,19d4 <__umodsi3+0x50>
    198c:	28001116 	blt	r5,zero,19d4 <__umodsi3+0x50>
    1990:	01800804 	movi	r6,32
    1994:	00c00044 	movi	r3,1
    1998:	00000206 	br	19a4 <__umodsi3+0x20>
    199c:	30000c26 	beq	r6,zero,19d0 <__umodsi3+0x4c>
    19a0:	28000516 	blt	r5,zero,19b8 <__umodsi3+0x34>
    19a4:	294b883a 	add	r5,r5,r5
    19a8:	31bfffc4 	addi	r6,r6,-1
    19ac:	18c7883a 	add	r3,r3,r3
    19b0:	293ffa36 	bltu	r5,r4,199c <_gp+0xffff7cd4>
    19b4:	18000626 	beq	r3,zero,19d0 <__umodsi3+0x4c>
    19b8:	1806d07a 	srli	r3,r3,1
    19bc:	11400136 	bltu	r2,r5,19c4 <__umodsi3+0x40>
    19c0:	1145c83a 	sub	r2,r2,r5
    19c4:	280ad07a 	srli	r5,r5,1
    19c8:	183ffb1e 	bne	r3,zero,19b8 <_gp+0xffff7cf0>
    19cc:	f800283a 	ret
    19d0:	f800283a 	ret
    19d4:	00c00044 	movi	r3,1
    19d8:	003ff706 	br	19b8 <_gp+0xffff7cf0>

000019dc <__mulsi3>:
    19dc:	0005883a 	mov	r2,zero
    19e0:	20000726 	beq	r4,zero,1a00 <__mulsi3+0x24>
    19e4:	20c0004c 	andi	r3,r4,1
    19e8:	2008d07a 	srli	r4,r4,1
    19ec:	18000126 	beq	r3,zero,19f4 <__mulsi3+0x18>
    19f0:	1145883a 	add	r2,r2,r5
    19f4:	294b883a 	add	r5,r5,r5
    19f8:	203ffa1e 	bne	r4,zero,19e4 <_gp+0xffff7d1c>
    19fc:	f800283a 	ret
    1a00:	f800283a 	ret

00001a04 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1a04:	deffff04 	addi	sp,sp,-4
    1a08:	01000034 	movhi	r4,0
    1a0c:	01400034 	movhi	r5,0
    1a10:	dfc00015 	stw	ra,0(sp)
    1a14:	2106fa04 	addi	r4,r4,7144
    1a18:	29473704 	addi	r5,r5,7388

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1a1c:	2140061e 	bne	r4,r5,1a38 <alt_load+0x34>
    1a20:	01000034 	movhi	r4,0
    1a24:	01400034 	movhi	r5,0
    1a28:	21040804 	addi	r4,r4,4128
    1a2c:	29440804 	addi	r5,r5,4128
    1a30:	2140121e 	bne	r4,r5,1a7c <alt_load+0x78>
    1a34:	00000b06 	br	1a64 <alt_load+0x60>
    1a38:	00c00034 	movhi	r3,0
    1a3c:	18c73704 	addi	r3,r3,7388
    1a40:	1907c83a 	sub	r3,r3,r4
    1a44:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1a48:	10fff526 	beq	r2,r3,1a20 <_gp+0xffff7d58>
    {
      *to++ = *from++;
    1a4c:	114f883a 	add	r7,r2,r5
    1a50:	39c00017 	ldw	r7,0(r7)
    1a54:	110d883a 	add	r6,r2,r4
    1a58:	10800104 	addi	r2,r2,4
    1a5c:	31c00015 	stw	r7,0(r6)
    1a60:	003ff906 	br	1a48 <_gp+0xffff7d80>
    1a64:	01000034 	movhi	r4,0
    1a68:	01400034 	movhi	r5,0
    1a6c:	2106f604 	addi	r4,r4,7128
    1a70:	2946f604 	addi	r5,r5,7128

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1a74:	2140101e 	bne	r4,r5,1ab8 <alt_load+0xb4>
    1a78:	00000b06 	br	1aa8 <alt_load+0xa4>
    1a7c:	00c00034 	movhi	r3,0
    1a80:	18c40804 	addi	r3,r3,4128
    1a84:	1907c83a 	sub	r3,r3,r4
    1a88:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1a8c:	10fff526 	beq	r2,r3,1a64 <_gp+0xffff7d9c>
    {
      *to++ = *from++;
    1a90:	114f883a 	add	r7,r2,r5
    1a94:	39c00017 	ldw	r7,0(r7)
    1a98:	110d883a 	add	r6,r2,r4
    1a9c:	10800104 	addi	r2,r2,4
    1aa0:	31c00015 	stw	r7,0(r6)
    1aa4:	003ff906 	br	1a8c <_gp+0xffff7dc4>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1aa8:	0001bc80 	call	1bc8 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    1aac:	dfc00017 	ldw	ra,0(sp)
    1ab0:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    1ab4:	0001bcc1 	jmpi	1bcc <alt_icache_flush_all>
    1ab8:	00c00034 	movhi	r3,0
    1abc:	18c6fa04 	addi	r3,r3,7144
    1ac0:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1ac4:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1ac8:	18bff726 	beq	r3,r2,1aa8 <_gp+0xffff7de0>
    {
      *to++ = *from++;
    1acc:	114f883a 	add	r7,r2,r5
    1ad0:	39c00017 	ldw	r7,0(r7)
    1ad4:	110d883a 	add	r6,r2,r4
    1ad8:	10800104 	addi	r2,r2,4
    1adc:	31c00015 	stw	r7,0(r6)
    1ae0:	003ff906 	br	1ac8 <_gp+0xffff7e00>

00001ae4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1ae4:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1ae8:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1aec:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1af0:	0001b700 	call	1b70 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1af4:	0001b900 	call	1b90 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1af8:	d1a04417 	ldw	r6,-32496(gp)
    1afc:	d1604517 	ldw	r5,-32492(gp)
    1b00:	d1204617 	ldw	r4,-32488(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    1b04:	dfc00017 	ldw	ra,0(sp)
    1b08:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1b0c:	00010701 	jmpi	1070 <main>

00001b10 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    1b10:	00800044 	movi	r2,1
    1b14:	20800226 	beq	r4,r2,1b20 <write+0x10>
    1b18:	00800084 	movi	r2,2
    1b1c:	2080041e 	bne	r4,r2,1b30 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    1b20:	01000034 	movhi	r4,0
    1b24:	000f883a 	mov	r7,zero
    1b28:	21073504 	addi	r4,r4,7380
    1b2c:	0001b941 	jmpi	1b94 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    1b30:	d0a00417 	ldw	r2,-32752(gp)
    1b34:	10000926 	beq	r2,zero,1b5c <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    1b38:	deffff04 	addi	sp,sp,-4
    1b3c:	dfc00015 	stw	ra,0(sp)
    1b40:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    1b44:	00c01444 	movi	r3,81
    1b48:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    1b4c:	00bfffc4 	movi	r2,-1
    1b50:	dfc00017 	ldw	ra,0(sp)
    1b54:	dec00104 	addi	sp,sp,4
    1b58:	f800283a 	ret
    1b5c:	d0a04304 	addi	r2,gp,-32500
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    1b60:	00c01444 	movi	r3,81
    1b64:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    1b68:	00bfffc4 	movi	r2,-1
    1b6c:	f800283a 	ret

00001b70 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1b70:	deffff04 	addi	sp,sp,-4
    1b74:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    1b78:	0001bd00 	call	1bd0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1b7c:	00800044 	movi	r2,1
    1b80:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1b84:	dfc00017 	ldw	ra,0(sp)
    1b88:	dec00104 	addi	sp,sp,4
    1b8c:	f800283a 	ret

00001b90 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1b90:	f800283a 	ret

00001b94 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    1b94:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1b98:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    1b9c:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1ba0:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    1ba4:	2980072e 	bgeu	r5,r6,1bc4 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1ba8:	38c00037 	ldwio	r3,0(r7)
    1bac:	18ffffec 	andhi	r3,r3,65535
    1bb0:	183ffc26 	beq	r3,zero,1ba4 <_gp+0xffff7edc>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1bb4:	28c00007 	ldb	r3,0(r5)
    1bb8:	20c00035 	stwio	r3,0(r4)
    1bbc:	29400044 	addi	r5,r5,1
    1bc0:	003ff806 	br	1ba4 <_gp+0xffff7edc>

  return count;
}
    1bc4:	f800283a 	ret

00001bc8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1bc8:	f800283a 	ret

00001bcc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1bcc:	f800283a 	ret

00001bd0 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1bd0:	000170fa 	wrctl	ienable,zero
    1bd4:	f800283a 	ret
