
slave_de1.elf:     file format elf32-littlenios2
slave_de1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000e0c memsz 0x00000e0c flags r-x
    LOAD off    0x00001e2c vaddr 0x00008e2c paddr 0x00008f90 align 2**12
         filesz 0x00000164 memsz 0x00000164 flags rw-
    LOAD off    0x000020f4 vaddr 0x000090f4 paddr 0x000090f4 align 2**12
         filesz 0x00000000 memsz 0x00000014 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00008020  00008020  00001f90  2**0
                  CONTENTS
  2 .text         00000da4  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000068  00008dc4  00008dc4  00001dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000164  00008e2c  00008f90  00001e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000014  000090f4  000090f4  000020f4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00009108  00009108  00001f90  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001f90  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000318  00000000  00000000  00001fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000046ef  00000000  00000000  000022d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000017ed  00000000  00000000  000069bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001a89  00000000  00000000  000081ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000468  00000000  00000000  00009c38  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001278  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000152e  00000000  00000000  0000b318  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000c848  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000278  00000000  00000000  0000c858  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000dd31  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000dd34  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000dd40  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000dd41  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0000dd42  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000dd4d  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0000dd58  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  0000dd63  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000042  00000000  00000000  0000dd6f  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0003a3b1  00000000  00000000  0000ddb1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008020 l    d  .text	00000000 .text
00008dc4 l    d  .rodata	00000000 .rodata
00008e2c l    d  .rwdata	00000000 .rwdata
000090f4 l    d  .bss	00000000 .bss
00009108 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../slave_de1_bsp//obj/HAL/src/crt0.o
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
000090f4 l     O .bss	00000004 thresholds
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000082a8 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00008e2c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00008db0 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00008c6c g     F .text	0000002c alt_main
000081f8 g     F .text	00000080 _puts_r
00008f90 g       *ABS*	00000000 __flash_rwdata_start
000081ac g     F .text	0000004c printf
00008dbc g     F .text	00000008 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
000090f8 g     O .bss	00000004 errno
00009100 g     O .bss	00000004 alt_argv
00010f64 g       *ABS*	00000000 _gp
00008f0c g     O .rwdata	00000030 alt_fd_list
00008278 g     F .text	00000014 puts
00008d1c g     F .text	0000005c altera_avalon_jtag_uart_read
00008170 g     F .text	0000003c _printf_r
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008a64 g     F .text	00000064 .hidden __udivsi3
00008f78 g     O .rwdata	00000004 alt_max_fd
0000805c g     F .text	00000014 getFrame
00008f68 g     O .rwdata	00000004 _global_impure_ptr
00009108 g       *ABS*	00000000 __bss_end
00008b48 g     F .text	00000044 alt_getchar
00008f3c g     O .rwdata	00000028 alt_dev_null
00008dac g     F .text	00000004 alt_dcache_flush_all
00008f90 g       *ABS*	00000000 __ram_rwdata_end
00008f7c g     O .rwdata	00000008 alt_dev_list
00008c98 g     F .text	00000060 write
00008e2c g       *ABS*	00000000 __ram_rodata_end
00008f74 g     O .rwdata	00000004 jtag_uart_0
00008ac8 g     F .text	00000058 .hidden __umodsi3
00009108 g       *ABS*	00000000 end
00008104 g     F .text	00000024 writeThresholds
0000ce20 g       *ABS*	00000000 __alt_stack_pointer
00008d78 g     F .text	00000034 altera_avalon_jtag_uart_write
00008314 g     F .text	0000052c ___vfprintf_internal_r
00008020 g     F .text	0000003c _start
00008d18 g     F .text	00000004 alt_sys_init
00008b20 g     F .text	00000028 .hidden __mulsi3
00008e2c g       *ABS*	00000000 __ram_rwdata_start
00008dc4 g       *ABS*	00000000 __ram_rodata_start
00008070 g     F .text	0000004c printCoords
00008f64 g     O .rwdata	00000004 camera_base
00009108 g       *ABS*	00000000 __alt_stack_base
0000885c g     F .text	000000b8 __sfvwrite_small_dev
000090f4 g       *ABS*	00000000 __bss_start
00008128 g     F .text	00000048 main
000090fc g     O .bss	00000004 alt_envp
00008f70 g     O .rwdata	00000004 uart_0
00008f8c g     O .rwdata	00000004 alt_errno
0000896c g     F .text	00000084 .hidden __divsi3
00008dc4 g       *ABS*	00000000 __flash_rodata_start
00008cf8 g     F .text	00000020 alt_irq_init
00008914 g     F .text	00000058 _write_r
000080bc g     F .text	00000048 printThresholds
00008f6c g     O .rwdata	00000004 _impure_ptr
00009104 g     O .bss	00000004 alt_argc
00008f84 g     O .rwdata	00000008 alt_fs_list
00008020 g       *ABS*	00000000 __ram_exceptions_start
00008f90 g       *ABS*	00000000 _edata
00009108 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
000089f0 g     F .text	00000074 .hidden __modsi3
0000ce20 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
0000828c g     F .text	0000001c strlen
00008db8 g     F .text	00000004 alt_icache_flush_all
00008840 g     F .text	0000001c __vfprintf_internal
00008b8c g     F .text	000000e0 alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def38814 	ori	sp,sp,52768
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d683d914 	ori	gp,gp,3940
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a43d14 	ori	r2,r2,37108

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e44214 	ori	r3,r3,37128

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_gp+0xffff70e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	0008b8c0 	call	8b8c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	0008c6c0 	call	8c6c <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <_gp+0xffff70f4>

0000805c <getFrame>:
 * y = arr[i] >> 16;
 */
void getFrame(uint32_t *arr, int *len)
{
	arr = (uint32_t *)malloc(NUM_POINT_FINDERS * sizeof(uint32_t));
	*len = NUM_POINT_FINDERS;
    805c:	00800044 	movi	r2,1
    8060:	28800015 	stw	r2,0(r5)

	uint32_t raw_coords;
	for (int i = 0; i < NUM_POINT_FINDERS; i++)
	{
		raw_coords = *(camera_base + i);
    8064:	d0a00017 	ldw	r2,-32768(gp)
    8068:	10800017 	ldw	r2,0(r2)
    806c:	f800283a 	ret

00008070 <printCoords>:
	}
}

// sample code for Bell
void printCoords()
{
    8070:	defffd04 	addi	sp,sp,-12
    8074:	dfc00215 	stw	ra,8(sp)
    8078:	dc000115 	stw	r16,4(sp)
	int len;
	uint32_t *arr = NULL;
	while (1)
	{
		getFrame(arr, &len);
    807c:	d80b883a 	mov	r5,sp
    8080:	0009883a 	mov	r4,zero
    8084:	000805c0 	call	805c <getFrame>
		for (int i = 0; i < len; i++)
    8088:	0021883a 	mov	r16,zero
    808c:	d8800017 	ldw	r2,0(sp)
    8090:	80bffa0e 	bge	r16,r2,807c <_gp+0xffff7118>
		{
			uint32_t raw_coords = arr[i];
    8094:	8405883a 	add	r2,r16,r16
    8098:	1085883a 	add	r2,r2,r2
    809c:	11400017 	ldw	r5,0(r2)
			uint16_t x = raw_coords & 0xFFFF;
			uint16_t y = raw_coords >> 16;
			printf("x: %i, y: %i\n", x, y);
    80a0:	01000074 	movhi	r4,1
    80a4:	21237104 	addi	r4,r4,-29244
    80a8:	280cd43a 	srli	r6,r5,16
    80ac:	297fffcc 	andi	r5,r5,65535
	int len;
	uint32_t *arr = NULL;
	while (1)
	{
		getFrame(arr, &len);
		for (int i = 0; i < len; i++)
    80b0:	84000044 	addi	r16,r16,1
		{
			uint32_t raw_coords = arr[i];
			uint16_t x = raw_coords & 0xFFFF;
			uint16_t y = raw_coords >> 16;
			printf("x: %i, y: %i\n", x, y);
    80b4:	00081ac0 	call	81ac <printf>
    80b8:	003ff406 	br	808c <_gp+0xffff7128>

000080bc <printThresholds>:
}

void printThresholds(int i)
{
    printf("Thresholds: crLow=%d crHigh=%d cbLow=%d cbHigh=%d\n",
        (thresholds[i] >> 24) & 0xFF, (thresholds[i] >> 16) & 0xFF,
    80bc:	2109883a 	add	r4,r4,r4
    80c0:	d0a06404 	addi	r2,gp,-32368
    80c4:	2109883a 	add	r4,r4,r4
    80c8:	1109883a 	add	r4,r2,r4
	free(arr);
}

void printThresholds(int i)
{
    printf("Thresholds: crLow=%d crHigh=%d cbLow=%d cbHigh=%d\n",
    80cc:	21400017 	ldw	r5,0(r4)
    80d0:	21c00043 	ldbu	r7,1(r4)
    80d4:	21800083 	ldbu	r6,2(r4)
    80d8:	28803fcc 	andi	r2,r5,255
    80dc:	280ad63a 	srli	r5,r5,24
	}
	free(arr);
}

void printThresholds(int i)
{
    80e0:	defffe04 	addi	sp,sp,-8
    printf("Thresholds: crLow=%d crHigh=%d cbLow=%d cbHigh=%d\n",
    80e4:	01000074 	movhi	r4,1
    80e8:	d8800015 	stw	r2,0(sp)
    80ec:	21237504 	addi	r4,r4,-29228
	}
	free(arr);
}

void printThresholds(int i)
{
    80f0:	dfc00115 	stw	ra,4(sp)
    printf("Thresholds: crLow=%d crHigh=%d cbLow=%d cbHigh=%d\n",
    80f4:	00081ac0 	call	81ac <printf>
        (thresholds[i] >> 24) & 0xFF, (thresholds[i] >> 16) & 0xFF,
        (thresholds[i] >> 8) & 0xFF, thresholds[i] & 0xFF);
}
    80f8:	dfc00117 	ldw	ra,4(sp)
    80fc:	dec00204 	addi	sp,sp,8
    8100:	f800283a 	ret

00008104 <writeThresholds>:

void writeThresholds(int i)
{
	*(camera_base + i) = thresholds[i];
    8104:	d0a00017 	ldw	r2,-32768(gp)
    8108:	2109883a 	add	r4,r4,r4
    810c:	2109883a 	add	r4,r4,r4
    8110:	d0e06404 	addi	r3,gp,-32368
    8114:	1105883a 	add	r2,r2,r4
    8118:	1909883a 	add	r4,r3,r4
    811c:	20c00017 	ldw	r3,0(r4)
    8120:	10c00015 	stw	r3,0(r2)
    8124:	f800283a 	ret

00008128 <main>:
}

int main()
{
	printf("Program start 1\n");
    8128:	01000074 	movhi	r4,1
{
	*(camera_base + i) = thresholds[i];
}

int main()
{
    812c:	deffff04 	addi	sp,sp,-4
	printf("Program start 1\n");
    8130:	21238204 	addi	r4,r4,-29176
{
	*(camera_base + i) = thresholds[i];
}

int main()
{
    8134:	dfc00015 	stw	ra,0(sp)
	printf("Program start 1\n");
    8138:	00082780 	call	8278 <puts>
	uint8_t cbLow = 111, cbHigh = 133, crLow = 112, crHigh = 134;
	thresholds[0] = (crLow << 24) | (crHigh << 16) | (cbLow << 8) | cbHigh;
    813c:	009c21b4 	movhi	r2,28806
    8140:	109be144 	addi	r2,r2,28549
	writeThresholds(0);
    8144:	0009883a 	mov	r4,zero

int main()
{
	printf("Program start 1\n");
	uint8_t cbLow = 111, cbHigh = 133, crLow = 112, crHigh = 134;
	thresholds[0] = (crLow << 24) | (crHigh << 16) | (cbLow << 8) | cbHigh;
    8148:	d0a06415 	stw	r2,-32368(gp)
	writeThresholds(0);
    814c:	00081040 	call	8104 <writeThresholds>
//	printCoords();

	int index = 0;
	int c;
	while (1) {
		printThresholds(index);
    8150:	0009883a 	mov	r4,zero
    8154:	00080bc0 	call	80bc <printThresholds>
		c = alt_getchar();
    8158:	0008b480 	call	8b48 <alt_getchar>
		printf("c: %c\n", c);
    815c:	01000074 	movhi	r4,1
    8160:	100b883a 	mov	r5,r2
    8164:	21238604 	addi	r4,r4,-29160
    8168:	00081ac0 	call	81ac <printf>
    816c:	003ff806 	br	8150 <_gp+0xffff71ec>

00008170 <_printf_r>:
    8170:	defffd04 	addi	sp,sp,-12
    8174:	dfc00015 	stw	ra,0(sp)
    8178:	d9800115 	stw	r6,4(sp)
    817c:	d9c00215 	stw	r7,8(sp)
    8180:	20c00217 	ldw	r3,8(r4)
    8184:	01800074 	movhi	r6,1
    8188:	31a21704 	addi	r6,r6,-30628
    818c:	19800115 	stw	r6,4(r3)
    8190:	280d883a 	mov	r6,r5
    8194:	21400217 	ldw	r5,8(r4)
    8198:	d9c00104 	addi	r7,sp,4
    819c:	00083140 	call	8314 <___vfprintf_internal_r>
    81a0:	dfc00017 	ldw	ra,0(sp)
    81a4:	dec00304 	addi	sp,sp,12
    81a8:	f800283a 	ret

000081ac <printf>:
    81ac:	defffc04 	addi	sp,sp,-16
    81b0:	dfc00015 	stw	ra,0(sp)
    81b4:	d9400115 	stw	r5,4(sp)
    81b8:	d9800215 	stw	r6,8(sp)
    81bc:	d9c00315 	stw	r7,12(sp)
    81c0:	00800074 	movhi	r2,1
    81c4:	10a3db04 	addi	r2,r2,-28820
    81c8:	10800017 	ldw	r2,0(r2)
    81cc:	01400074 	movhi	r5,1
    81d0:	29621704 	addi	r5,r5,-30628
    81d4:	10c00217 	ldw	r3,8(r2)
    81d8:	d9800104 	addi	r6,sp,4
    81dc:	19400115 	stw	r5,4(r3)
    81e0:	200b883a 	mov	r5,r4
    81e4:	11000217 	ldw	r4,8(r2)
    81e8:	00088400 	call	8840 <__vfprintf_internal>
    81ec:	dfc00017 	ldw	ra,0(sp)
    81f0:	dec00404 	addi	sp,sp,16
    81f4:	f800283a 	ret

000081f8 <_puts_r>:
    81f8:	defffd04 	addi	sp,sp,-12
    81fc:	dc000015 	stw	r16,0(sp)
    8200:	2021883a 	mov	r16,r4
    8204:	2809883a 	mov	r4,r5
    8208:	dfc00215 	stw	ra,8(sp)
    820c:	dc400115 	stw	r17,4(sp)
    8210:	2823883a 	mov	r17,r5
    8214:	000828c0 	call	828c <strlen>
    8218:	81400217 	ldw	r5,8(r16)
    821c:	01000074 	movhi	r4,1
    8220:	21221704 	addi	r4,r4,-30628
    8224:	29000115 	stw	r4,4(r5)
    8228:	100f883a 	mov	r7,r2
    822c:	880d883a 	mov	r6,r17
    8230:	8009883a 	mov	r4,r16
    8234:	000885c0 	call	885c <__sfvwrite_small_dev>
    8238:	00ffffc4 	movi	r3,-1
    823c:	10c00926 	beq	r2,r3,8264 <_puts_r+0x6c>
    8240:	81400217 	ldw	r5,8(r16)
    8244:	01800074 	movhi	r6,1
    8248:	01c00044 	movi	r7,1
    824c:	28800117 	ldw	r2,4(r5)
    8250:	31a37404 	addi	r6,r6,-29232
    8254:	8009883a 	mov	r4,r16
    8258:	103ee83a 	callr	r2
    825c:	10bfffe0 	cmpeqi	r2,r2,-1
    8260:	0085c83a 	sub	r2,zero,r2
    8264:	dfc00217 	ldw	ra,8(sp)
    8268:	dc400117 	ldw	r17,4(sp)
    826c:	dc000017 	ldw	r16,0(sp)
    8270:	dec00304 	addi	sp,sp,12
    8274:	f800283a 	ret

00008278 <puts>:
    8278:	00800074 	movhi	r2,1
    827c:	10a3db04 	addi	r2,r2,-28820
    8280:	200b883a 	mov	r5,r4
    8284:	11000017 	ldw	r4,0(r2)
    8288:	00081f81 	jmpi	81f8 <_puts_r>

0000828c <strlen>:
    828c:	2005883a 	mov	r2,r4
    8290:	10c00007 	ldb	r3,0(r2)
    8294:	18000226 	beq	r3,zero,82a0 <strlen+0x14>
    8298:	10800044 	addi	r2,r2,1
    829c:	003ffc06 	br	8290 <_gp+0xffff732c>
    82a0:	1105c83a 	sub	r2,r2,r4
    82a4:	f800283a 	ret

000082a8 <print_repeat>:
    82a8:	defffb04 	addi	sp,sp,-20
    82ac:	dc800315 	stw	r18,12(sp)
    82b0:	dc400215 	stw	r17,8(sp)
    82b4:	dc000115 	stw	r16,4(sp)
    82b8:	dfc00415 	stw	ra,16(sp)
    82bc:	2025883a 	mov	r18,r4
    82c0:	2823883a 	mov	r17,r5
    82c4:	d9800005 	stb	r6,0(sp)
    82c8:	3821883a 	mov	r16,r7
    82cc:	04000a0e 	bge	zero,r16,82f8 <print_repeat+0x50>
    82d0:	88800117 	ldw	r2,4(r17)
    82d4:	01c00044 	movi	r7,1
    82d8:	d80d883a 	mov	r6,sp
    82dc:	880b883a 	mov	r5,r17
    82e0:	9009883a 	mov	r4,r18
    82e4:	103ee83a 	callr	r2
    82e8:	843fffc4 	addi	r16,r16,-1
    82ec:	103ff726 	beq	r2,zero,82cc <_gp+0xffff7368>
    82f0:	00bfffc4 	movi	r2,-1
    82f4:	00000106 	br	82fc <print_repeat+0x54>
    82f8:	0005883a 	mov	r2,zero
    82fc:	dfc00417 	ldw	ra,16(sp)
    8300:	dc800317 	ldw	r18,12(sp)
    8304:	dc400217 	ldw	r17,8(sp)
    8308:	dc000117 	ldw	r16,4(sp)
    830c:	dec00504 	addi	sp,sp,20
    8310:	f800283a 	ret

00008314 <___vfprintf_internal_r>:
    8314:	deffe504 	addi	sp,sp,-108
    8318:	d8c00804 	addi	r3,sp,32
    831c:	ddc01815 	stw	r23,96(sp)
    8320:	dd801715 	stw	r22,92(sp)
    8324:	dd401615 	stw	r21,88(sp)
    8328:	dd001515 	stw	r20,84(sp)
    832c:	dcc01415 	stw	r19,80(sp)
    8330:	dc801315 	stw	r18,76(sp)
    8334:	dc401215 	stw	r17,72(sp)
    8338:	dc001115 	stw	r16,68(sp)
    833c:	dfc01a15 	stw	ra,104(sp)
    8340:	df001915 	stw	fp,100(sp)
    8344:	2029883a 	mov	r20,r4
    8348:	2823883a 	mov	r17,r5
    834c:	382d883a 	mov	r22,r7
    8350:	d9800f15 	stw	r6,60(sp)
    8354:	0021883a 	mov	r16,zero
    8358:	d8000e15 	stw	zero,56(sp)
    835c:	d8000a15 	stw	zero,40(sp)
    8360:	002b883a 	mov	r21,zero
    8364:	0027883a 	mov	r19,zero
    8368:	0025883a 	mov	r18,zero
    836c:	d8000c15 	stw	zero,48(sp)
    8370:	d8000b15 	stw	zero,44(sp)
    8374:	002f883a 	mov	r23,zero
    8378:	d8c00915 	stw	r3,36(sp)
    837c:	d8c00f17 	ldw	r3,60(sp)
    8380:	19000003 	ldbu	r4,0(r3)
    8384:	20803fcc 	andi	r2,r4,255
    8388:	1080201c 	xori	r2,r2,128
    838c:	10bfe004 	addi	r2,r2,-128
    8390:	10011e26 	beq	r2,zero,880c <___vfprintf_internal_r+0x4f8>
    8394:	00c00044 	movi	r3,1
    8398:	b8c01426 	beq	r23,r3,83ec <___vfprintf_internal_r+0xd8>
    839c:	1dc00216 	blt	r3,r23,83a8 <___vfprintf_internal_r+0x94>
    83a0:	b8000626 	beq	r23,zero,83bc <___vfprintf_internal_r+0xa8>
    83a4:	00011506 	br	87fc <___vfprintf_internal_r+0x4e8>
    83a8:	01400084 	movi	r5,2
    83ac:	b9401d26 	beq	r23,r5,8424 <___vfprintf_internal_r+0x110>
    83b0:	014000c4 	movi	r5,3
    83b4:	b9402b26 	beq	r23,r5,8464 <___vfprintf_internal_r+0x150>
    83b8:	00011006 	br	87fc <___vfprintf_internal_r+0x4e8>
    83bc:	01400944 	movi	r5,37
    83c0:	1140fc26 	beq	r2,r5,87b4 <___vfprintf_internal_r+0x4a0>
    83c4:	88800117 	ldw	r2,4(r17)
    83c8:	d9000005 	stb	r4,0(sp)
    83cc:	01c00044 	movi	r7,1
    83d0:	d80d883a 	mov	r6,sp
    83d4:	880b883a 	mov	r5,r17
    83d8:	a009883a 	mov	r4,r20
    83dc:	103ee83a 	callr	r2
    83e0:	1000d81e 	bne	r2,zero,8744 <___vfprintf_internal_r+0x430>
    83e4:	84000044 	addi	r16,r16,1
    83e8:	00010406 	br	87fc <___vfprintf_internal_r+0x4e8>
    83ec:	01400c04 	movi	r5,48
    83f0:	1140fa26 	beq	r2,r5,87dc <___vfprintf_internal_r+0x4c8>
    83f4:	01400944 	movi	r5,37
    83f8:	11400a1e 	bne	r2,r5,8424 <___vfprintf_internal_r+0x110>
    83fc:	d8800005 	stb	r2,0(sp)
    8400:	88800117 	ldw	r2,4(r17)
    8404:	b80f883a 	mov	r7,r23
    8408:	d80d883a 	mov	r6,sp
    840c:	880b883a 	mov	r5,r17
    8410:	a009883a 	mov	r4,r20
    8414:	103ee83a 	callr	r2
    8418:	1000ca1e 	bne	r2,zero,8744 <___vfprintf_internal_r+0x430>
    841c:	84000044 	addi	r16,r16,1
    8420:	0000f506 	br	87f8 <___vfprintf_internal_r+0x4e4>
    8424:	25fff404 	addi	r23,r4,-48
    8428:	bdc03fcc 	andi	r23,r23,255
    842c:	00c00244 	movi	r3,9
    8430:	1dc00936 	bltu	r3,r23,8458 <___vfprintf_internal_r+0x144>
    8434:	00bfffc4 	movi	r2,-1
    8438:	90800426 	beq	r18,r2,844c <___vfprintf_internal_r+0x138>
    843c:	01400284 	movi	r5,10
    8440:	9009883a 	mov	r4,r18
    8444:	0008b200 	call	8b20 <__mulsi3>
    8448:	00000106 	br	8450 <___vfprintf_internal_r+0x13c>
    844c:	0005883a 	mov	r2,zero
    8450:	b8a5883a 	add	r18,r23,r2
    8454:	0000e206 	br	87e0 <___vfprintf_internal_r+0x4cc>
    8458:	01400b84 	movi	r5,46
    845c:	1140e426 	beq	r2,r5,87f0 <___vfprintf_internal_r+0x4dc>
    8460:	05c00084 	movi	r23,2
    8464:	213ff404 	addi	r4,r4,-48
    8468:	27003fcc 	andi	fp,r4,255
    846c:	00c00244 	movi	r3,9
    8470:	1f000936 	bltu	r3,fp,8498 <___vfprintf_internal_r+0x184>
    8474:	00bfffc4 	movi	r2,-1
    8478:	98800426 	beq	r19,r2,848c <___vfprintf_internal_r+0x178>
    847c:	01400284 	movi	r5,10
    8480:	9809883a 	mov	r4,r19
    8484:	0008b200 	call	8b20 <__mulsi3>
    8488:	00000106 	br	8490 <___vfprintf_internal_r+0x17c>
    848c:	0005883a 	mov	r2,zero
    8490:	e0a7883a 	add	r19,fp,r2
    8494:	0000d906 	br	87fc <___vfprintf_internal_r+0x4e8>
    8498:	00c01b04 	movi	r3,108
    849c:	10c0d226 	beq	r2,r3,87e8 <___vfprintf_internal_r+0x4d4>
    84a0:	013fffc4 	movi	r4,-1
    84a4:	99000226 	beq	r19,r4,84b0 <___vfprintf_internal_r+0x19c>
    84a8:	d8000b15 	stw	zero,44(sp)
    84ac:	00000106 	br	84b4 <___vfprintf_internal_r+0x1a0>
    84b0:	04c00044 	movi	r19,1
    84b4:	01001a44 	movi	r4,105
    84b8:	11001626 	beq	r2,r4,8514 <___vfprintf_internal_r+0x200>
    84bc:	20800916 	blt	r4,r2,84e4 <___vfprintf_internal_r+0x1d0>
    84c0:	010018c4 	movi	r4,99
    84c4:	11008826 	beq	r2,r4,86e8 <___vfprintf_internal_r+0x3d4>
    84c8:	01001904 	movi	r4,100
    84cc:	11001126 	beq	r2,r4,8514 <___vfprintf_internal_r+0x200>
    84d0:	01001604 	movi	r4,88
    84d4:	1100c81e 	bne	r2,r4,87f8 <___vfprintf_internal_r+0x4e4>
    84d8:	00c00044 	movi	r3,1
    84dc:	d8c00e15 	stw	r3,56(sp)
    84e0:	00001506 	br	8538 <___vfprintf_internal_r+0x224>
    84e4:	01001cc4 	movi	r4,115
    84e8:	11009826 	beq	r2,r4,874c <___vfprintf_internal_r+0x438>
    84ec:	20800416 	blt	r4,r2,8500 <___vfprintf_internal_r+0x1ec>
    84f0:	01001bc4 	movi	r4,111
    84f4:	1100c01e 	bne	r2,r4,87f8 <___vfprintf_internal_r+0x4e4>
    84f8:	05400204 	movi	r21,8
    84fc:	00000f06 	br	853c <___vfprintf_internal_r+0x228>
    8500:	01001d44 	movi	r4,117
    8504:	11000d26 	beq	r2,r4,853c <___vfprintf_internal_r+0x228>
    8508:	01001e04 	movi	r4,120
    850c:	11000a26 	beq	r2,r4,8538 <___vfprintf_internal_r+0x224>
    8510:	0000b906 	br	87f8 <___vfprintf_internal_r+0x4e4>
    8514:	d8c00a17 	ldw	r3,40(sp)
    8518:	b7000104 	addi	fp,r22,4
    851c:	18000726 	beq	r3,zero,853c <___vfprintf_internal_r+0x228>
    8520:	df000d15 	stw	fp,52(sp)
    8524:	b5c00017 	ldw	r23,0(r22)
    8528:	b800080e 	bge	r23,zero,854c <___vfprintf_internal_r+0x238>
    852c:	05efc83a 	sub	r23,zero,r23
    8530:	02400044 	movi	r9,1
    8534:	00000606 	br	8550 <___vfprintf_internal_r+0x23c>
    8538:	05400404 	movi	r21,16
    853c:	b0c00104 	addi	r3,r22,4
    8540:	d8c00d15 	stw	r3,52(sp)
    8544:	b5c00017 	ldw	r23,0(r22)
    8548:	d8000a15 	stw	zero,40(sp)
    854c:	0013883a 	mov	r9,zero
    8550:	d839883a 	mov	fp,sp
    8554:	b8001726 	beq	r23,zero,85b4 <___vfprintf_internal_r+0x2a0>
    8558:	a80b883a 	mov	r5,r21
    855c:	b809883a 	mov	r4,r23
    8560:	da401015 	stw	r9,64(sp)
    8564:	0008a640 	call	8a64 <__udivsi3>
    8568:	a80b883a 	mov	r5,r21
    856c:	1009883a 	mov	r4,r2
    8570:	102d883a 	mov	r22,r2
    8574:	0008b200 	call	8b20 <__mulsi3>
    8578:	b885c83a 	sub	r2,r23,r2
    857c:	00c00244 	movi	r3,9
    8580:	da401017 	ldw	r9,64(sp)
    8584:	18800216 	blt	r3,r2,8590 <___vfprintf_internal_r+0x27c>
    8588:	10800c04 	addi	r2,r2,48
    858c:	00000506 	br	85a4 <___vfprintf_internal_r+0x290>
    8590:	d8c00e17 	ldw	r3,56(sp)
    8594:	18000226 	beq	r3,zero,85a0 <___vfprintf_internal_r+0x28c>
    8598:	10800dc4 	addi	r2,r2,55
    859c:	00000106 	br	85a4 <___vfprintf_internal_r+0x290>
    85a0:	108015c4 	addi	r2,r2,87
    85a4:	e0800005 	stb	r2,0(fp)
    85a8:	b02f883a 	mov	r23,r22
    85ac:	e7000044 	addi	fp,fp,1
    85b0:	003fe806 	br	8554 <_gp+0xffff75f0>
    85b4:	e6efc83a 	sub	r23,fp,sp
    85b8:	9dc5c83a 	sub	r2,r19,r23
    85bc:	0080090e 	bge	zero,r2,85e4 <___vfprintf_internal_r+0x2d0>
    85c0:	e085883a 	add	r2,fp,r2
    85c4:	01400c04 	movi	r5,48
    85c8:	d8c00917 	ldw	r3,36(sp)
    85cc:	e009883a 	mov	r4,fp
    85d0:	e0c0032e 	bgeu	fp,r3,85e0 <___vfprintf_internal_r+0x2cc>
    85d4:	e7000044 	addi	fp,fp,1
    85d8:	21400005 	stb	r5,0(r4)
    85dc:	e0bffa1e 	bne	fp,r2,85c8 <_gp+0xffff7664>
    85e0:	e6efc83a 	sub	r23,fp,sp
    85e4:	d8c00b17 	ldw	r3,44(sp)
    85e8:	4dd1883a 	add	r8,r9,r23
    85ec:	922dc83a 	sub	r22,r18,r8
    85f0:	18001626 	beq	r3,zero,864c <___vfprintf_internal_r+0x338>
    85f4:	48000a26 	beq	r9,zero,8620 <___vfprintf_internal_r+0x30c>
    85f8:	00800b44 	movi	r2,45
    85fc:	d8800805 	stb	r2,32(sp)
    8600:	88800117 	ldw	r2,4(r17)
    8604:	01c00044 	movi	r7,1
    8608:	d9800804 	addi	r6,sp,32
    860c:	880b883a 	mov	r5,r17
    8610:	a009883a 	mov	r4,r20
    8614:	103ee83a 	callr	r2
    8618:	10004a1e 	bne	r2,zero,8744 <___vfprintf_internal_r+0x430>
    861c:	84000044 	addi	r16,r16,1
    8620:	0580070e 	bge	zero,r22,8640 <___vfprintf_internal_r+0x32c>
    8624:	b00f883a 	mov	r7,r22
    8628:	01800c04 	movi	r6,48
    862c:	880b883a 	mov	r5,r17
    8630:	a009883a 	mov	r4,r20
    8634:	00082a80 	call	82a8 <print_repeat>
    8638:	1000421e 	bne	r2,zero,8744 <___vfprintf_internal_r+0x430>
    863c:	85a1883a 	add	r16,r16,r22
    8640:	e02d883a 	mov	r22,fp
    8644:	bf2fc83a 	sub	r23,r23,fp
    8648:	00002006 	br	86cc <___vfprintf_internal_r+0x3b8>
    864c:	0580090e 	bge	zero,r22,8674 <___vfprintf_internal_r+0x360>
    8650:	b00f883a 	mov	r7,r22
    8654:	01800804 	movi	r6,32
    8658:	880b883a 	mov	r5,r17
    865c:	a009883a 	mov	r4,r20
    8660:	da401015 	stw	r9,64(sp)
    8664:	00082a80 	call	82a8 <print_repeat>
    8668:	da401017 	ldw	r9,64(sp)
    866c:	1000351e 	bne	r2,zero,8744 <___vfprintf_internal_r+0x430>
    8670:	85a1883a 	add	r16,r16,r22
    8674:	483ff226 	beq	r9,zero,8640 <_gp+0xffff76dc>
    8678:	00800b44 	movi	r2,45
    867c:	d8800805 	stb	r2,32(sp)
    8680:	88800117 	ldw	r2,4(r17)
    8684:	01c00044 	movi	r7,1
    8688:	d9800804 	addi	r6,sp,32
    868c:	880b883a 	mov	r5,r17
    8690:	a009883a 	mov	r4,r20
    8694:	103ee83a 	callr	r2
    8698:	10002a1e 	bne	r2,zero,8744 <___vfprintf_internal_r+0x430>
    869c:	84000044 	addi	r16,r16,1
    86a0:	003fe706 	br	8640 <_gp+0xffff76dc>
    86a4:	b5bfffc4 	addi	r22,r22,-1
    86a8:	b0800003 	ldbu	r2,0(r22)
    86ac:	01c00044 	movi	r7,1
    86b0:	d9800804 	addi	r6,sp,32
    86b4:	d8800805 	stb	r2,32(sp)
    86b8:	88800117 	ldw	r2,4(r17)
    86bc:	880b883a 	mov	r5,r17
    86c0:	a009883a 	mov	r4,r20
    86c4:	103ee83a 	callr	r2
    86c8:	10001e1e 	bne	r2,zero,8744 <___vfprintf_internal_r+0x430>
    86cc:	8585c83a 	sub	r2,r16,r22
    86d0:	b5c9883a 	add	r4,r22,r23
    86d4:	e085883a 	add	r2,fp,r2
    86d8:	013ff216 	blt	zero,r4,86a4 <_gp+0xffff7740>
    86dc:	1021883a 	mov	r16,r2
    86e0:	dd800d17 	ldw	r22,52(sp)
    86e4:	00004406 	br	87f8 <___vfprintf_internal_r+0x4e4>
    86e8:	00800044 	movi	r2,1
    86ec:	1480080e 	bge	r2,r18,8710 <___vfprintf_internal_r+0x3fc>
    86f0:	95ffffc4 	addi	r23,r18,-1
    86f4:	b80f883a 	mov	r7,r23
    86f8:	01800804 	movi	r6,32
    86fc:	880b883a 	mov	r5,r17
    8700:	a009883a 	mov	r4,r20
    8704:	00082a80 	call	82a8 <print_repeat>
    8708:	10000e1e 	bne	r2,zero,8744 <___vfprintf_internal_r+0x430>
    870c:	85e1883a 	add	r16,r16,r23
    8710:	b0800017 	ldw	r2,0(r22)
    8714:	01c00044 	movi	r7,1
    8718:	d80d883a 	mov	r6,sp
    871c:	d8800005 	stb	r2,0(sp)
    8720:	88800117 	ldw	r2,4(r17)
    8724:	880b883a 	mov	r5,r17
    8728:	a009883a 	mov	r4,r20
    872c:	b5c00104 	addi	r23,r22,4
    8730:	103ee83a 	callr	r2
    8734:	1000031e 	bne	r2,zero,8744 <___vfprintf_internal_r+0x430>
    8738:	84000044 	addi	r16,r16,1
    873c:	b82d883a 	mov	r22,r23
    8740:	00002d06 	br	87f8 <___vfprintf_internal_r+0x4e4>
    8744:	00bfffc4 	movi	r2,-1
    8748:	00003106 	br	8810 <___vfprintf_internal_r+0x4fc>
    874c:	b5c00017 	ldw	r23,0(r22)
    8750:	b7000104 	addi	fp,r22,4
    8754:	b809883a 	mov	r4,r23
    8758:	000828c0 	call	828c <strlen>
    875c:	9091c83a 	sub	r8,r18,r2
    8760:	102d883a 	mov	r22,r2
    8764:	0200090e 	bge	zero,r8,878c <___vfprintf_internal_r+0x478>
    8768:	400f883a 	mov	r7,r8
    876c:	01800804 	movi	r6,32
    8770:	880b883a 	mov	r5,r17
    8774:	a009883a 	mov	r4,r20
    8778:	da001015 	stw	r8,64(sp)
    877c:	00082a80 	call	82a8 <print_repeat>
    8780:	da001017 	ldw	r8,64(sp)
    8784:	103fef1e 	bne	r2,zero,8744 <_gp+0xffff77e0>
    8788:	8221883a 	add	r16,r16,r8
    878c:	88800117 	ldw	r2,4(r17)
    8790:	b00f883a 	mov	r7,r22
    8794:	b80d883a 	mov	r6,r23
    8798:	880b883a 	mov	r5,r17
    879c:	a009883a 	mov	r4,r20
    87a0:	103ee83a 	callr	r2
    87a4:	103fe71e 	bne	r2,zero,8744 <_gp+0xffff77e0>
    87a8:	85a1883a 	add	r16,r16,r22
    87ac:	e02d883a 	mov	r22,fp
    87b0:	00001106 	br	87f8 <___vfprintf_internal_r+0x4e4>
    87b4:	00c00044 	movi	r3,1
    87b8:	04ffffc4 	movi	r19,-1
    87bc:	d8000e15 	stw	zero,56(sp)
    87c0:	d8c00a15 	stw	r3,40(sp)
    87c4:	05400284 	movi	r21,10
    87c8:	9825883a 	mov	r18,r19
    87cc:	d8000c15 	stw	zero,48(sp)
    87d0:	d8000b15 	stw	zero,44(sp)
    87d4:	182f883a 	mov	r23,r3
    87d8:	00000806 	br	87fc <___vfprintf_internal_r+0x4e8>
    87dc:	ddc00b15 	stw	r23,44(sp)
    87e0:	05c00084 	movi	r23,2
    87e4:	00000506 	br	87fc <___vfprintf_internal_r+0x4e8>
    87e8:	00c00044 	movi	r3,1
    87ec:	d8c00c15 	stw	r3,48(sp)
    87f0:	05c000c4 	movi	r23,3
    87f4:	00000106 	br	87fc <___vfprintf_internal_r+0x4e8>
    87f8:	002f883a 	mov	r23,zero
    87fc:	d8c00f17 	ldw	r3,60(sp)
    8800:	18c00044 	addi	r3,r3,1
    8804:	d8c00f15 	stw	r3,60(sp)
    8808:	003edc06 	br	837c <_gp+0xffff7418>
    880c:	8005883a 	mov	r2,r16
    8810:	dfc01a17 	ldw	ra,104(sp)
    8814:	df001917 	ldw	fp,100(sp)
    8818:	ddc01817 	ldw	r23,96(sp)
    881c:	dd801717 	ldw	r22,92(sp)
    8820:	dd401617 	ldw	r21,88(sp)
    8824:	dd001517 	ldw	r20,84(sp)
    8828:	dcc01417 	ldw	r19,80(sp)
    882c:	dc801317 	ldw	r18,76(sp)
    8830:	dc401217 	ldw	r17,72(sp)
    8834:	dc001117 	ldw	r16,68(sp)
    8838:	dec01b04 	addi	sp,sp,108
    883c:	f800283a 	ret

00008840 <__vfprintf_internal>:
    8840:	00800074 	movhi	r2,1
    8844:	10a3db04 	addi	r2,r2,-28820
    8848:	300f883a 	mov	r7,r6
    884c:	280d883a 	mov	r6,r5
    8850:	200b883a 	mov	r5,r4
    8854:	11000017 	ldw	r4,0(r2)
    8858:	00083141 	jmpi	8314 <___vfprintf_internal_r>

0000885c <__sfvwrite_small_dev>:
    885c:	2880000b 	ldhu	r2,0(r5)
    8860:	1080020c 	andi	r2,r2,8
    8864:	10002126 	beq	r2,zero,88ec <__sfvwrite_small_dev+0x90>
    8868:	2880008f 	ldh	r2,2(r5)
    886c:	defffa04 	addi	sp,sp,-24
    8870:	dc000015 	stw	r16,0(sp)
    8874:	dfc00515 	stw	ra,20(sp)
    8878:	dd000415 	stw	r20,16(sp)
    887c:	dcc00315 	stw	r19,12(sp)
    8880:	dc800215 	stw	r18,8(sp)
    8884:	dc400115 	stw	r17,4(sp)
    8888:	2821883a 	mov	r16,r5
    888c:	10001216 	blt	r2,zero,88d8 <__sfvwrite_small_dev+0x7c>
    8890:	2027883a 	mov	r19,r4
    8894:	3025883a 	mov	r18,r6
    8898:	3823883a 	mov	r17,r7
    889c:	05010004 	movi	r20,1024
    88a0:	04400b0e 	bge	zero,r17,88d0 <__sfvwrite_small_dev+0x74>
    88a4:	880f883a 	mov	r7,r17
    88a8:	a440010e 	bge	r20,r17,88b0 <__sfvwrite_small_dev+0x54>
    88ac:	01c10004 	movi	r7,1024
    88b0:	8140008f 	ldh	r5,2(r16)
    88b4:	900d883a 	mov	r6,r18
    88b8:	9809883a 	mov	r4,r19
    88bc:	00089140 	call	8914 <_write_r>
    88c0:	0080050e 	bge	zero,r2,88d8 <__sfvwrite_small_dev+0x7c>
    88c4:	88a3c83a 	sub	r17,r17,r2
    88c8:	90a5883a 	add	r18,r18,r2
    88cc:	003ff406 	br	88a0 <_gp+0xffff793c>
    88d0:	0005883a 	mov	r2,zero
    88d4:	00000706 	br	88f4 <__sfvwrite_small_dev+0x98>
    88d8:	8080000b 	ldhu	r2,0(r16)
    88dc:	10801014 	ori	r2,r2,64
    88e0:	8080000d 	sth	r2,0(r16)
    88e4:	00bfffc4 	movi	r2,-1
    88e8:	00000206 	br	88f4 <__sfvwrite_small_dev+0x98>
    88ec:	00bfffc4 	movi	r2,-1
    88f0:	f800283a 	ret
    88f4:	dfc00517 	ldw	ra,20(sp)
    88f8:	dd000417 	ldw	r20,16(sp)
    88fc:	dcc00317 	ldw	r19,12(sp)
    8900:	dc800217 	ldw	r18,8(sp)
    8904:	dc400117 	ldw	r17,4(sp)
    8908:	dc000017 	ldw	r16,0(sp)
    890c:	dec00604 	addi	sp,sp,24
    8910:	f800283a 	ret

00008914 <_write_r>:
    8914:	defffd04 	addi	sp,sp,-12
    8918:	dc000015 	stw	r16,0(sp)
    891c:	04000074 	movhi	r16,1
    8920:	dc400115 	stw	r17,4(sp)
    8924:	84243e04 	addi	r16,r16,-28424
    8928:	2023883a 	mov	r17,r4
    892c:	2809883a 	mov	r4,r5
    8930:	300b883a 	mov	r5,r6
    8934:	380d883a 	mov	r6,r7
    8938:	dfc00215 	stw	ra,8(sp)
    893c:	80000015 	stw	zero,0(r16)
    8940:	0008c980 	call	8c98 <write>
    8944:	00ffffc4 	movi	r3,-1
    8948:	10c0031e 	bne	r2,r3,8958 <_write_r+0x44>
    894c:	80c00017 	ldw	r3,0(r16)
    8950:	18000126 	beq	r3,zero,8958 <_write_r+0x44>
    8954:	88c00015 	stw	r3,0(r17)
    8958:	dfc00217 	ldw	ra,8(sp)
    895c:	dc400117 	ldw	r17,4(sp)
    8960:	dc000017 	ldw	r16,0(sp)
    8964:	dec00304 	addi	sp,sp,12
    8968:	f800283a 	ret

0000896c <__divsi3>:
    896c:	20001b16 	blt	r4,zero,89dc <__divsi3+0x70>
    8970:	000f883a 	mov	r7,zero
    8974:	28001616 	blt	r5,zero,89d0 <__divsi3+0x64>
    8978:	200d883a 	mov	r6,r4
    897c:	29001a2e 	bgeu	r5,r4,89e8 <__divsi3+0x7c>
    8980:	00800804 	movi	r2,32
    8984:	00c00044 	movi	r3,1
    8988:	00000106 	br	8990 <__divsi3+0x24>
    898c:	10000d26 	beq	r2,zero,89c4 <__divsi3+0x58>
    8990:	294b883a 	add	r5,r5,r5
    8994:	10bfffc4 	addi	r2,r2,-1
    8998:	18c7883a 	add	r3,r3,r3
    899c:	293ffb36 	bltu	r5,r4,898c <_gp+0xffff7a28>
    89a0:	0005883a 	mov	r2,zero
    89a4:	18000726 	beq	r3,zero,89c4 <__divsi3+0x58>
    89a8:	0005883a 	mov	r2,zero
    89ac:	31400236 	bltu	r6,r5,89b8 <__divsi3+0x4c>
    89b0:	314dc83a 	sub	r6,r6,r5
    89b4:	10c4b03a 	or	r2,r2,r3
    89b8:	1806d07a 	srli	r3,r3,1
    89bc:	280ad07a 	srli	r5,r5,1
    89c0:	183ffa1e 	bne	r3,zero,89ac <_gp+0xffff7a48>
    89c4:	38000126 	beq	r7,zero,89cc <__divsi3+0x60>
    89c8:	0085c83a 	sub	r2,zero,r2
    89cc:	f800283a 	ret
    89d0:	014bc83a 	sub	r5,zero,r5
    89d4:	39c0005c 	xori	r7,r7,1
    89d8:	003fe706 	br	8978 <_gp+0xffff7a14>
    89dc:	0109c83a 	sub	r4,zero,r4
    89e0:	01c00044 	movi	r7,1
    89e4:	003fe306 	br	8974 <_gp+0xffff7a10>
    89e8:	00c00044 	movi	r3,1
    89ec:	003fee06 	br	89a8 <_gp+0xffff7a44>

000089f0 <__modsi3>:
    89f0:	20001716 	blt	r4,zero,8a50 <__modsi3+0x60>
    89f4:	000f883a 	mov	r7,zero
    89f8:	2005883a 	mov	r2,r4
    89fc:	28001216 	blt	r5,zero,8a48 <__modsi3+0x58>
    8a00:	2900162e 	bgeu	r5,r4,8a5c <__modsi3+0x6c>
    8a04:	01800804 	movi	r6,32
    8a08:	00c00044 	movi	r3,1
    8a0c:	00000106 	br	8a14 <__modsi3+0x24>
    8a10:	30000a26 	beq	r6,zero,8a3c <__modsi3+0x4c>
    8a14:	294b883a 	add	r5,r5,r5
    8a18:	31bfffc4 	addi	r6,r6,-1
    8a1c:	18c7883a 	add	r3,r3,r3
    8a20:	293ffb36 	bltu	r5,r4,8a10 <_gp+0xffff7aac>
    8a24:	18000526 	beq	r3,zero,8a3c <__modsi3+0x4c>
    8a28:	1806d07a 	srli	r3,r3,1
    8a2c:	11400136 	bltu	r2,r5,8a34 <__modsi3+0x44>
    8a30:	1145c83a 	sub	r2,r2,r5
    8a34:	280ad07a 	srli	r5,r5,1
    8a38:	183ffb1e 	bne	r3,zero,8a28 <_gp+0xffff7ac4>
    8a3c:	38000126 	beq	r7,zero,8a44 <__modsi3+0x54>
    8a40:	0085c83a 	sub	r2,zero,r2
    8a44:	f800283a 	ret
    8a48:	014bc83a 	sub	r5,zero,r5
    8a4c:	003fec06 	br	8a00 <_gp+0xffff7a9c>
    8a50:	0109c83a 	sub	r4,zero,r4
    8a54:	01c00044 	movi	r7,1
    8a58:	003fe706 	br	89f8 <_gp+0xffff7a94>
    8a5c:	00c00044 	movi	r3,1
    8a60:	003ff106 	br	8a28 <_gp+0xffff7ac4>

00008a64 <__udivsi3>:
    8a64:	200d883a 	mov	r6,r4
    8a68:	2900152e 	bgeu	r5,r4,8ac0 <__udivsi3+0x5c>
    8a6c:	28001416 	blt	r5,zero,8ac0 <__udivsi3+0x5c>
    8a70:	00800804 	movi	r2,32
    8a74:	00c00044 	movi	r3,1
    8a78:	00000206 	br	8a84 <__udivsi3+0x20>
    8a7c:	10000e26 	beq	r2,zero,8ab8 <__udivsi3+0x54>
    8a80:	28000516 	blt	r5,zero,8a98 <__udivsi3+0x34>
    8a84:	294b883a 	add	r5,r5,r5
    8a88:	10bfffc4 	addi	r2,r2,-1
    8a8c:	18c7883a 	add	r3,r3,r3
    8a90:	293ffa36 	bltu	r5,r4,8a7c <_gp+0xffff7b18>
    8a94:	18000826 	beq	r3,zero,8ab8 <__udivsi3+0x54>
    8a98:	0005883a 	mov	r2,zero
    8a9c:	31400236 	bltu	r6,r5,8aa8 <__udivsi3+0x44>
    8aa0:	314dc83a 	sub	r6,r6,r5
    8aa4:	10c4b03a 	or	r2,r2,r3
    8aa8:	1806d07a 	srli	r3,r3,1
    8aac:	280ad07a 	srli	r5,r5,1
    8ab0:	183ffa1e 	bne	r3,zero,8a9c <_gp+0xffff7b38>
    8ab4:	f800283a 	ret
    8ab8:	0005883a 	mov	r2,zero
    8abc:	f800283a 	ret
    8ac0:	00c00044 	movi	r3,1
    8ac4:	003ff406 	br	8a98 <_gp+0xffff7b34>

00008ac8 <__umodsi3>:
    8ac8:	2005883a 	mov	r2,r4
    8acc:	2900122e 	bgeu	r5,r4,8b18 <__umodsi3+0x50>
    8ad0:	28001116 	blt	r5,zero,8b18 <__umodsi3+0x50>
    8ad4:	01800804 	movi	r6,32
    8ad8:	00c00044 	movi	r3,1
    8adc:	00000206 	br	8ae8 <__umodsi3+0x20>
    8ae0:	30000c26 	beq	r6,zero,8b14 <__umodsi3+0x4c>
    8ae4:	28000516 	blt	r5,zero,8afc <__umodsi3+0x34>
    8ae8:	294b883a 	add	r5,r5,r5
    8aec:	31bfffc4 	addi	r6,r6,-1
    8af0:	18c7883a 	add	r3,r3,r3
    8af4:	293ffa36 	bltu	r5,r4,8ae0 <_gp+0xffff7b7c>
    8af8:	18000626 	beq	r3,zero,8b14 <__umodsi3+0x4c>
    8afc:	1806d07a 	srli	r3,r3,1
    8b00:	11400136 	bltu	r2,r5,8b08 <__umodsi3+0x40>
    8b04:	1145c83a 	sub	r2,r2,r5
    8b08:	280ad07a 	srli	r5,r5,1
    8b0c:	183ffb1e 	bne	r3,zero,8afc <_gp+0xffff7b98>
    8b10:	f800283a 	ret
    8b14:	f800283a 	ret
    8b18:	00c00044 	movi	r3,1
    8b1c:	003ff706 	br	8afc <_gp+0xffff7b98>

00008b20 <__mulsi3>:
    8b20:	0005883a 	mov	r2,zero
    8b24:	20000726 	beq	r4,zero,8b44 <__mulsi3+0x24>
    8b28:	20c0004c 	andi	r3,r4,1
    8b2c:	2008d07a 	srli	r4,r4,1
    8b30:	18000126 	beq	r3,zero,8b38 <__mulsi3+0x18>
    8b34:	1145883a 	add	r2,r2,r5
    8b38:	294b883a 	add	r5,r5,r5
    8b3c:	203ffa1e 	bne	r4,zero,8b28 <_gp+0xffff7bc4>
    8b40:	f800283a 	ret
    8b44:	f800283a 	ret

00008b48 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    8b48:	00800074 	movhi	r2,1
    8b4c:	10a3c304 	addi	r2,r2,-28916
    8b50:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    8b54:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    8b58:	01000074 	movhi	r4,1
    8b5c:	01800044 	movi	r6,1
    8b60:	d80b883a 	mov	r5,sp
    8b64:	2123dd04 	addi	r4,r4,-28812
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
    8b68:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
    8b6c:	0008d1c0 	call	8d1c <altera_avalon_jtag_uart_read>
    8b70:	0080020e 	bge	zero,r2,8b7c <alt_getchar+0x34>
        return -1;
    }
    return c;
    8b74:	d8800007 	ldb	r2,0(sp)
    8b78:	00000106 	br	8b80 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
    8b7c:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
    8b80:	dfc00117 	ldw	ra,4(sp)
    8b84:	dec00204 	addi	sp,sp,8
    8b88:	f800283a 	ret

00008b8c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8b8c:	deffff04 	addi	sp,sp,-4
    8b90:	01000074 	movhi	r4,1
    8b94:	01400074 	movhi	r5,1
    8b98:	dfc00015 	stw	ra,0(sp)
    8b9c:	21238b04 	addi	r4,r4,-29140
    8ba0:	2963e404 	addi	r5,r5,-28784

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8ba4:	2140061e 	bne	r4,r5,8bc0 <alt_load+0x34>
    8ba8:	01000074 	movhi	r4,1
    8bac:	01400074 	movhi	r5,1
    8bb0:	21200804 	addi	r4,r4,-32736
    8bb4:	29600804 	addi	r5,r5,-32736
    8bb8:	2140121e 	bne	r4,r5,8c04 <alt_load+0x78>
    8bbc:	00000b06 	br	8bec <alt_load+0x60>
    8bc0:	00c00074 	movhi	r3,1
    8bc4:	18e3e404 	addi	r3,r3,-28784
    8bc8:	1907c83a 	sub	r3,r3,r4
    8bcc:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8bd0:	10fff526 	beq	r2,r3,8ba8 <_gp+0xffff7c44>
    {
      *to++ = *from++;
    8bd4:	114f883a 	add	r7,r2,r5
    8bd8:	39c00017 	ldw	r7,0(r7)
    8bdc:	110d883a 	add	r6,r2,r4
    8be0:	10800104 	addi	r2,r2,4
    8be4:	31c00015 	stw	r7,0(r6)
    8be8:	003ff906 	br	8bd0 <_gp+0xffff7c6c>
    8bec:	01000074 	movhi	r4,1
    8bf0:	01400074 	movhi	r5,1
    8bf4:	21237104 	addi	r4,r4,-29244
    8bf8:	29637104 	addi	r5,r5,-29244

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8bfc:	2140101e 	bne	r4,r5,8c40 <alt_load+0xb4>
    8c00:	00000b06 	br	8c30 <alt_load+0xa4>
    8c04:	00c00074 	movhi	r3,1
    8c08:	18e00804 	addi	r3,r3,-32736
    8c0c:	1907c83a 	sub	r3,r3,r4
    8c10:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8c14:	10fff526 	beq	r2,r3,8bec <_gp+0xffff7c88>
    {
      *to++ = *from++;
    8c18:	114f883a 	add	r7,r2,r5
    8c1c:	39c00017 	ldw	r7,0(r7)
    8c20:	110d883a 	add	r6,r2,r4
    8c24:	10800104 	addi	r2,r2,4
    8c28:	31c00015 	stw	r7,0(r6)
    8c2c:	003ff906 	br	8c14 <_gp+0xffff7cb0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8c30:	0008dac0 	call	8dac <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    8c34:	dfc00017 	ldw	ra,0(sp)
    8c38:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8c3c:	0008db81 	jmpi	8db8 <alt_icache_flush_all>
    8c40:	00c00074 	movhi	r3,1
    8c44:	18e38b04 	addi	r3,r3,-29140
    8c48:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    8c4c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    8c50:	18bff726 	beq	r3,r2,8c30 <_gp+0xffff7ccc>
    {
      *to++ = *from++;
    8c54:	114f883a 	add	r7,r2,r5
    8c58:	39c00017 	ldw	r7,0(r7)
    8c5c:	110d883a 	add	r6,r2,r4
    8c60:	10800104 	addi	r2,r2,4
    8c64:	31c00015 	stw	r7,0(r6)
    8c68:	003ff906 	br	8c50 <_gp+0xffff7cec>

00008c6c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8c6c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8c70:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8c74:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8c78:	0008cf80 	call	8cf8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8c7c:	0008d180 	call	8d18 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8c80:	d1a06617 	ldw	r6,-32360(gp)
    8c84:	d1606717 	ldw	r5,-32356(gp)
    8c88:	d1206817 	ldw	r4,-32352(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    8c8c:	dfc00017 	ldw	ra,0(sp)
    8c90:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    8c94:	00081281 	jmpi	8128 <main>

00008c98 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    8c98:	00800044 	movi	r2,1
    8c9c:	20800226 	beq	r4,r2,8ca8 <write+0x10>
    8ca0:	00800084 	movi	r2,2
    8ca4:	2080041e 	bne	r4,r2,8cb8 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    8ca8:	01000074 	movhi	r4,1
    8cac:	000f883a 	mov	r7,zero
    8cb0:	2123dd04 	addi	r4,r4,-28812
    8cb4:	0008d781 	jmpi	8d78 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    8cb8:	d0a00a17 	ldw	r2,-32728(gp)
    8cbc:	10000926 	beq	r2,zero,8ce4 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    8cc0:	deffff04 	addi	sp,sp,-4
    8cc4:	dfc00015 	stw	ra,0(sp)
    8cc8:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    8ccc:	00c01444 	movi	r3,81
    8cd0:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    8cd4:	00bfffc4 	movi	r2,-1
    8cd8:	dfc00017 	ldw	ra,0(sp)
    8cdc:	dec00104 	addi	sp,sp,4
    8ce0:	f800283a 	ret
    8ce4:	d0a06504 	addi	r2,gp,-32364
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    8ce8:	00c01444 	movi	r3,81
    8cec:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    8cf0:	00bfffc4 	movi	r2,-1
    8cf4:	f800283a 	ret

00008cf8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    8cf8:	deffff04 	addi	sp,sp,-4
    8cfc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    8d00:	0008dbc0 	call	8dbc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8d04:	00800044 	movi	r2,1
    8d08:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8d0c:	dfc00017 	ldw	ra,0(sp)
    8d10:	dec00104 	addi	sp,sp,4
    8d14:	f800283a 	ret

00008d18 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    8d18:	f800283a 	ret

00008d1c <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
    8d1c:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
    8d20:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    8d24:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    8d28:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    8d2c:	11800b2e 	bgeu	r2,r6,8d5c <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    8d30:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    8d34:	1a60000c 	andi	r9,r3,32768
    8d38:	48000326 	beq	r9,zero,8d48 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    8d3c:	10c00005 	stb	r3,0(r2)
    8d40:	10800044 	addi	r2,r2,1
    8d44:	003ff906 	br	8d2c <_gp+0xffff7dc8>
    else if (ptr != buffer)
    8d48:	11400226 	beq	r2,r5,8d54 <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
    8d4c:	1145c83a 	sub	r2,r2,r5
    8d50:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
    8d54:	403ff526 	beq	r8,zero,8d2c <_gp+0xffff7dc8>
    8d58:	00000106 	br	8d60 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
    8d5c:	117ffb1e 	bne	r2,r5,8d4c <_gp+0xffff7de8>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    8d60:	39d0000c 	andi	r7,r7,16384
    8d64:	3800021e 	bne	r7,zero,8d70 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
    8d68:	00bffec4 	movi	r2,-5
    8d6c:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    8d70:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
    8d74:	f800283a 	ret

00008d78 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    8d78:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    8d7c:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    8d80:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8d84:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    8d88:	2980072e 	bgeu	r5,r6,8da8 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8d8c:	38c00037 	ldwio	r3,0(r7)
    8d90:	18ffffec 	andhi	r3,r3,65535
    8d94:	183ffc26 	beq	r3,zero,8d88 <_gp+0xffff7e24>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8d98:	28c00007 	ldb	r3,0(r5)
    8d9c:	20c00035 	stwio	r3,0(r4)
    8da0:	29400044 	addi	r5,r5,1
    8da4:	003ff806 	br	8d88 <_gp+0xffff7e24>

  return count;
}
    8da8:	f800283a 	ret

00008dac <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    8dac:	f800283a 	ret

00008db0 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    8db0:	3005883a 	mov	r2,r6
    8db4:	f800283a 	ret

00008db8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    8db8:	f800283a 	ret

00008dbc <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    8dbc:	000170fa 	wrctl	ienable,zero
    8dc0:	f800283a 	ret
