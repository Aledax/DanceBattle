
slave_de1.elf:     file format elf32-littlenios2
slave_de1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x00000b88 memsz 0x00000b88 flags r-x
    LOAD off    0x00001ba8 vaddr 0x00001ba8 paddr 0x00001c9c align 2**12
         filesz 0x000000f4 memsz 0x000000f4 flags rw-
    LOAD off    0x00001d90 vaddr 0x00001d90 paddr 0x00001d90 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00001020  00001020  00001c9c  2**0
                  CONTENTS
  2 .text         00000b80  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000008  00001ba0  00001ba0  00001ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f4  00001ba8  00001c9c  00001ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00001d90  00001d90  00001d90  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00001da0  00001da0  00001c9c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001c9c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000288  00000000  00000000  00001cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000034e3  00000000  00000000  00001f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000125a  00000000  00000000  0000542b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000155b  00000000  00000000  00006685  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000360  00000000  00000000  00007be0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000f8e  00000000  00000000  00007f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001316  00000000  00000000  00008ece  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000a1e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000220  00000000  00000000  0000a1f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000b456  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000b459  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000b465  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000b466  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0000b467  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000b472  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0000b47d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  0000b488  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000030  00000000  00000000  0000b494  2**0
                  CONTENTS, READONLY
 26 .jdi          000053cc  00000000  00000000  0000b4c4  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003846f  00000000  00000000  00010890  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001020 l    d  .text	00000000 .text
00001ba0 l    d  .rodata	00000000 .rodata
00001ba8 l    d  .rwdata	00000000 .rwdata
00001d90 l    d  .bss	00000000 .bss
00001da0 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../slave_de1_bsp//obj/HAL/src/crt0.o
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00001110 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00001ba8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00001aac g     F .text	0000002c alt_main
00001c9c g       *ABS*	00000000 __flash_rwdata_start
000010c4 g     F .text	0000004c printf
00001b98 g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
00001d90 g     O .bss	00000004 errno
00001d98 g     O .bss	00000004 alt_argv
00009c88 g       *ABS*	00000000 _gp
00001088 g     F .text	0000003c _printf_r
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000018e8 g     F .text	00000064 .hidden __udivsi3
00001c88 g     O .rwdata	00000004 _global_impure_ptr
00001da0 g       *ABS*	00000000 __bss_end
00001b90 g     F .text	00000004 alt_dcache_flush_all
00001c9c g       *ABS*	00000000 __ram_rwdata_end
00001ad8 g     F .text	00000060 write
00001ba8 g       *ABS*	00000000 __ram_rodata_end
00001c94 g     O .rwdata	00000004 jtag_uart_0
0000194c g     F .text	00000058 .hidden __umodsi3
00001da0 g       *ABS*	00000000 end
00002000 g       *ABS*	00000000 __alt_stack_pointer
00001b5c g     F .text	00000034 altera_avalon_jtag_uart_write
0000117c g     F .text	0000052c ___vfprintf_internal_r
00001020 g     F .text	0000003c _start
00001b58 g     F .text	00000004 alt_sys_init
000019a4 g     F .text	00000028 .hidden __mulsi3
00001ba8 g       *ABS*	00000000 __ram_rwdata_start
00001ba0 g       *ABS*	00000000 __ram_rodata_start
00001da0 g       *ABS*	00000000 __alt_stack_base
000016c4 g     F .text	000000b8 __sfvwrite_small_dev
00001d90 g       *ABS*	00000000 __bss_start
0000105c g     F .text	0000002c main
00001d94 g     O .bss	00000004 alt_envp
00001c90 g     O .rwdata	00000004 uart_0
00001c98 g     O .rwdata	00000004 alt_errno
000017f0 g     F .text	00000084 .hidden __divsi3
00001ba0 g       *ABS*	00000000 __flash_rodata_start
00001b38 g     F .text	00000020 alt_irq_init
00001798 g     F .text	00000058 _write_r
00001c8c g     O .rwdata	00000004 _impure_ptr
00001d9c g     O .bss	00000004 alt_argc
00001020 g       *ABS*	00000000 __ram_exceptions_start
00001c9c g       *ABS*	00000000 _edata
00001da0 g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
00001874 g     F .text	00000074 .hidden __modsi3
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
0000177c g     F .text	0000001c strlen
00001b94 g     F .text	00000004 alt_icache_flush_all
000016a8 g     F .text	0000001c __vfprintf_internal
000019cc g     F .text	000000e0 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a72214 	ori	gp,gp,40072
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	10876414 	ori	r2,r2,7568

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c76814 	ori	r3,r3,7584

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_gp+0xffff73bc>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	00019cc0 	call	19cc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	0001aac0 	call	1aac <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <_gp+0xffff73d0>

0000105c <main>:
#include "sys/alt_stdio.h"
#include <stdint.h>
#include "system.h"

int main()
{ 
    105c:	defffe04 	addi	sp,sp,-8
    1060:	dc000015 	stw	r16,0(sp)
    1064:	dfc00115 	stw	ra,4(sp)
  volatile uint32_t *base = COORDS_SLAVE_0_BASE;

  while (1) {
	  uint32_t data = *base;
    1068:	0021883a 	mov	r16,zero
    106c:	81400017 	ldw	r5,0(r16)
	  int x = data >> 16;
	  int y = data & 0x00FF;
	  printf("%i, %i\n", x, y);
    1070:	01000034 	movhi	r4,0
    1074:	2106e804 	addi	r4,r4,7072
    1078:	29803fcc 	andi	r6,r5,255
    107c:	280ad43a 	srli	r5,r5,16
    1080:	00010c40 	call	10c4 <printf>
    1084:	003ff906 	br	106c <_gp+0xffff73e4>

00001088 <_printf_r>:
    1088:	defffd04 	addi	sp,sp,-12
    108c:	dfc00015 	stw	ra,0(sp)
    1090:	d9800115 	stw	r6,4(sp)
    1094:	d9c00215 	stw	r7,8(sp)
    1098:	20c00217 	ldw	r3,8(r4)
    109c:	01800034 	movhi	r6,0
    10a0:	3185b104 	addi	r6,r6,5828
    10a4:	19800115 	stw	r6,4(r3)
    10a8:	280d883a 	mov	r6,r5
    10ac:	21400217 	ldw	r5,8(r4)
    10b0:	d9c00104 	addi	r7,sp,4
    10b4:	000117c0 	call	117c <___vfprintf_internal_r>
    10b8:	dfc00017 	ldw	ra,0(sp)
    10bc:	dec00304 	addi	sp,sp,12
    10c0:	f800283a 	ret

000010c4 <printf>:
    10c4:	defffc04 	addi	sp,sp,-16
    10c8:	dfc00015 	stw	ra,0(sp)
    10cc:	d9400115 	stw	r5,4(sp)
    10d0:	d9800215 	stw	r6,8(sp)
    10d4:	d9c00315 	stw	r7,12(sp)
    10d8:	00800034 	movhi	r2,0
    10dc:	10872304 	addi	r2,r2,7308
    10e0:	10800017 	ldw	r2,0(r2)
    10e4:	01400034 	movhi	r5,0
    10e8:	2945b104 	addi	r5,r5,5828
    10ec:	10c00217 	ldw	r3,8(r2)
    10f0:	d9800104 	addi	r6,sp,4
    10f4:	19400115 	stw	r5,4(r3)
    10f8:	200b883a 	mov	r5,r4
    10fc:	11000217 	ldw	r4,8(r2)
    1100:	00016a80 	call	16a8 <__vfprintf_internal>
    1104:	dfc00017 	ldw	ra,0(sp)
    1108:	dec00404 	addi	sp,sp,16
    110c:	f800283a 	ret

00001110 <print_repeat>:
    1110:	defffb04 	addi	sp,sp,-20
    1114:	dc800315 	stw	r18,12(sp)
    1118:	dc400215 	stw	r17,8(sp)
    111c:	dc000115 	stw	r16,4(sp)
    1120:	dfc00415 	stw	ra,16(sp)
    1124:	2025883a 	mov	r18,r4
    1128:	2823883a 	mov	r17,r5
    112c:	d9800005 	stb	r6,0(sp)
    1130:	3821883a 	mov	r16,r7
    1134:	04000a0e 	bge	zero,r16,1160 <print_repeat+0x50>
    1138:	88800117 	ldw	r2,4(r17)
    113c:	01c00044 	movi	r7,1
    1140:	d80d883a 	mov	r6,sp
    1144:	880b883a 	mov	r5,r17
    1148:	9009883a 	mov	r4,r18
    114c:	103ee83a 	callr	r2
    1150:	843fffc4 	addi	r16,r16,-1
    1154:	103ff726 	beq	r2,zero,1134 <_gp+0xffff74ac>
    1158:	00bfffc4 	movi	r2,-1
    115c:	00000106 	br	1164 <print_repeat+0x54>
    1160:	0005883a 	mov	r2,zero
    1164:	dfc00417 	ldw	ra,16(sp)
    1168:	dc800317 	ldw	r18,12(sp)
    116c:	dc400217 	ldw	r17,8(sp)
    1170:	dc000117 	ldw	r16,4(sp)
    1174:	dec00504 	addi	sp,sp,20
    1178:	f800283a 	ret

0000117c <___vfprintf_internal_r>:
    117c:	deffe504 	addi	sp,sp,-108
    1180:	d8c00804 	addi	r3,sp,32
    1184:	ddc01815 	stw	r23,96(sp)
    1188:	dd801715 	stw	r22,92(sp)
    118c:	dd401615 	stw	r21,88(sp)
    1190:	dd001515 	stw	r20,84(sp)
    1194:	dcc01415 	stw	r19,80(sp)
    1198:	dc801315 	stw	r18,76(sp)
    119c:	dc401215 	stw	r17,72(sp)
    11a0:	dc001115 	stw	r16,68(sp)
    11a4:	dfc01a15 	stw	ra,104(sp)
    11a8:	df001915 	stw	fp,100(sp)
    11ac:	2029883a 	mov	r20,r4
    11b0:	2823883a 	mov	r17,r5
    11b4:	382d883a 	mov	r22,r7
    11b8:	d9800f15 	stw	r6,60(sp)
    11bc:	0021883a 	mov	r16,zero
    11c0:	d8000e15 	stw	zero,56(sp)
    11c4:	d8000a15 	stw	zero,40(sp)
    11c8:	002b883a 	mov	r21,zero
    11cc:	0027883a 	mov	r19,zero
    11d0:	0025883a 	mov	r18,zero
    11d4:	d8000c15 	stw	zero,48(sp)
    11d8:	d8000b15 	stw	zero,44(sp)
    11dc:	002f883a 	mov	r23,zero
    11e0:	d8c00915 	stw	r3,36(sp)
    11e4:	d8c00f17 	ldw	r3,60(sp)
    11e8:	19000003 	ldbu	r4,0(r3)
    11ec:	20803fcc 	andi	r2,r4,255
    11f0:	1080201c 	xori	r2,r2,128
    11f4:	10bfe004 	addi	r2,r2,-128
    11f8:	10011e26 	beq	r2,zero,1674 <___vfprintf_internal_r+0x4f8>
    11fc:	00c00044 	movi	r3,1
    1200:	b8c01426 	beq	r23,r3,1254 <___vfprintf_internal_r+0xd8>
    1204:	1dc00216 	blt	r3,r23,1210 <___vfprintf_internal_r+0x94>
    1208:	b8000626 	beq	r23,zero,1224 <___vfprintf_internal_r+0xa8>
    120c:	00011506 	br	1664 <___vfprintf_internal_r+0x4e8>
    1210:	01400084 	movi	r5,2
    1214:	b9401d26 	beq	r23,r5,128c <___vfprintf_internal_r+0x110>
    1218:	014000c4 	movi	r5,3
    121c:	b9402b26 	beq	r23,r5,12cc <___vfprintf_internal_r+0x150>
    1220:	00011006 	br	1664 <___vfprintf_internal_r+0x4e8>
    1224:	01400944 	movi	r5,37
    1228:	1140fc26 	beq	r2,r5,161c <___vfprintf_internal_r+0x4a0>
    122c:	88800117 	ldw	r2,4(r17)
    1230:	d9000005 	stb	r4,0(sp)
    1234:	01c00044 	movi	r7,1
    1238:	d80d883a 	mov	r6,sp
    123c:	880b883a 	mov	r5,r17
    1240:	a009883a 	mov	r4,r20
    1244:	103ee83a 	callr	r2
    1248:	1000d81e 	bne	r2,zero,15ac <___vfprintf_internal_r+0x430>
    124c:	84000044 	addi	r16,r16,1
    1250:	00010406 	br	1664 <___vfprintf_internal_r+0x4e8>
    1254:	01400c04 	movi	r5,48
    1258:	1140fa26 	beq	r2,r5,1644 <___vfprintf_internal_r+0x4c8>
    125c:	01400944 	movi	r5,37
    1260:	11400a1e 	bne	r2,r5,128c <___vfprintf_internal_r+0x110>
    1264:	d8800005 	stb	r2,0(sp)
    1268:	88800117 	ldw	r2,4(r17)
    126c:	b80f883a 	mov	r7,r23
    1270:	d80d883a 	mov	r6,sp
    1274:	880b883a 	mov	r5,r17
    1278:	a009883a 	mov	r4,r20
    127c:	103ee83a 	callr	r2
    1280:	1000ca1e 	bne	r2,zero,15ac <___vfprintf_internal_r+0x430>
    1284:	84000044 	addi	r16,r16,1
    1288:	0000f506 	br	1660 <___vfprintf_internal_r+0x4e4>
    128c:	25fff404 	addi	r23,r4,-48
    1290:	bdc03fcc 	andi	r23,r23,255
    1294:	00c00244 	movi	r3,9
    1298:	1dc00936 	bltu	r3,r23,12c0 <___vfprintf_internal_r+0x144>
    129c:	00bfffc4 	movi	r2,-1
    12a0:	90800426 	beq	r18,r2,12b4 <___vfprintf_internal_r+0x138>
    12a4:	01400284 	movi	r5,10
    12a8:	9009883a 	mov	r4,r18
    12ac:	00019a40 	call	19a4 <__mulsi3>
    12b0:	00000106 	br	12b8 <___vfprintf_internal_r+0x13c>
    12b4:	0005883a 	mov	r2,zero
    12b8:	b8a5883a 	add	r18,r23,r2
    12bc:	0000e206 	br	1648 <___vfprintf_internal_r+0x4cc>
    12c0:	01400b84 	movi	r5,46
    12c4:	1140e426 	beq	r2,r5,1658 <___vfprintf_internal_r+0x4dc>
    12c8:	05c00084 	movi	r23,2
    12cc:	213ff404 	addi	r4,r4,-48
    12d0:	27003fcc 	andi	fp,r4,255
    12d4:	00c00244 	movi	r3,9
    12d8:	1f000936 	bltu	r3,fp,1300 <___vfprintf_internal_r+0x184>
    12dc:	00bfffc4 	movi	r2,-1
    12e0:	98800426 	beq	r19,r2,12f4 <___vfprintf_internal_r+0x178>
    12e4:	01400284 	movi	r5,10
    12e8:	9809883a 	mov	r4,r19
    12ec:	00019a40 	call	19a4 <__mulsi3>
    12f0:	00000106 	br	12f8 <___vfprintf_internal_r+0x17c>
    12f4:	0005883a 	mov	r2,zero
    12f8:	e0a7883a 	add	r19,fp,r2
    12fc:	0000d906 	br	1664 <___vfprintf_internal_r+0x4e8>
    1300:	00c01b04 	movi	r3,108
    1304:	10c0d226 	beq	r2,r3,1650 <___vfprintf_internal_r+0x4d4>
    1308:	013fffc4 	movi	r4,-1
    130c:	99000226 	beq	r19,r4,1318 <___vfprintf_internal_r+0x19c>
    1310:	d8000b15 	stw	zero,44(sp)
    1314:	00000106 	br	131c <___vfprintf_internal_r+0x1a0>
    1318:	04c00044 	movi	r19,1
    131c:	01001a44 	movi	r4,105
    1320:	11001626 	beq	r2,r4,137c <___vfprintf_internal_r+0x200>
    1324:	20800916 	blt	r4,r2,134c <___vfprintf_internal_r+0x1d0>
    1328:	010018c4 	movi	r4,99
    132c:	11008826 	beq	r2,r4,1550 <___vfprintf_internal_r+0x3d4>
    1330:	01001904 	movi	r4,100
    1334:	11001126 	beq	r2,r4,137c <___vfprintf_internal_r+0x200>
    1338:	01001604 	movi	r4,88
    133c:	1100c81e 	bne	r2,r4,1660 <___vfprintf_internal_r+0x4e4>
    1340:	00c00044 	movi	r3,1
    1344:	d8c00e15 	stw	r3,56(sp)
    1348:	00001506 	br	13a0 <___vfprintf_internal_r+0x224>
    134c:	01001cc4 	movi	r4,115
    1350:	11009826 	beq	r2,r4,15b4 <___vfprintf_internal_r+0x438>
    1354:	20800416 	blt	r4,r2,1368 <___vfprintf_internal_r+0x1ec>
    1358:	01001bc4 	movi	r4,111
    135c:	1100c01e 	bne	r2,r4,1660 <___vfprintf_internal_r+0x4e4>
    1360:	05400204 	movi	r21,8
    1364:	00000f06 	br	13a4 <___vfprintf_internal_r+0x228>
    1368:	01001d44 	movi	r4,117
    136c:	11000d26 	beq	r2,r4,13a4 <___vfprintf_internal_r+0x228>
    1370:	01001e04 	movi	r4,120
    1374:	11000a26 	beq	r2,r4,13a0 <___vfprintf_internal_r+0x224>
    1378:	0000b906 	br	1660 <___vfprintf_internal_r+0x4e4>
    137c:	d8c00a17 	ldw	r3,40(sp)
    1380:	b7000104 	addi	fp,r22,4
    1384:	18000726 	beq	r3,zero,13a4 <___vfprintf_internal_r+0x228>
    1388:	df000d15 	stw	fp,52(sp)
    138c:	b5c00017 	ldw	r23,0(r22)
    1390:	b800080e 	bge	r23,zero,13b4 <___vfprintf_internal_r+0x238>
    1394:	05efc83a 	sub	r23,zero,r23
    1398:	02400044 	movi	r9,1
    139c:	00000606 	br	13b8 <___vfprintf_internal_r+0x23c>
    13a0:	05400404 	movi	r21,16
    13a4:	b0c00104 	addi	r3,r22,4
    13a8:	d8c00d15 	stw	r3,52(sp)
    13ac:	b5c00017 	ldw	r23,0(r22)
    13b0:	d8000a15 	stw	zero,40(sp)
    13b4:	0013883a 	mov	r9,zero
    13b8:	d839883a 	mov	fp,sp
    13bc:	b8001726 	beq	r23,zero,141c <___vfprintf_internal_r+0x2a0>
    13c0:	a80b883a 	mov	r5,r21
    13c4:	b809883a 	mov	r4,r23
    13c8:	da401015 	stw	r9,64(sp)
    13cc:	00018e80 	call	18e8 <__udivsi3>
    13d0:	a80b883a 	mov	r5,r21
    13d4:	1009883a 	mov	r4,r2
    13d8:	102d883a 	mov	r22,r2
    13dc:	00019a40 	call	19a4 <__mulsi3>
    13e0:	b885c83a 	sub	r2,r23,r2
    13e4:	00c00244 	movi	r3,9
    13e8:	da401017 	ldw	r9,64(sp)
    13ec:	18800216 	blt	r3,r2,13f8 <___vfprintf_internal_r+0x27c>
    13f0:	10800c04 	addi	r2,r2,48
    13f4:	00000506 	br	140c <___vfprintf_internal_r+0x290>
    13f8:	d8c00e17 	ldw	r3,56(sp)
    13fc:	18000226 	beq	r3,zero,1408 <___vfprintf_internal_r+0x28c>
    1400:	10800dc4 	addi	r2,r2,55
    1404:	00000106 	br	140c <___vfprintf_internal_r+0x290>
    1408:	108015c4 	addi	r2,r2,87
    140c:	e0800005 	stb	r2,0(fp)
    1410:	b02f883a 	mov	r23,r22
    1414:	e7000044 	addi	fp,fp,1
    1418:	003fe806 	br	13bc <_gp+0xffff7734>
    141c:	e6efc83a 	sub	r23,fp,sp
    1420:	9dc5c83a 	sub	r2,r19,r23
    1424:	0080090e 	bge	zero,r2,144c <___vfprintf_internal_r+0x2d0>
    1428:	e085883a 	add	r2,fp,r2
    142c:	01400c04 	movi	r5,48
    1430:	d8c00917 	ldw	r3,36(sp)
    1434:	e009883a 	mov	r4,fp
    1438:	e0c0032e 	bgeu	fp,r3,1448 <___vfprintf_internal_r+0x2cc>
    143c:	e7000044 	addi	fp,fp,1
    1440:	21400005 	stb	r5,0(r4)
    1444:	e0bffa1e 	bne	fp,r2,1430 <_gp+0xffff77a8>
    1448:	e6efc83a 	sub	r23,fp,sp
    144c:	d8c00b17 	ldw	r3,44(sp)
    1450:	4dd1883a 	add	r8,r9,r23
    1454:	922dc83a 	sub	r22,r18,r8
    1458:	18001626 	beq	r3,zero,14b4 <___vfprintf_internal_r+0x338>
    145c:	48000a26 	beq	r9,zero,1488 <___vfprintf_internal_r+0x30c>
    1460:	00800b44 	movi	r2,45
    1464:	d8800805 	stb	r2,32(sp)
    1468:	88800117 	ldw	r2,4(r17)
    146c:	01c00044 	movi	r7,1
    1470:	d9800804 	addi	r6,sp,32
    1474:	880b883a 	mov	r5,r17
    1478:	a009883a 	mov	r4,r20
    147c:	103ee83a 	callr	r2
    1480:	10004a1e 	bne	r2,zero,15ac <___vfprintf_internal_r+0x430>
    1484:	84000044 	addi	r16,r16,1
    1488:	0580070e 	bge	zero,r22,14a8 <___vfprintf_internal_r+0x32c>
    148c:	b00f883a 	mov	r7,r22
    1490:	01800c04 	movi	r6,48
    1494:	880b883a 	mov	r5,r17
    1498:	a009883a 	mov	r4,r20
    149c:	00011100 	call	1110 <print_repeat>
    14a0:	1000421e 	bne	r2,zero,15ac <___vfprintf_internal_r+0x430>
    14a4:	85a1883a 	add	r16,r16,r22
    14a8:	e02d883a 	mov	r22,fp
    14ac:	bf2fc83a 	sub	r23,r23,fp
    14b0:	00002006 	br	1534 <___vfprintf_internal_r+0x3b8>
    14b4:	0580090e 	bge	zero,r22,14dc <___vfprintf_internal_r+0x360>
    14b8:	b00f883a 	mov	r7,r22
    14bc:	01800804 	movi	r6,32
    14c0:	880b883a 	mov	r5,r17
    14c4:	a009883a 	mov	r4,r20
    14c8:	da401015 	stw	r9,64(sp)
    14cc:	00011100 	call	1110 <print_repeat>
    14d0:	da401017 	ldw	r9,64(sp)
    14d4:	1000351e 	bne	r2,zero,15ac <___vfprintf_internal_r+0x430>
    14d8:	85a1883a 	add	r16,r16,r22
    14dc:	483ff226 	beq	r9,zero,14a8 <_gp+0xffff7820>
    14e0:	00800b44 	movi	r2,45
    14e4:	d8800805 	stb	r2,32(sp)
    14e8:	88800117 	ldw	r2,4(r17)
    14ec:	01c00044 	movi	r7,1
    14f0:	d9800804 	addi	r6,sp,32
    14f4:	880b883a 	mov	r5,r17
    14f8:	a009883a 	mov	r4,r20
    14fc:	103ee83a 	callr	r2
    1500:	10002a1e 	bne	r2,zero,15ac <___vfprintf_internal_r+0x430>
    1504:	84000044 	addi	r16,r16,1
    1508:	003fe706 	br	14a8 <_gp+0xffff7820>
    150c:	b5bfffc4 	addi	r22,r22,-1
    1510:	b0800003 	ldbu	r2,0(r22)
    1514:	01c00044 	movi	r7,1
    1518:	d9800804 	addi	r6,sp,32
    151c:	d8800805 	stb	r2,32(sp)
    1520:	88800117 	ldw	r2,4(r17)
    1524:	880b883a 	mov	r5,r17
    1528:	a009883a 	mov	r4,r20
    152c:	103ee83a 	callr	r2
    1530:	10001e1e 	bne	r2,zero,15ac <___vfprintf_internal_r+0x430>
    1534:	8585c83a 	sub	r2,r16,r22
    1538:	b5c9883a 	add	r4,r22,r23
    153c:	e085883a 	add	r2,fp,r2
    1540:	013ff216 	blt	zero,r4,150c <_gp+0xffff7884>
    1544:	1021883a 	mov	r16,r2
    1548:	dd800d17 	ldw	r22,52(sp)
    154c:	00004406 	br	1660 <___vfprintf_internal_r+0x4e4>
    1550:	00800044 	movi	r2,1
    1554:	1480080e 	bge	r2,r18,1578 <___vfprintf_internal_r+0x3fc>
    1558:	95ffffc4 	addi	r23,r18,-1
    155c:	b80f883a 	mov	r7,r23
    1560:	01800804 	movi	r6,32
    1564:	880b883a 	mov	r5,r17
    1568:	a009883a 	mov	r4,r20
    156c:	00011100 	call	1110 <print_repeat>
    1570:	10000e1e 	bne	r2,zero,15ac <___vfprintf_internal_r+0x430>
    1574:	85e1883a 	add	r16,r16,r23
    1578:	b0800017 	ldw	r2,0(r22)
    157c:	01c00044 	movi	r7,1
    1580:	d80d883a 	mov	r6,sp
    1584:	d8800005 	stb	r2,0(sp)
    1588:	88800117 	ldw	r2,4(r17)
    158c:	880b883a 	mov	r5,r17
    1590:	a009883a 	mov	r4,r20
    1594:	b5c00104 	addi	r23,r22,4
    1598:	103ee83a 	callr	r2
    159c:	1000031e 	bne	r2,zero,15ac <___vfprintf_internal_r+0x430>
    15a0:	84000044 	addi	r16,r16,1
    15a4:	b82d883a 	mov	r22,r23
    15a8:	00002d06 	br	1660 <___vfprintf_internal_r+0x4e4>
    15ac:	00bfffc4 	movi	r2,-1
    15b0:	00003106 	br	1678 <___vfprintf_internal_r+0x4fc>
    15b4:	b5c00017 	ldw	r23,0(r22)
    15b8:	b7000104 	addi	fp,r22,4
    15bc:	b809883a 	mov	r4,r23
    15c0:	000177c0 	call	177c <strlen>
    15c4:	9091c83a 	sub	r8,r18,r2
    15c8:	102d883a 	mov	r22,r2
    15cc:	0200090e 	bge	zero,r8,15f4 <___vfprintf_internal_r+0x478>
    15d0:	400f883a 	mov	r7,r8
    15d4:	01800804 	movi	r6,32
    15d8:	880b883a 	mov	r5,r17
    15dc:	a009883a 	mov	r4,r20
    15e0:	da001015 	stw	r8,64(sp)
    15e4:	00011100 	call	1110 <print_repeat>
    15e8:	da001017 	ldw	r8,64(sp)
    15ec:	103fef1e 	bne	r2,zero,15ac <_gp+0xffff7924>
    15f0:	8221883a 	add	r16,r16,r8
    15f4:	88800117 	ldw	r2,4(r17)
    15f8:	b00f883a 	mov	r7,r22
    15fc:	b80d883a 	mov	r6,r23
    1600:	880b883a 	mov	r5,r17
    1604:	a009883a 	mov	r4,r20
    1608:	103ee83a 	callr	r2
    160c:	103fe71e 	bne	r2,zero,15ac <_gp+0xffff7924>
    1610:	85a1883a 	add	r16,r16,r22
    1614:	e02d883a 	mov	r22,fp
    1618:	00001106 	br	1660 <___vfprintf_internal_r+0x4e4>
    161c:	00c00044 	movi	r3,1
    1620:	04ffffc4 	movi	r19,-1
    1624:	d8000e15 	stw	zero,56(sp)
    1628:	d8c00a15 	stw	r3,40(sp)
    162c:	05400284 	movi	r21,10
    1630:	9825883a 	mov	r18,r19
    1634:	d8000c15 	stw	zero,48(sp)
    1638:	d8000b15 	stw	zero,44(sp)
    163c:	182f883a 	mov	r23,r3
    1640:	00000806 	br	1664 <___vfprintf_internal_r+0x4e8>
    1644:	ddc00b15 	stw	r23,44(sp)
    1648:	05c00084 	movi	r23,2
    164c:	00000506 	br	1664 <___vfprintf_internal_r+0x4e8>
    1650:	00c00044 	movi	r3,1
    1654:	d8c00c15 	stw	r3,48(sp)
    1658:	05c000c4 	movi	r23,3
    165c:	00000106 	br	1664 <___vfprintf_internal_r+0x4e8>
    1660:	002f883a 	mov	r23,zero
    1664:	d8c00f17 	ldw	r3,60(sp)
    1668:	18c00044 	addi	r3,r3,1
    166c:	d8c00f15 	stw	r3,60(sp)
    1670:	003edc06 	br	11e4 <_gp+0xffff755c>
    1674:	8005883a 	mov	r2,r16
    1678:	dfc01a17 	ldw	ra,104(sp)
    167c:	df001917 	ldw	fp,100(sp)
    1680:	ddc01817 	ldw	r23,96(sp)
    1684:	dd801717 	ldw	r22,92(sp)
    1688:	dd401617 	ldw	r21,88(sp)
    168c:	dd001517 	ldw	r20,84(sp)
    1690:	dcc01417 	ldw	r19,80(sp)
    1694:	dc801317 	ldw	r18,76(sp)
    1698:	dc401217 	ldw	r17,72(sp)
    169c:	dc001117 	ldw	r16,68(sp)
    16a0:	dec01b04 	addi	sp,sp,108
    16a4:	f800283a 	ret

000016a8 <__vfprintf_internal>:
    16a8:	00800034 	movhi	r2,0
    16ac:	10872304 	addi	r2,r2,7308
    16b0:	300f883a 	mov	r7,r6
    16b4:	280d883a 	mov	r6,r5
    16b8:	200b883a 	mov	r5,r4
    16bc:	11000017 	ldw	r4,0(r2)
    16c0:	000117c1 	jmpi	117c <___vfprintf_internal_r>

000016c4 <__sfvwrite_small_dev>:
    16c4:	2880000b 	ldhu	r2,0(r5)
    16c8:	1080020c 	andi	r2,r2,8
    16cc:	10002126 	beq	r2,zero,1754 <__sfvwrite_small_dev+0x90>
    16d0:	2880008f 	ldh	r2,2(r5)
    16d4:	defffa04 	addi	sp,sp,-24
    16d8:	dc000015 	stw	r16,0(sp)
    16dc:	dfc00515 	stw	ra,20(sp)
    16e0:	dd000415 	stw	r20,16(sp)
    16e4:	dcc00315 	stw	r19,12(sp)
    16e8:	dc800215 	stw	r18,8(sp)
    16ec:	dc400115 	stw	r17,4(sp)
    16f0:	2821883a 	mov	r16,r5
    16f4:	10001216 	blt	r2,zero,1740 <__sfvwrite_small_dev+0x7c>
    16f8:	2027883a 	mov	r19,r4
    16fc:	3025883a 	mov	r18,r6
    1700:	3823883a 	mov	r17,r7
    1704:	05010004 	movi	r20,1024
    1708:	04400b0e 	bge	zero,r17,1738 <__sfvwrite_small_dev+0x74>
    170c:	880f883a 	mov	r7,r17
    1710:	a440010e 	bge	r20,r17,1718 <__sfvwrite_small_dev+0x54>
    1714:	01c10004 	movi	r7,1024
    1718:	8140008f 	ldh	r5,2(r16)
    171c:	900d883a 	mov	r6,r18
    1720:	9809883a 	mov	r4,r19
    1724:	00017980 	call	1798 <_write_r>
    1728:	0080050e 	bge	zero,r2,1740 <__sfvwrite_small_dev+0x7c>
    172c:	88a3c83a 	sub	r17,r17,r2
    1730:	90a5883a 	add	r18,r18,r2
    1734:	003ff406 	br	1708 <_gp+0xffff7a80>
    1738:	0005883a 	mov	r2,zero
    173c:	00000706 	br	175c <__sfvwrite_small_dev+0x98>
    1740:	8080000b 	ldhu	r2,0(r16)
    1744:	10801014 	ori	r2,r2,64
    1748:	8080000d 	sth	r2,0(r16)
    174c:	00bfffc4 	movi	r2,-1
    1750:	00000206 	br	175c <__sfvwrite_small_dev+0x98>
    1754:	00bfffc4 	movi	r2,-1
    1758:	f800283a 	ret
    175c:	dfc00517 	ldw	ra,20(sp)
    1760:	dd000417 	ldw	r20,16(sp)
    1764:	dcc00317 	ldw	r19,12(sp)
    1768:	dc800217 	ldw	r18,8(sp)
    176c:	dc400117 	ldw	r17,4(sp)
    1770:	dc000017 	ldw	r16,0(sp)
    1774:	dec00604 	addi	sp,sp,24
    1778:	f800283a 	ret

0000177c <strlen>:
    177c:	2005883a 	mov	r2,r4
    1780:	10c00007 	ldb	r3,0(r2)
    1784:	18000226 	beq	r3,zero,1790 <strlen+0x14>
    1788:	10800044 	addi	r2,r2,1
    178c:	003ffc06 	br	1780 <_gp+0xffff7af8>
    1790:	1105c83a 	sub	r2,r2,r4
    1794:	f800283a 	ret

00001798 <_write_r>:
    1798:	defffd04 	addi	sp,sp,-12
    179c:	dc000015 	stw	r16,0(sp)
    17a0:	04000034 	movhi	r16,0
    17a4:	dc400115 	stw	r17,4(sp)
    17a8:	84076404 	addi	r16,r16,7568
    17ac:	2023883a 	mov	r17,r4
    17b0:	2809883a 	mov	r4,r5
    17b4:	300b883a 	mov	r5,r6
    17b8:	380d883a 	mov	r6,r7
    17bc:	dfc00215 	stw	ra,8(sp)
    17c0:	80000015 	stw	zero,0(r16)
    17c4:	0001ad80 	call	1ad8 <write>
    17c8:	00ffffc4 	movi	r3,-1
    17cc:	10c0031e 	bne	r2,r3,17dc <_write_r+0x44>
    17d0:	80c00017 	ldw	r3,0(r16)
    17d4:	18000126 	beq	r3,zero,17dc <_write_r+0x44>
    17d8:	88c00015 	stw	r3,0(r17)
    17dc:	dfc00217 	ldw	ra,8(sp)
    17e0:	dc400117 	ldw	r17,4(sp)
    17e4:	dc000017 	ldw	r16,0(sp)
    17e8:	dec00304 	addi	sp,sp,12
    17ec:	f800283a 	ret

000017f0 <__divsi3>:
    17f0:	20001b16 	blt	r4,zero,1860 <__divsi3+0x70>
    17f4:	000f883a 	mov	r7,zero
    17f8:	28001616 	blt	r5,zero,1854 <__divsi3+0x64>
    17fc:	200d883a 	mov	r6,r4
    1800:	29001a2e 	bgeu	r5,r4,186c <__divsi3+0x7c>
    1804:	00800804 	movi	r2,32
    1808:	00c00044 	movi	r3,1
    180c:	00000106 	br	1814 <__divsi3+0x24>
    1810:	10000d26 	beq	r2,zero,1848 <__divsi3+0x58>
    1814:	294b883a 	add	r5,r5,r5
    1818:	10bfffc4 	addi	r2,r2,-1
    181c:	18c7883a 	add	r3,r3,r3
    1820:	293ffb36 	bltu	r5,r4,1810 <_gp+0xffff7b88>
    1824:	0005883a 	mov	r2,zero
    1828:	18000726 	beq	r3,zero,1848 <__divsi3+0x58>
    182c:	0005883a 	mov	r2,zero
    1830:	31400236 	bltu	r6,r5,183c <__divsi3+0x4c>
    1834:	314dc83a 	sub	r6,r6,r5
    1838:	10c4b03a 	or	r2,r2,r3
    183c:	1806d07a 	srli	r3,r3,1
    1840:	280ad07a 	srli	r5,r5,1
    1844:	183ffa1e 	bne	r3,zero,1830 <_gp+0xffff7ba8>
    1848:	38000126 	beq	r7,zero,1850 <__divsi3+0x60>
    184c:	0085c83a 	sub	r2,zero,r2
    1850:	f800283a 	ret
    1854:	014bc83a 	sub	r5,zero,r5
    1858:	39c0005c 	xori	r7,r7,1
    185c:	003fe706 	br	17fc <_gp+0xffff7b74>
    1860:	0109c83a 	sub	r4,zero,r4
    1864:	01c00044 	movi	r7,1
    1868:	003fe306 	br	17f8 <_gp+0xffff7b70>
    186c:	00c00044 	movi	r3,1
    1870:	003fee06 	br	182c <_gp+0xffff7ba4>

00001874 <__modsi3>:
    1874:	20001716 	blt	r4,zero,18d4 <__modsi3+0x60>
    1878:	000f883a 	mov	r7,zero
    187c:	2005883a 	mov	r2,r4
    1880:	28001216 	blt	r5,zero,18cc <__modsi3+0x58>
    1884:	2900162e 	bgeu	r5,r4,18e0 <__modsi3+0x6c>
    1888:	01800804 	movi	r6,32
    188c:	00c00044 	movi	r3,1
    1890:	00000106 	br	1898 <__modsi3+0x24>
    1894:	30000a26 	beq	r6,zero,18c0 <__modsi3+0x4c>
    1898:	294b883a 	add	r5,r5,r5
    189c:	31bfffc4 	addi	r6,r6,-1
    18a0:	18c7883a 	add	r3,r3,r3
    18a4:	293ffb36 	bltu	r5,r4,1894 <_gp+0xffff7c0c>
    18a8:	18000526 	beq	r3,zero,18c0 <__modsi3+0x4c>
    18ac:	1806d07a 	srli	r3,r3,1
    18b0:	11400136 	bltu	r2,r5,18b8 <__modsi3+0x44>
    18b4:	1145c83a 	sub	r2,r2,r5
    18b8:	280ad07a 	srli	r5,r5,1
    18bc:	183ffb1e 	bne	r3,zero,18ac <_gp+0xffff7c24>
    18c0:	38000126 	beq	r7,zero,18c8 <__modsi3+0x54>
    18c4:	0085c83a 	sub	r2,zero,r2
    18c8:	f800283a 	ret
    18cc:	014bc83a 	sub	r5,zero,r5
    18d0:	003fec06 	br	1884 <_gp+0xffff7bfc>
    18d4:	0109c83a 	sub	r4,zero,r4
    18d8:	01c00044 	movi	r7,1
    18dc:	003fe706 	br	187c <_gp+0xffff7bf4>
    18e0:	00c00044 	movi	r3,1
    18e4:	003ff106 	br	18ac <_gp+0xffff7c24>

000018e8 <__udivsi3>:
    18e8:	200d883a 	mov	r6,r4
    18ec:	2900152e 	bgeu	r5,r4,1944 <__udivsi3+0x5c>
    18f0:	28001416 	blt	r5,zero,1944 <__udivsi3+0x5c>
    18f4:	00800804 	movi	r2,32
    18f8:	00c00044 	movi	r3,1
    18fc:	00000206 	br	1908 <__udivsi3+0x20>
    1900:	10000e26 	beq	r2,zero,193c <__udivsi3+0x54>
    1904:	28000516 	blt	r5,zero,191c <__udivsi3+0x34>
    1908:	294b883a 	add	r5,r5,r5
    190c:	10bfffc4 	addi	r2,r2,-1
    1910:	18c7883a 	add	r3,r3,r3
    1914:	293ffa36 	bltu	r5,r4,1900 <_gp+0xffff7c78>
    1918:	18000826 	beq	r3,zero,193c <__udivsi3+0x54>
    191c:	0005883a 	mov	r2,zero
    1920:	31400236 	bltu	r6,r5,192c <__udivsi3+0x44>
    1924:	314dc83a 	sub	r6,r6,r5
    1928:	10c4b03a 	or	r2,r2,r3
    192c:	1806d07a 	srli	r3,r3,1
    1930:	280ad07a 	srli	r5,r5,1
    1934:	183ffa1e 	bne	r3,zero,1920 <_gp+0xffff7c98>
    1938:	f800283a 	ret
    193c:	0005883a 	mov	r2,zero
    1940:	f800283a 	ret
    1944:	00c00044 	movi	r3,1
    1948:	003ff406 	br	191c <_gp+0xffff7c94>

0000194c <__umodsi3>:
    194c:	2005883a 	mov	r2,r4
    1950:	2900122e 	bgeu	r5,r4,199c <__umodsi3+0x50>
    1954:	28001116 	blt	r5,zero,199c <__umodsi3+0x50>
    1958:	01800804 	movi	r6,32
    195c:	00c00044 	movi	r3,1
    1960:	00000206 	br	196c <__umodsi3+0x20>
    1964:	30000c26 	beq	r6,zero,1998 <__umodsi3+0x4c>
    1968:	28000516 	blt	r5,zero,1980 <__umodsi3+0x34>
    196c:	294b883a 	add	r5,r5,r5
    1970:	31bfffc4 	addi	r6,r6,-1
    1974:	18c7883a 	add	r3,r3,r3
    1978:	293ffa36 	bltu	r5,r4,1964 <_gp+0xffff7cdc>
    197c:	18000626 	beq	r3,zero,1998 <__umodsi3+0x4c>
    1980:	1806d07a 	srli	r3,r3,1
    1984:	11400136 	bltu	r2,r5,198c <__umodsi3+0x40>
    1988:	1145c83a 	sub	r2,r2,r5
    198c:	280ad07a 	srli	r5,r5,1
    1990:	183ffb1e 	bne	r3,zero,1980 <_gp+0xffff7cf8>
    1994:	f800283a 	ret
    1998:	f800283a 	ret
    199c:	00c00044 	movi	r3,1
    19a0:	003ff706 	br	1980 <_gp+0xffff7cf8>

000019a4 <__mulsi3>:
    19a4:	0005883a 	mov	r2,zero
    19a8:	20000726 	beq	r4,zero,19c8 <__mulsi3+0x24>
    19ac:	20c0004c 	andi	r3,r4,1
    19b0:	2008d07a 	srli	r4,r4,1
    19b4:	18000126 	beq	r3,zero,19bc <__mulsi3+0x18>
    19b8:	1145883a 	add	r2,r2,r5
    19bc:	294b883a 	add	r5,r5,r5
    19c0:	203ffa1e 	bne	r4,zero,19ac <_gp+0xffff7d24>
    19c4:	f800283a 	ret
    19c8:	f800283a 	ret

000019cc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    19cc:	deffff04 	addi	sp,sp,-4
    19d0:	01000034 	movhi	r4,0
    19d4:	01400034 	movhi	r5,0
    19d8:	dfc00015 	stw	ra,0(sp)
    19dc:	2106ea04 	addi	r4,r4,7080
    19e0:	29472704 	addi	r5,r5,7324

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    19e4:	2140061e 	bne	r4,r5,1a00 <alt_load+0x34>
    19e8:	01000034 	movhi	r4,0
    19ec:	01400034 	movhi	r5,0
    19f0:	21040804 	addi	r4,r4,4128
    19f4:	29440804 	addi	r5,r5,4128
    19f8:	2140121e 	bne	r4,r5,1a44 <alt_load+0x78>
    19fc:	00000b06 	br	1a2c <alt_load+0x60>
    1a00:	00c00034 	movhi	r3,0
    1a04:	18c72704 	addi	r3,r3,7324
    1a08:	1907c83a 	sub	r3,r3,r4
    1a0c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1a10:	10fff526 	beq	r2,r3,19e8 <_gp+0xffff7d60>
    {
      *to++ = *from++;
    1a14:	114f883a 	add	r7,r2,r5
    1a18:	39c00017 	ldw	r7,0(r7)
    1a1c:	110d883a 	add	r6,r2,r4
    1a20:	10800104 	addi	r2,r2,4
    1a24:	31c00015 	stw	r7,0(r6)
    1a28:	003ff906 	br	1a10 <_gp+0xffff7d88>
    1a2c:	01000034 	movhi	r4,0
    1a30:	01400034 	movhi	r5,0
    1a34:	2106e804 	addi	r4,r4,7072
    1a38:	2946e804 	addi	r5,r5,7072

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1a3c:	2140101e 	bne	r4,r5,1a80 <alt_load+0xb4>
    1a40:	00000b06 	br	1a70 <alt_load+0xa4>
    1a44:	00c00034 	movhi	r3,0
    1a48:	18c40804 	addi	r3,r3,4128
    1a4c:	1907c83a 	sub	r3,r3,r4
    1a50:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1a54:	10fff526 	beq	r2,r3,1a2c <_gp+0xffff7da4>
    {
      *to++ = *from++;
    1a58:	114f883a 	add	r7,r2,r5
    1a5c:	39c00017 	ldw	r7,0(r7)
    1a60:	110d883a 	add	r6,r2,r4
    1a64:	10800104 	addi	r2,r2,4
    1a68:	31c00015 	stw	r7,0(r6)
    1a6c:	003ff906 	br	1a54 <_gp+0xffff7dcc>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1a70:	0001b900 	call	1b90 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    1a74:	dfc00017 	ldw	ra,0(sp)
    1a78:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    1a7c:	0001b941 	jmpi	1b94 <alt_icache_flush_all>
    1a80:	00c00034 	movhi	r3,0
    1a84:	18c6ea04 	addi	r3,r3,7080
    1a88:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1a8c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1a90:	18bff726 	beq	r3,r2,1a70 <_gp+0xffff7de8>
    {
      *to++ = *from++;
    1a94:	114f883a 	add	r7,r2,r5
    1a98:	39c00017 	ldw	r7,0(r7)
    1a9c:	110d883a 	add	r6,r2,r4
    1aa0:	10800104 	addi	r2,r2,4
    1aa4:	31c00015 	stw	r7,0(r6)
    1aa8:	003ff906 	br	1a90 <_gp+0xffff7e08>

00001aac <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1aac:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1ab0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1ab4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1ab8:	0001b380 	call	1b38 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1abc:	0001b580 	call	1b58 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1ac0:	d1a04317 	ldw	r6,-32500(gp)
    1ac4:	d1604417 	ldw	r5,-32496(gp)
    1ac8:	d1204517 	ldw	r4,-32492(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    1acc:	dfc00017 	ldw	ra,0(sp)
    1ad0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1ad4:	000105c1 	jmpi	105c <main>

00001ad8 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    1ad8:	00800044 	movi	r2,1
    1adc:	20800226 	beq	r4,r2,1ae8 <write+0x10>
    1ae0:	00800084 	movi	r2,2
    1ae4:	2080041e 	bne	r4,r2,1af8 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    1ae8:	01000034 	movhi	r4,0
    1aec:	000f883a 	mov	r7,zero
    1af0:	21072504 	addi	r4,r4,7316
    1af4:	0001b5c1 	jmpi	1b5c <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    1af8:	d0a00417 	ldw	r2,-32752(gp)
    1afc:	10000926 	beq	r2,zero,1b24 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    1b00:	deffff04 	addi	sp,sp,-4
    1b04:	dfc00015 	stw	ra,0(sp)
    1b08:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    1b0c:	00c01444 	movi	r3,81
    1b10:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    1b14:	00bfffc4 	movi	r2,-1
    1b18:	dfc00017 	ldw	ra,0(sp)
    1b1c:	dec00104 	addi	sp,sp,4
    1b20:	f800283a 	ret
    1b24:	d0a04204 	addi	r2,gp,-32504
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    1b28:	00c01444 	movi	r3,81
    1b2c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    1b30:	00bfffc4 	movi	r2,-1
    1b34:	f800283a 	ret

00001b38 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1b38:	deffff04 	addi	sp,sp,-4
    1b3c:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    1b40:	0001b980 	call	1b98 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1b44:	00800044 	movi	r2,1
    1b48:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1b4c:	dfc00017 	ldw	ra,0(sp)
    1b50:	dec00104 	addi	sp,sp,4
    1b54:	f800283a 	ret

00001b58 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1b58:	f800283a 	ret

00001b5c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    1b5c:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1b60:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    1b64:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1b68:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    1b6c:	2980072e 	bgeu	r5,r6,1b8c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1b70:	38c00037 	ldwio	r3,0(r7)
    1b74:	18ffffec 	andhi	r3,r3,65535
    1b78:	183ffc26 	beq	r3,zero,1b6c <_gp+0xffff7ee4>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1b7c:	28c00007 	ldb	r3,0(r5)
    1b80:	20c00035 	stwio	r3,0(r4)
    1b84:	29400044 	addi	r5,r5,1
    1b88:	003ff806 	br	1b6c <_gp+0xffff7ee4>

  return count;
}
    1b8c:	f800283a 	ret

00001b90 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1b90:	f800283a 	ret

00001b94 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1b94:	f800283a 	ret

00001b98 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1b98:	000170fa 	wrctl	ienable,zero
    1b9c:	f800283a 	ret
