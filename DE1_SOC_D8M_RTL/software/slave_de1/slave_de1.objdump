
slave_de1.elf:     file format elf32-littlenios2
slave_de1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x00000d40 memsz 0x00000d40 flags r-x
    LOAD off    0x00001d60 vaddr 0x00001d60 paddr 0x00001e54 align 2**12
         filesz 0x000000f4 memsz 0x000000f4 flags rw-
    LOAD off    0x00001f48 vaddr 0x00001f48 paddr 0x00001f48 align 2**12
         filesz 0x00000000 memsz 0x00000018 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00001020  00001020  00001e54  2**0
                  CONTENTS
  2 .text         00000cec  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000054  00001d0c  00001d0c  00001d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f4  00001d60  00001e54  00001d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000018  00001f48  00001f48  00001f48  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00001f60  00001f60  00001e54  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001e54  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002b8  00000000  00000000  00001e78  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003d0c  00000000  00000000  00002130  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000014e7  00000000  00000000  00005e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000017a8  00000000  00000000  00007323  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000400  00000000  00000000  00008acc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001060  00000000  00000000  00008ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000144e  00000000  00000000  00009f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000b37c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000258  00000000  00000000  0000b390  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000c716  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000c719  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000c725  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000c726  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0000c727  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000c732  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0000c73d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  0000c748  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000030  00000000  00000000  0000c754  2**0
                  CONTENTS, READONLY
 26 .jdi          00005764  00000000  00000000  0000c784  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003858c  00000000  00000000  00011ee8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001020 l    d  .text	00000000 .text
00001d0c l    d  .rodata	00000000 .rodata
00001d60 l    d  .rwdata	00000000 .rwdata
00001f48 l    d  .bss	00000000 .bss
00001f60 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../slave_de1_bsp//obj/HAL/src/crt0.o
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00001f48 l     O .bss	00000004 thresholds
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00001298 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00001d60 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00001c18 g     F .text	0000002c alt_main
000011e8 g     F .text	00000080 _puts_r
00001e54 g       *ABS*	00000000 __flash_rwdata_start
0000119c g     F .text	0000004c printf
00001d04 g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
00001f50 g     O .bss	00000004 errno
00001f58 g     O .bss	00000004 alt_argv
00009e40 g       *ABS*	00000000 _gp
00001268 g     F .text	00000014 puts
00001160 g     F .text	0000003c _printf_r
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00001a54 g     F .text	00000064 .hidden __udivsi3
0000105c g     F .text	00000014 getFrame
00001e40 g     O .rwdata	00000004 _global_impure_ptr
00001f60 g       *ABS*	00000000 __bss_end
00001cfc g     F .text	00000004 alt_dcache_flush_all
00001e54 g       *ABS*	00000000 __ram_rwdata_end
00001c44 g     F .text	00000060 write
00001d60 g       *ABS*	00000000 __ram_rodata_end
00001e4c g     O .rwdata	00000004 jtag_uart_0
00001ab8 g     F .text	00000058 .hidden __umodsi3
00001f60 g       *ABS*	00000000 end
00001104 g     F .text	00000024 writeThresholds
00002000 g       *ABS*	00000000 __alt_stack_pointer
00001cc8 g     F .text	00000034 altera_avalon_jtag_uart_write
00001304 g     F .text	0000052c ___vfprintf_internal_r
00001020 g     F .text	0000003c _start
00001cc4 g     F .text	00000004 alt_sys_init
00001b10 g     F .text	00000028 .hidden __mulsi3
00001d60 g       *ABS*	00000000 __ram_rwdata_start
00001d0c g       *ABS*	00000000 __ram_rodata_start
00001070 g     F .text	0000004c printCoords
00001f4c g     O .bss	00000004 camera_base
00001f60 g       *ABS*	00000000 __alt_stack_base
0000184c g     F .text	000000b8 __sfvwrite_small_dev
00001f48 g       *ABS*	00000000 __bss_start
00001128 g     F .text	00000038 main
00001f54 g     O .bss	00000004 alt_envp
00001e48 g     O .rwdata	00000004 uart_0
00001e50 g     O .rwdata	00000004 alt_errno
0000195c g     F .text	00000084 .hidden __divsi3
00001d0c g       *ABS*	00000000 __flash_rodata_start
00001ca4 g     F .text	00000020 alt_irq_init
00001904 g     F .text	00000058 _write_r
000010bc g     F .text	00000048 printThresholds
00001e44 g     O .rwdata	00000004 _impure_ptr
00001f5c g     O .bss	00000004 alt_argc
00001020 g       *ABS*	00000000 __ram_exceptions_start
00001e54 g       *ABS*	00000000 _edata
00001f60 g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
000019e0 g     F .text	00000074 .hidden __modsi3
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
0000127c g     F .text	0000001c strlen
00001d00 g     F .text	00000004 alt_icache_flush_all
00001830 g     F .text	0000001c __vfprintf_internal
00001b38 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a79014 	ori	gp,gp,40512
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	1087d214 	ori	r2,r2,8008

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c7d814 	ori	r3,r3,8032

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_gp+0xffff7204>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	0001b380 	call	1b38 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	0001c180 	call	1c18 <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <_gp+0xffff7218>

0000105c <getFrame>:
 * y = arr[i] >> 16;
 */
void getFrame(uint32_t *arr, int *len)
{
	arr = (uint32_t *)malloc(NUM_POINT_FINDERS * sizeof(uint32_t));
	*len = NUM_POINT_FINDERS;
    105c:	00800044 	movi	r2,1
    1060:	28800015 	stw	r2,0(r5)

	uint32_t raw_coords;
	for (int i = 0; i < NUM_POINT_FINDERS; i++)
	{
		raw_coords = *(camera_base + i);
    1064:	d0a04317 	ldw	r2,-32500(gp)
    1068:	10800017 	ldw	r2,0(r2)
    106c:	f800283a 	ret

00001070 <printCoords>:
	}
}

// sample code for Bell
void printCoords()
{
    1070:	defffd04 	addi	sp,sp,-12
    1074:	dfc00215 	stw	ra,8(sp)
    1078:	dc000115 	stw	r16,4(sp)
	int len;
	uint32_t *arr = NULL;
	while (1)
	{
		getFrame(arr, &len);
    107c:	d80b883a 	mov	r5,sp
    1080:	0009883a 	mov	r4,zero
    1084:	000105c0 	call	105c <getFrame>
		for (int i = 0; i < len; i++)
    1088:	0021883a 	mov	r16,zero
    108c:	d8800017 	ldw	r2,0(sp)
    1090:	80bffa0e 	bge	r16,r2,107c <_gp+0xffff723c>
		{
			uint32_t raw_coords = arr[i];
    1094:	8405883a 	add	r2,r16,r16
    1098:	1085883a 	add	r2,r2,r2
    109c:	11400017 	ldw	r5,0(r2)
			uint16_t x = raw_coords & 0xFFFF;
			uint16_t y = raw_coords >> 16;
			printf("x: %i, y: %i\n", x, y);
    10a0:	01000034 	movhi	r4,0
    10a4:	21074304 	addi	r4,r4,7436
    10a8:	280cd43a 	srli	r6,r5,16
    10ac:	297fffcc 	andi	r5,r5,65535
	int len;
	uint32_t *arr = NULL;
	while (1)
	{
		getFrame(arr, &len);
		for (int i = 0; i < len; i++)
    10b0:	84000044 	addi	r16,r16,1
		{
			uint32_t raw_coords = arr[i];
			uint16_t x = raw_coords & 0xFFFF;
			uint16_t y = raw_coords >> 16;
			printf("x: %i, y: %i\n", x, y);
    10b4:	000119c0 	call	119c <printf>
    10b8:	003ff406 	br	108c <_gp+0xffff724c>

000010bc <printThresholds>:
}

void printThresholds(int i)
{
    printf("Thresholds: crLow=%d crHigh=%d cbLow=%d cbHigh=%d\n",
        (thresholds[i] >> 24) & 0xFF, (thresholds[i] >> 16) & 0xFF,
    10bc:	2109883a 	add	r4,r4,r4
    10c0:	d0a04204 	addi	r2,gp,-32504
    10c4:	2109883a 	add	r4,r4,r4
    10c8:	1109883a 	add	r4,r2,r4
	free(arr);
}

void printThresholds(int i)
{
    printf("Thresholds: crLow=%d crHigh=%d cbLow=%d cbHigh=%d\n",
    10cc:	21400017 	ldw	r5,0(r4)
    10d0:	21c00043 	ldbu	r7,1(r4)
    10d4:	21800083 	ldbu	r6,2(r4)
    10d8:	28803fcc 	andi	r2,r5,255
    10dc:	280ad63a 	srli	r5,r5,24
	}
	free(arr);
}

void printThresholds(int i)
{
    10e0:	defffe04 	addi	sp,sp,-8
    printf("Thresholds: crLow=%d crHigh=%d cbLow=%d cbHigh=%d\n",
    10e4:	01000034 	movhi	r4,0
    10e8:	d8800015 	stw	r2,0(sp)
    10ec:	21074704 	addi	r4,r4,7452
	}
	free(arr);
}

void printThresholds(int i)
{
    10f0:	dfc00115 	stw	ra,4(sp)
    printf("Thresholds: crLow=%d crHigh=%d cbLow=%d cbHigh=%d\n",
    10f4:	000119c0 	call	119c <printf>
        (thresholds[i] >> 24) & 0xFF, (thresholds[i] >> 16) & 0xFF,
        (thresholds[i] >> 8) & 0xFF, thresholds[i] & 0xFF);
}
    10f8:	dfc00117 	ldw	ra,4(sp)
    10fc:	dec00204 	addi	sp,sp,8
    1100:	f800283a 	ret

00001104 <writeThresholds>:

void writeThresholds(int i)
{
	*(camera_base + i) = thresholds[i];
    1104:	d0a04317 	ldw	r2,-32500(gp)
    1108:	2109883a 	add	r4,r4,r4
    110c:	2109883a 	add	r4,r4,r4
    1110:	d0e04204 	addi	r3,gp,-32504
    1114:	1105883a 	add	r2,r2,r4
    1118:	1909883a 	add	r4,r3,r4
    111c:	20c00017 	ldw	r3,0(r4)
    1120:	10c00015 	stw	r3,0(r2)
    1124:	f800283a 	ret

00001128 <main>:
}

int main()
{
	printf("Program start 1\n");
    1128:	01000034 	movhi	r4,0
{
	*(camera_base + i) = thresholds[i];
}

int main()
{
    112c:	deffff04 	addi	sp,sp,-4
	printf("Program start 1\n");
    1130:	21075404 	addi	r4,r4,7504
{
	*(camera_base + i) = thresholds[i];
}

int main()
{
    1134:	dfc00015 	stw	ra,0(sp)
	printf("Program start 1\n");
    1138:	00012680 	call	1268 <puts>
	uint8_t cbLow = 111, cbHigh = 133, crLow = 112, crHigh = 134;
	thresholds[0] = (crLow << 24) | (crHigh << 16) | (cbLow << 8) | cbHigh;
    113c:	009c21b4 	movhi	r2,28806
    1140:	109be144 	addi	r2,r2,28549
	writeThresholds(0);
    1144:	0009883a 	mov	r4,zero

int main()
{
	printf("Program start 1\n");
	uint8_t cbLow = 111, cbHigh = 133, crLow = 112, crHigh = 134;
	thresholds[0] = (crLow << 24) | (crHigh << 16) | (cbLow << 8) | cbHigh;
    1148:	d0a04215 	stw	r2,-32504(gp)
	writeThresholds(0);
    114c:	00011040 	call	1104 <writeThresholds>
//		printThresholds(i);
//		c = getch();
//		printf("c: %c\n", c);
//	}
	return 0;
}
    1150:	0005883a 	mov	r2,zero
    1154:	dfc00017 	ldw	ra,0(sp)
    1158:	dec00104 	addi	sp,sp,4
    115c:	f800283a 	ret

00001160 <_printf_r>:
    1160:	defffd04 	addi	sp,sp,-12
    1164:	dfc00015 	stw	ra,0(sp)
    1168:	d9800115 	stw	r6,4(sp)
    116c:	d9c00215 	stw	r7,8(sp)
    1170:	20c00217 	ldw	r3,8(r4)
    1174:	01800034 	movhi	r6,0
    1178:	31861304 	addi	r6,r6,6220
    117c:	19800115 	stw	r6,4(r3)
    1180:	280d883a 	mov	r6,r5
    1184:	21400217 	ldw	r5,8(r4)
    1188:	d9c00104 	addi	r7,sp,4
    118c:	00013040 	call	1304 <___vfprintf_internal_r>
    1190:	dfc00017 	ldw	ra,0(sp)
    1194:	dec00304 	addi	sp,sp,12
    1198:	f800283a 	ret

0000119c <printf>:
    119c:	defffc04 	addi	sp,sp,-16
    11a0:	dfc00015 	stw	ra,0(sp)
    11a4:	d9400115 	stw	r5,4(sp)
    11a8:	d9800215 	stw	r6,8(sp)
    11ac:	d9c00315 	stw	r7,12(sp)
    11b0:	00800034 	movhi	r2,0
    11b4:	10879104 	addi	r2,r2,7748
    11b8:	10800017 	ldw	r2,0(r2)
    11bc:	01400034 	movhi	r5,0
    11c0:	29461304 	addi	r5,r5,6220
    11c4:	10c00217 	ldw	r3,8(r2)
    11c8:	d9800104 	addi	r6,sp,4
    11cc:	19400115 	stw	r5,4(r3)
    11d0:	200b883a 	mov	r5,r4
    11d4:	11000217 	ldw	r4,8(r2)
    11d8:	00018300 	call	1830 <__vfprintf_internal>
    11dc:	dfc00017 	ldw	ra,0(sp)
    11e0:	dec00404 	addi	sp,sp,16
    11e4:	f800283a 	ret

000011e8 <_puts_r>:
    11e8:	defffd04 	addi	sp,sp,-12
    11ec:	dc000015 	stw	r16,0(sp)
    11f0:	2021883a 	mov	r16,r4
    11f4:	2809883a 	mov	r4,r5
    11f8:	dfc00215 	stw	ra,8(sp)
    11fc:	dc400115 	stw	r17,4(sp)
    1200:	2823883a 	mov	r17,r5
    1204:	000127c0 	call	127c <strlen>
    1208:	81400217 	ldw	r5,8(r16)
    120c:	01000034 	movhi	r4,0
    1210:	21061304 	addi	r4,r4,6220
    1214:	29000115 	stw	r4,4(r5)
    1218:	100f883a 	mov	r7,r2
    121c:	880d883a 	mov	r6,r17
    1220:	8009883a 	mov	r4,r16
    1224:	000184c0 	call	184c <__sfvwrite_small_dev>
    1228:	00ffffc4 	movi	r3,-1
    122c:	10c00926 	beq	r2,r3,1254 <_puts_r+0x6c>
    1230:	81400217 	ldw	r5,8(r16)
    1234:	01800034 	movhi	r6,0
    1238:	01c00044 	movi	r7,1
    123c:	28800117 	ldw	r2,4(r5)
    1240:	31874604 	addi	r6,r6,7448
    1244:	8009883a 	mov	r4,r16
    1248:	103ee83a 	callr	r2
    124c:	10bfffe0 	cmpeqi	r2,r2,-1
    1250:	0085c83a 	sub	r2,zero,r2
    1254:	dfc00217 	ldw	ra,8(sp)
    1258:	dc400117 	ldw	r17,4(sp)
    125c:	dc000017 	ldw	r16,0(sp)
    1260:	dec00304 	addi	sp,sp,12
    1264:	f800283a 	ret

00001268 <puts>:
    1268:	00800034 	movhi	r2,0
    126c:	10879104 	addi	r2,r2,7748
    1270:	200b883a 	mov	r5,r4
    1274:	11000017 	ldw	r4,0(r2)
    1278:	00011e81 	jmpi	11e8 <_puts_r>

0000127c <strlen>:
    127c:	2005883a 	mov	r2,r4
    1280:	10c00007 	ldb	r3,0(r2)
    1284:	18000226 	beq	r3,zero,1290 <strlen+0x14>
    1288:	10800044 	addi	r2,r2,1
    128c:	003ffc06 	br	1280 <_gp+0xffff7440>
    1290:	1105c83a 	sub	r2,r2,r4
    1294:	f800283a 	ret

00001298 <print_repeat>:
    1298:	defffb04 	addi	sp,sp,-20
    129c:	dc800315 	stw	r18,12(sp)
    12a0:	dc400215 	stw	r17,8(sp)
    12a4:	dc000115 	stw	r16,4(sp)
    12a8:	dfc00415 	stw	ra,16(sp)
    12ac:	2025883a 	mov	r18,r4
    12b0:	2823883a 	mov	r17,r5
    12b4:	d9800005 	stb	r6,0(sp)
    12b8:	3821883a 	mov	r16,r7
    12bc:	04000a0e 	bge	zero,r16,12e8 <print_repeat+0x50>
    12c0:	88800117 	ldw	r2,4(r17)
    12c4:	01c00044 	movi	r7,1
    12c8:	d80d883a 	mov	r6,sp
    12cc:	880b883a 	mov	r5,r17
    12d0:	9009883a 	mov	r4,r18
    12d4:	103ee83a 	callr	r2
    12d8:	843fffc4 	addi	r16,r16,-1
    12dc:	103ff726 	beq	r2,zero,12bc <_gp+0xffff747c>
    12e0:	00bfffc4 	movi	r2,-1
    12e4:	00000106 	br	12ec <print_repeat+0x54>
    12e8:	0005883a 	mov	r2,zero
    12ec:	dfc00417 	ldw	ra,16(sp)
    12f0:	dc800317 	ldw	r18,12(sp)
    12f4:	dc400217 	ldw	r17,8(sp)
    12f8:	dc000117 	ldw	r16,4(sp)
    12fc:	dec00504 	addi	sp,sp,20
    1300:	f800283a 	ret

00001304 <___vfprintf_internal_r>:
    1304:	deffe504 	addi	sp,sp,-108
    1308:	d8c00804 	addi	r3,sp,32
    130c:	ddc01815 	stw	r23,96(sp)
    1310:	dd801715 	stw	r22,92(sp)
    1314:	dd401615 	stw	r21,88(sp)
    1318:	dd001515 	stw	r20,84(sp)
    131c:	dcc01415 	stw	r19,80(sp)
    1320:	dc801315 	stw	r18,76(sp)
    1324:	dc401215 	stw	r17,72(sp)
    1328:	dc001115 	stw	r16,68(sp)
    132c:	dfc01a15 	stw	ra,104(sp)
    1330:	df001915 	stw	fp,100(sp)
    1334:	2029883a 	mov	r20,r4
    1338:	2823883a 	mov	r17,r5
    133c:	382d883a 	mov	r22,r7
    1340:	d9800f15 	stw	r6,60(sp)
    1344:	0021883a 	mov	r16,zero
    1348:	d8000e15 	stw	zero,56(sp)
    134c:	d8000a15 	stw	zero,40(sp)
    1350:	002b883a 	mov	r21,zero
    1354:	0027883a 	mov	r19,zero
    1358:	0025883a 	mov	r18,zero
    135c:	d8000c15 	stw	zero,48(sp)
    1360:	d8000b15 	stw	zero,44(sp)
    1364:	002f883a 	mov	r23,zero
    1368:	d8c00915 	stw	r3,36(sp)
    136c:	d8c00f17 	ldw	r3,60(sp)
    1370:	19000003 	ldbu	r4,0(r3)
    1374:	20803fcc 	andi	r2,r4,255
    1378:	1080201c 	xori	r2,r2,128
    137c:	10bfe004 	addi	r2,r2,-128
    1380:	10011e26 	beq	r2,zero,17fc <___vfprintf_internal_r+0x4f8>
    1384:	00c00044 	movi	r3,1
    1388:	b8c01426 	beq	r23,r3,13dc <___vfprintf_internal_r+0xd8>
    138c:	1dc00216 	blt	r3,r23,1398 <___vfprintf_internal_r+0x94>
    1390:	b8000626 	beq	r23,zero,13ac <___vfprintf_internal_r+0xa8>
    1394:	00011506 	br	17ec <___vfprintf_internal_r+0x4e8>
    1398:	01400084 	movi	r5,2
    139c:	b9401d26 	beq	r23,r5,1414 <___vfprintf_internal_r+0x110>
    13a0:	014000c4 	movi	r5,3
    13a4:	b9402b26 	beq	r23,r5,1454 <___vfprintf_internal_r+0x150>
    13a8:	00011006 	br	17ec <___vfprintf_internal_r+0x4e8>
    13ac:	01400944 	movi	r5,37
    13b0:	1140fc26 	beq	r2,r5,17a4 <___vfprintf_internal_r+0x4a0>
    13b4:	88800117 	ldw	r2,4(r17)
    13b8:	d9000005 	stb	r4,0(sp)
    13bc:	01c00044 	movi	r7,1
    13c0:	d80d883a 	mov	r6,sp
    13c4:	880b883a 	mov	r5,r17
    13c8:	a009883a 	mov	r4,r20
    13cc:	103ee83a 	callr	r2
    13d0:	1000d81e 	bne	r2,zero,1734 <___vfprintf_internal_r+0x430>
    13d4:	84000044 	addi	r16,r16,1
    13d8:	00010406 	br	17ec <___vfprintf_internal_r+0x4e8>
    13dc:	01400c04 	movi	r5,48
    13e0:	1140fa26 	beq	r2,r5,17cc <___vfprintf_internal_r+0x4c8>
    13e4:	01400944 	movi	r5,37
    13e8:	11400a1e 	bne	r2,r5,1414 <___vfprintf_internal_r+0x110>
    13ec:	d8800005 	stb	r2,0(sp)
    13f0:	88800117 	ldw	r2,4(r17)
    13f4:	b80f883a 	mov	r7,r23
    13f8:	d80d883a 	mov	r6,sp
    13fc:	880b883a 	mov	r5,r17
    1400:	a009883a 	mov	r4,r20
    1404:	103ee83a 	callr	r2
    1408:	1000ca1e 	bne	r2,zero,1734 <___vfprintf_internal_r+0x430>
    140c:	84000044 	addi	r16,r16,1
    1410:	0000f506 	br	17e8 <___vfprintf_internal_r+0x4e4>
    1414:	25fff404 	addi	r23,r4,-48
    1418:	bdc03fcc 	andi	r23,r23,255
    141c:	00c00244 	movi	r3,9
    1420:	1dc00936 	bltu	r3,r23,1448 <___vfprintf_internal_r+0x144>
    1424:	00bfffc4 	movi	r2,-1
    1428:	90800426 	beq	r18,r2,143c <___vfprintf_internal_r+0x138>
    142c:	01400284 	movi	r5,10
    1430:	9009883a 	mov	r4,r18
    1434:	0001b100 	call	1b10 <__mulsi3>
    1438:	00000106 	br	1440 <___vfprintf_internal_r+0x13c>
    143c:	0005883a 	mov	r2,zero
    1440:	b8a5883a 	add	r18,r23,r2
    1444:	0000e206 	br	17d0 <___vfprintf_internal_r+0x4cc>
    1448:	01400b84 	movi	r5,46
    144c:	1140e426 	beq	r2,r5,17e0 <___vfprintf_internal_r+0x4dc>
    1450:	05c00084 	movi	r23,2
    1454:	213ff404 	addi	r4,r4,-48
    1458:	27003fcc 	andi	fp,r4,255
    145c:	00c00244 	movi	r3,9
    1460:	1f000936 	bltu	r3,fp,1488 <___vfprintf_internal_r+0x184>
    1464:	00bfffc4 	movi	r2,-1
    1468:	98800426 	beq	r19,r2,147c <___vfprintf_internal_r+0x178>
    146c:	01400284 	movi	r5,10
    1470:	9809883a 	mov	r4,r19
    1474:	0001b100 	call	1b10 <__mulsi3>
    1478:	00000106 	br	1480 <___vfprintf_internal_r+0x17c>
    147c:	0005883a 	mov	r2,zero
    1480:	e0a7883a 	add	r19,fp,r2
    1484:	0000d906 	br	17ec <___vfprintf_internal_r+0x4e8>
    1488:	00c01b04 	movi	r3,108
    148c:	10c0d226 	beq	r2,r3,17d8 <___vfprintf_internal_r+0x4d4>
    1490:	013fffc4 	movi	r4,-1
    1494:	99000226 	beq	r19,r4,14a0 <___vfprintf_internal_r+0x19c>
    1498:	d8000b15 	stw	zero,44(sp)
    149c:	00000106 	br	14a4 <___vfprintf_internal_r+0x1a0>
    14a0:	04c00044 	movi	r19,1
    14a4:	01001a44 	movi	r4,105
    14a8:	11001626 	beq	r2,r4,1504 <___vfprintf_internal_r+0x200>
    14ac:	20800916 	blt	r4,r2,14d4 <___vfprintf_internal_r+0x1d0>
    14b0:	010018c4 	movi	r4,99
    14b4:	11008826 	beq	r2,r4,16d8 <___vfprintf_internal_r+0x3d4>
    14b8:	01001904 	movi	r4,100
    14bc:	11001126 	beq	r2,r4,1504 <___vfprintf_internal_r+0x200>
    14c0:	01001604 	movi	r4,88
    14c4:	1100c81e 	bne	r2,r4,17e8 <___vfprintf_internal_r+0x4e4>
    14c8:	00c00044 	movi	r3,1
    14cc:	d8c00e15 	stw	r3,56(sp)
    14d0:	00001506 	br	1528 <___vfprintf_internal_r+0x224>
    14d4:	01001cc4 	movi	r4,115
    14d8:	11009826 	beq	r2,r4,173c <___vfprintf_internal_r+0x438>
    14dc:	20800416 	blt	r4,r2,14f0 <___vfprintf_internal_r+0x1ec>
    14e0:	01001bc4 	movi	r4,111
    14e4:	1100c01e 	bne	r2,r4,17e8 <___vfprintf_internal_r+0x4e4>
    14e8:	05400204 	movi	r21,8
    14ec:	00000f06 	br	152c <___vfprintf_internal_r+0x228>
    14f0:	01001d44 	movi	r4,117
    14f4:	11000d26 	beq	r2,r4,152c <___vfprintf_internal_r+0x228>
    14f8:	01001e04 	movi	r4,120
    14fc:	11000a26 	beq	r2,r4,1528 <___vfprintf_internal_r+0x224>
    1500:	0000b906 	br	17e8 <___vfprintf_internal_r+0x4e4>
    1504:	d8c00a17 	ldw	r3,40(sp)
    1508:	b7000104 	addi	fp,r22,4
    150c:	18000726 	beq	r3,zero,152c <___vfprintf_internal_r+0x228>
    1510:	df000d15 	stw	fp,52(sp)
    1514:	b5c00017 	ldw	r23,0(r22)
    1518:	b800080e 	bge	r23,zero,153c <___vfprintf_internal_r+0x238>
    151c:	05efc83a 	sub	r23,zero,r23
    1520:	02400044 	movi	r9,1
    1524:	00000606 	br	1540 <___vfprintf_internal_r+0x23c>
    1528:	05400404 	movi	r21,16
    152c:	b0c00104 	addi	r3,r22,4
    1530:	d8c00d15 	stw	r3,52(sp)
    1534:	b5c00017 	ldw	r23,0(r22)
    1538:	d8000a15 	stw	zero,40(sp)
    153c:	0013883a 	mov	r9,zero
    1540:	d839883a 	mov	fp,sp
    1544:	b8001726 	beq	r23,zero,15a4 <___vfprintf_internal_r+0x2a0>
    1548:	a80b883a 	mov	r5,r21
    154c:	b809883a 	mov	r4,r23
    1550:	da401015 	stw	r9,64(sp)
    1554:	0001a540 	call	1a54 <__udivsi3>
    1558:	a80b883a 	mov	r5,r21
    155c:	1009883a 	mov	r4,r2
    1560:	102d883a 	mov	r22,r2
    1564:	0001b100 	call	1b10 <__mulsi3>
    1568:	b885c83a 	sub	r2,r23,r2
    156c:	00c00244 	movi	r3,9
    1570:	da401017 	ldw	r9,64(sp)
    1574:	18800216 	blt	r3,r2,1580 <___vfprintf_internal_r+0x27c>
    1578:	10800c04 	addi	r2,r2,48
    157c:	00000506 	br	1594 <___vfprintf_internal_r+0x290>
    1580:	d8c00e17 	ldw	r3,56(sp)
    1584:	18000226 	beq	r3,zero,1590 <___vfprintf_internal_r+0x28c>
    1588:	10800dc4 	addi	r2,r2,55
    158c:	00000106 	br	1594 <___vfprintf_internal_r+0x290>
    1590:	108015c4 	addi	r2,r2,87
    1594:	e0800005 	stb	r2,0(fp)
    1598:	b02f883a 	mov	r23,r22
    159c:	e7000044 	addi	fp,fp,1
    15a0:	003fe806 	br	1544 <_gp+0xffff7704>
    15a4:	e6efc83a 	sub	r23,fp,sp
    15a8:	9dc5c83a 	sub	r2,r19,r23
    15ac:	0080090e 	bge	zero,r2,15d4 <___vfprintf_internal_r+0x2d0>
    15b0:	e085883a 	add	r2,fp,r2
    15b4:	01400c04 	movi	r5,48
    15b8:	d8c00917 	ldw	r3,36(sp)
    15bc:	e009883a 	mov	r4,fp
    15c0:	e0c0032e 	bgeu	fp,r3,15d0 <___vfprintf_internal_r+0x2cc>
    15c4:	e7000044 	addi	fp,fp,1
    15c8:	21400005 	stb	r5,0(r4)
    15cc:	e0bffa1e 	bne	fp,r2,15b8 <_gp+0xffff7778>
    15d0:	e6efc83a 	sub	r23,fp,sp
    15d4:	d8c00b17 	ldw	r3,44(sp)
    15d8:	4dd1883a 	add	r8,r9,r23
    15dc:	922dc83a 	sub	r22,r18,r8
    15e0:	18001626 	beq	r3,zero,163c <___vfprintf_internal_r+0x338>
    15e4:	48000a26 	beq	r9,zero,1610 <___vfprintf_internal_r+0x30c>
    15e8:	00800b44 	movi	r2,45
    15ec:	d8800805 	stb	r2,32(sp)
    15f0:	88800117 	ldw	r2,4(r17)
    15f4:	01c00044 	movi	r7,1
    15f8:	d9800804 	addi	r6,sp,32
    15fc:	880b883a 	mov	r5,r17
    1600:	a009883a 	mov	r4,r20
    1604:	103ee83a 	callr	r2
    1608:	10004a1e 	bne	r2,zero,1734 <___vfprintf_internal_r+0x430>
    160c:	84000044 	addi	r16,r16,1
    1610:	0580070e 	bge	zero,r22,1630 <___vfprintf_internal_r+0x32c>
    1614:	b00f883a 	mov	r7,r22
    1618:	01800c04 	movi	r6,48
    161c:	880b883a 	mov	r5,r17
    1620:	a009883a 	mov	r4,r20
    1624:	00012980 	call	1298 <print_repeat>
    1628:	1000421e 	bne	r2,zero,1734 <___vfprintf_internal_r+0x430>
    162c:	85a1883a 	add	r16,r16,r22
    1630:	e02d883a 	mov	r22,fp
    1634:	bf2fc83a 	sub	r23,r23,fp
    1638:	00002006 	br	16bc <___vfprintf_internal_r+0x3b8>
    163c:	0580090e 	bge	zero,r22,1664 <___vfprintf_internal_r+0x360>
    1640:	b00f883a 	mov	r7,r22
    1644:	01800804 	movi	r6,32
    1648:	880b883a 	mov	r5,r17
    164c:	a009883a 	mov	r4,r20
    1650:	da401015 	stw	r9,64(sp)
    1654:	00012980 	call	1298 <print_repeat>
    1658:	da401017 	ldw	r9,64(sp)
    165c:	1000351e 	bne	r2,zero,1734 <___vfprintf_internal_r+0x430>
    1660:	85a1883a 	add	r16,r16,r22
    1664:	483ff226 	beq	r9,zero,1630 <_gp+0xffff77f0>
    1668:	00800b44 	movi	r2,45
    166c:	d8800805 	stb	r2,32(sp)
    1670:	88800117 	ldw	r2,4(r17)
    1674:	01c00044 	movi	r7,1
    1678:	d9800804 	addi	r6,sp,32
    167c:	880b883a 	mov	r5,r17
    1680:	a009883a 	mov	r4,r20
    1684:	103ee83a 	callr	r2
    1688:	10002a1e 	bne	r2,zero,1734 <___vfprintf_internal_r+0x430>
    168c:	84000044 	addi	r16,r16,1
    1690:	003fe706 	br	1630 <_gp+0xffff77f0>
    1694:	b5bfffc4 	addi	r22,r22,-1
    1698:	b0800003 	ldbu	r2,0(r22)
    169c:	01c00044 	movi	r7,1
    16a0:	d9800804 	addi	r6,sp,32
    16a4:	d8800805 	stb	r2,32(sp)
    16a8:	88800117 	ldw	r2,4(r17)
    16ac:	880b883a 	mov	r5,r17
    16b0:	a009883a 	mov	r4,r20
    16b4:	103ee83a 	callr	r2
    16b8:	10001e1e 	bne	r2,zero,1734 <___vfprintf_internal_r+0x430>
    16bc:	8585c83a 	sub	r2,r16,r22
    16c0:	b5c9883a 	add	r4,r22,r23
    16c4:	e085883a 	add	r2,fp,r2
    16c8:	013ff216 	blt	zero,r4,1694 <_gp+0xffff7854>
    16cc:	1021883a 	mov	r16,r2
    16d0:	dd800d17 	ldw	r22,52(sp)
    16d4:	00004406 	br	17e8 <___vfprintf_internal_r+0x4e4>
    16d8:	00800044 	movi	r2,1
    16dc:	1480080e 	bge	r2,r18,1700 <___vfprintf_internal_r+0x3fc>
    16e0:	95ffffc4 	addi	r23,r18,-1
    16e4:	b80f883a 	mov	r7,r23
    16e8:	01800804 	movi	r6,32
    16ec:	880b883a 	mov	r5,r17
    16f0:	a009883a 	mov	r4,r20
    16f4:	00012980 	call	1298 <print_repeat>
    16f8:	10000e1e 	bne	r2,zero,1734 <___vfprintf_internal_r+0x430>
    16fc:	85e1883a 	add	r16,r16,r23
    1700:	b0800017 	ldw	r2,0(r22)
    1704:	01c00044 	movi	r7,1
    1708:	d80d883a 	mov	r6,sp
    170c:	d8800005 	stb	r2,0(sp)
    1710:	88800117 	ldw	r2,4(r17)
    1714:	880b883a 	mov	r5,r17
    1718:	a009883a 	mov	r4,r20
    171c:	b5c00104 	addi	r23,r22,4
    1720:	103ee83a 	callr	r2
    1724:	1000031e 	bne	r2,zero,1734 <___vfprintf_internal_r+0x430>
    1728:	84000044 	addi	r16,r16,1
    172c:	b82d883a 	mov	r22,r23
    1730:	00002d06 	br	17e8 <___vfprintf_internal_r+0x4e4>
    1734:	00bfffc4 	movi	r2,-1
    1738:	00003106 	br	1800 <___vfprintf_internal_r+0x4fc>
    173c:	b5c00017 	ldw	r23,0(r22)
    1740:	b7000104 	addi	fp,r22,4
    1744:	b809883a 	mov	r4,r23
    1748:	000127c0 	call	127c <strlen>
    174c:	9091c83a 	sub	r8,r18,r2
    1750:	102d883a 	mov	r22,r2
    1754:	0200090e 	bge	zero,r8,177c <___vfprintf_internal_r+0x478>
    1758:	400f883a 	mov	r7,r8
    175c:	01800804 	movi	r6,32
    1760:	880b883a 	mov	r5,r17
    1764:	a009883a 	mov	r4,r20
    1768:	da001015 	stw	r8,64(sp)
    176c:	00012980 	call	1298 <print_repeat>
    1770:	da001017 	ldw	r8,64(sp)
    1774:	103fef1e 	bne	r2,zero,1734 <_gp+0xffff78f4>
    1778:	8221883a 	add	r16,r16,r8
    177c:	88800117 	ldw	r2,4(r17)
    1780:	b00f883a 	mov	r7,r22
    1784:	b80d883a 	mov	r6,r23
    1788:	880b883a 	mov	r5,r17
    178c:	a009883a 	mov	r4,r20
    1790:	103ee83a 	callr	r2
    1794:	103fe71e 	bne	r2,zero,1734 <_gp+0xffff78f4>
    1798:	85a1883a 	add	r16,r16,r22
    179c:	e02d883a 	mov	r22,fp
    17a0:	00001106 	br	17e8 <___vfprintf_internal_r+0x4e4>
    17a4:	00c00044 	movi	r3,1
    17a8:	04ffffc4 	movi	r19,-1
    17ac:	d8000e15 	stw	zero,56(sp)
    17b0:	d8c00a15 	stw	r3,40(sp)
    17b4:	05400284 	movi	r21,10
    17b8:	9825883a 	mov	r18,r19
    17bc:	d8000c15 	stw	zero,48(sp)
    17c0:	d8000b15 	stw	zero,44(sp)
    17c4:	182f883a 	mov	r23,r3
    17c8:	00000806 	br	17ec <___vfprintf_internal_r+0x4e8>
    17cc:	ddc00b15 	stw	r23,44(sp)
    17d0:	05c00084 	movi	r23,2
    17d4:	00000506 	br	17ec <___vfprintf_internal_r+0x4e8>
    17d8:	00c00044 	movi	r3,1
    17dc:	d8c00c15 	stw	r3,48(sp)
    17e0:	05c000c4 	movi	r23,3
    17e4:	00000106 	br	17ec <___vfprintf_internal_r+0x4e8>
    17e8:	002f883a 	mov	r23,zero
    17ec:	d8c00f17 	ldw	r3,60(sp)
    17f0:	18c00044 	addi	r3,r3,1
    17f4:	d8c00f15 	stw	r3,60(sp)
    17f8:	003edc06 	br	136c <_gp+0xffff752c>
    17fc:	8005883a 	mov	r2,r16
    1800:	dfc01a17 	ldw	ra,104(sp)
    1804:	df001917 	ldw	fp,100(sp)
    1808:	ddc01817 	ldw	r23,96(sp)
    180c:	dd801717 	ldw	r22,92(sp)
    1810:	dd401617 	ldw	r21,88(sp)
    1814:	dd001517 	ldw	r20,84(sp)
    1818:	dcc01417 	ldw	r19,80(sp)
    181c:	dc801317 	ldw	r18,76(sp)
    1820:	dc401217 	ldw	r17,72(sp)
    1824:	dc001117 	ldw	r16,68(sp)
    1828:	dec01b04 	addi	sp,sp,108
    182c:	f800283a 	ret

00001830 <__vfprintf_internal>:
    1830:	00800034 	movhi	r2,0
    1834:	10879104 	addi	r2,r2,7748
    1838:	300f883a 	mov	r7,r6
    183c:	280d883a 	mov	r6,r5
    1840:	200b883a 	mov	r5,r4
    1844:	11000017 	ldw	r4,0(r2)
    1848:	00013041 	jmpi	1304 <___vfprintf_internal_r>

0000184c <__sfvwrite_small_dev>:
    184c:	2880000b 	ldhu	r2,0(r5)
    1850:	1080020c 	andi	r2,r2,8
    1854:	10002126 	beq	r2,zero,18dc <__sfvwrite_small_dev+0x90>
    1858:	2880008f 	ldh	r2,2(r5)
    185c:	defffa04 	addi	sp,sp,-24
    1860:	dc000015 	stw	r16,0(sp)
    1864:	dfc00515 	stw	ra,20(sp)
    1868:	dd000415 	stw	r20,16(sp)
    186c:	dcc00315 	stw	r19,12(sp)
    1870:	dc800215 	stw	r18,8(sp)
    1874:	dc400115 	stw	r17,4(sp)
    1878:	2821883a 	mov	r16,r5
    187c:	10001216 	blt	r2,zero,18c8 <__sfvwrite_small_dev+0x7c>
    1880:	2027883a 	mov	r19,r4
    1884:	3025883a 	mov	r18,r6
    1888:	3823883a 	mov	r17,r7
    188c:	05010004 	movi	r20,1024
    1890:	04400b0e 	bge	zero,r17,18c0 <__sfvwrite_small_dev+0x74>
    1894:	880f883a 	mov	r7,r17
    1898:	a440010e 	bge	r20,r17,18a0 <__sfvwrite_small_dev+0x54>
    189c:	01c10004 	movi	r7,1024
    18a0:	8140008f 	ldh	r5,2(r16)
    18a4:	900d883a 	mov	r6,r18
    18a8:	9809883a 	mov	r4,r19
    18ac:	00019040 	call	1904 <_write_r>
    18b0:	0080050e 	bge	zero,r2,18c8 <__sfvwrite_small_dev+0x7c>
    18b4:	88a3c83a 	sub	r17,r17,r2
    18b8:	90a5883a 	add	r18,r18,r2
    18bc:	003ff406 	br	1890 <_gp+0xffff7a50>
    18c0:	0005883a 	mov	r2,zero
    18c4:	00000706 	br	18e4 <__sfvwrite_small_dev+0x98>
    18c8:	8080000b 	ldhu	r2,0(r16)
    18cc:	10801014 	ori	r2,r2,64
    18d0:	8080000d 	sth	r2,0(r16)
    18d4:	00bfffc4 	movi	r2,-1
    18d8:	00000206 	br	18e4 <__sfvwrite_small_dev+0x98>
    18dc:	00bfffc4 	movi	r2,-1
    18e0:	f800283a 	ret
    18e4:	dfc00517 	ldw	ra,20(sp)
    18e8:	dd000417 	ldw	r20,16(sp)
    18ec:	dcc00317 	ldw	r19,12(sp)
    18f0:	dc800217 	ldw	r18,8(sp)
    18f4:	dc400117 	ldw	r17,4(sp)
    18f8:	dc000017 	ldw	r16,0(sp)
    18fc:	dec00604 	addi	sp,sp,24
    1900:	f800283a 	ret

00001904 <_write_r>:
    1904:	defffd04 	addi	sp,sp,-12
    1908:	dc000015 	stw	r16,0(sp)
    190c:	04000034 	movhi	r16,0
    1910:	dc400115 	stw	r17,4(sp)
    1914:	8407d404 	addi	r16,r16,8016
    1918:	2023883a 	mov	r17,r4
    191c:	2809883a 	mov	r4,r5
    1920:	300b883a 	mov	r5,r6
    1924:	380d883a 	mov	r6,r7
    1928:	dfc00215 	stw	ra,8(sp)
    192c:	80000015 	stw	zero,0(r16)
    1930:	0001c440 	call	1c44 <write>
    1934:	00ffffc4 	movi	r3,-1
    1938:	10c0031e 	bne	r2,r3,1948 <_write_r+0x44>
    193c:	80c00017 	ldw	r3,0(r16)
    1940:	18000126 	beq	r3,zero,1948 <_write_r+0x44>
    1944:	88c00015 	stw	r3,0(r17)
    1948:	dfc00217 	ldw	ra,8(sp)
    194c:	dc400117 	ldw	r17,4(sp)
    1950:	dc000017 	ldw	r16,0(sp)
    1954:	dec00304 	addi	sp,sp,12
    1958:	f800283a 	ret

0000195c <__divsi3>:
    195c:	20001b16 	blt	r4,zero,19cc <__divsi3+0x70>
    1960:	000f883a 	mov	r7,zero
    1964:	28001616 	blt	r5,zero,19c0 <__divsi3+0x64>
    1968:	200d883a 	mov	r6,r4
    196c:	29001a2e 	bgeu	r5,r4,19d8 <__divsi3+0x7c>
    1970:	00800804 	movi	r2,32
    1974:	00c00044 	movi	r3,1
    1978:	00000106 	br	1980 <__divsi3+0x24>
    197c:	10000d26 	beq	r2,zero,19b4 <__divsi3+0x58>
    1980:	294b883a 	add	r5,r5,r5
    1984:	10bfffc4 	addi	r2,r2,-1
    1988:	18c7883a 	add	r3,r3,r3
    198c:	293ffb36 	bltu	r5,r4,197c <_gp+0xffff7b3c>
    1990:	0005883a 	mov	r2,zero
    1994:	18000726 	beq	r3,zero,19b4 <__divsi3+0x58>
    1998:	0005883a 	mov	r2,zero
    199c:	31400236 	bltu	r6,r5,19a8 <__divsi3+0x4c>
    19a0:	314dc83a 	sub	r6,r6,r5
    19a4:	10c4b03a 	or	r2,r2,r3
    19a8:	1806d07a 	srli	r3,r3,1
    19ac:	280ad07a 	srli	r5,r5,1
    19b0:	183ffa1e 	bne	r3,zero,199c <_gp+0xffff7b5c>
    19b4:	38000126 	beq	r7,zero,19bc <__divsi3+0x60>
    19b8:	0085c83a 	sub	r2,zero,r2
    19bc:	f800283a 	ret
    19c0:	014bc83a 	sub	r5,zero,r5
    19c4:	39c0005c 	xori	r7,r7,1
    19c8:	003fe706 	br	1968 <_gp+0xffff7b28>
    19cc:	0109c83a 	sub	r4,zero,r4
    19d0:	01c00044 	movi	r7,1
    19d4:	003fe306 	br	1964 <_gp+0xffff7b24>
    19d8:	00c00044 	movi	r3,1
    19dc:	003fee06 	br	1998 <_gp+0xffff7b58>

000019e0 <__modsi3>:
    19e0:	20001716 	blt	r4,zero,1a40 <__modsi3+0x60>
    19e4:	000f883a 	mov	r7,zero
    19e8:	2005883a 	mov	r2,r4
    19ec:	28001216 	blt	r5,zero,1a38 <__modsi3+0x58>
    19f0:	2900162e 	bgeu	r5,r4,1a4c <__modsi3+0x6c>
    19f4:	01800804 	movi	r6,32
    19f8:	00c00044 	movi	r3,1
    19fc:	00000106 	br	1a04 <__modsi3+0x24>
    1a00:	30000a26 	beq	r6,zero,1a2c <__modsi3+0x4c>
    1a04:	294b883a 	add	r5,r5,r5
    1a08:	31bfffc4 	addi	r6,r6,-1
    1a0c:	18c7883a 	add	r3,r3,r3
    1a10:	293ffb36 	bltu	r5,r4,1a00 <_gp+0xffff7bc0>
    1a14:	18000526 	beq	r3,zero,1a2c <__modsi3+0x4c>
    1a18:	1806d07a 	srli	r3,r3,1
    1a1c:	11400136 	bltu	r2,r5,1a24 <__modsi3+0x44>
    1a20:	1145c83a 	sub	r2,r2,r5
    1a24:	280ad07a 	srli	r5,r5,1
    1a28:	183ffb1e 	bne	r3,zero,1a18 <_gp+0xffff7bd8>
    1a2c:	38000126 	beq	r7,zero,1a34 <__modsi3+0x54>
    1a30:	0085c83a 	sub	r2,zero,r2
    1a34:	f800283a 	ret
    1a38:	014bc83a 	sub	r5,zero,r5
    1a3c:	003fec06 	br	19f0 <_gp+0xffff7bb0>
    1a40:	0109c83a 	sub	r4,zero,r4
    1a44:	01c00044 	movi	r7,1
    1a48:	003fe706 	br	19e8 <_gp+0xffff7ba8>
    1a4c:	00c00044 	movi	r3,1
    1a50:	003ff106 	br	1a18 <_gp+0xffff7bd8>

00001a54 <__udivsi3>:
    1a54:	200d883a 	mov	r6,r4
    1a58:	2900152e 	bgeu	r5,r4,1ab0 <__udivsi3+0x5c>
    1a5c:	28001416 	blt	r5,zero,1ab0 <__udivsi3+0x5c>
    1a60:	00800804 	movi	r2,32
    1a64:	00c00044 	movi	r3,1
    1a68:	00000206 	br	1a74 <__udivsi3+0x20>
    1a6c:	10000e26 	beq	r2,zero,1aa8 <__udivsi3+0x54>
    1a70:	28000516 	blt	r5,zero,1a88 <__udivsi3+0x34>
    1a74:	294b883a 	add	r5,r5,r5
    1a78:	10bfffc4 	addi	r2,r2,-1
    1a7c:	18c7883a 	add	r3,r3,r3
    1a80:	293ffa36 	bltu	r5,r4,1a6c <_gp+0xffff7c2c>
    1a84:	18000826 	beq	r3,zero,1aa8 <__udivsi3+0x54>
    1a88:	0005883a 	mov	r2,zero
    1a8c:	31400236 	bltu	r6,r5,1a98 <__udivsi3+0x44>
    1a90:	314dc83a 	sub	r6,r6,r5
    1a94:	10c4b03a 	or	r2,r2,r3
    1a98:	1806d07a 	srli	r3,r3,1
    1a9c:	280ad07a 	srli	r5,r5,1
    1aa0:	183ffa1e 	bne	r3,zero,1a8c <_gp+0xffff7c4c>
    1aa4:	f800283a 	ret
    1aa8:	0005883a 	mov	r2,zero
    1aac:	f800283a 	ret
    1ab0:	00c00044 	movi	r3,1
    1ab4:	003ff406 	br	1a88 <_gp+0xffff7c48>

00001ab8 <__umodsi3>:
    1ab8:	2005883a 	mov	r2,r4
    1abc:	2900122e 	bgeu	r5,r4,1b08 <__umodsi3+0x50>
    1ac0:	28001116 	blt	r5,zero,1b08 <__umodsi3+0x50>
    1ac4:	01800804 	movi	r6,32
    1ac8:	00c00044 	movi	r3,1
    1acc:	00000206 	br	1ad8 <__umodsi3+0x20>
    1ad0:	30000c26 	beq	r6,zero,1b04 <__umodsi3+0x4c>
    1ad4:	28000516 	blt	r5,zero,1aec <__umodsi3+0x34>
    1ad8:	294b883a 	add	r5,r5,r5
    1adc:	31bfffc4 	addi	r6,r6,-1
    1ae0:	18c7883a 	add	r3,r3,r3
    1ae4:	293ffa36 	bltu	r5,r4,1ad0 <_gp+0xffff7c90>
    1ae8:	18000626 	beq	r3,zero,1b04 <__umodsi3+0x4c>
    1aec:	1806d07a 	srli	r3,r3,1
    1af0:	11400136 	bltu	r2,r5,1af8 <__umodsi3+0x40>
    1af4:	1145c83a 	sub	r2,r2,r5
    1af8:	280ad07a 	srli	r5,r5,1
    1afc:	183ffb1e 	bne	r3,zero,1aec <_gp+0xffff7cac>
    1b00:	f800283a 	ret
    1b04:	f800283a 	ret
    1b08:	00c00044 	movi	r3,1
    1b0c:	003ff706 	br	1aec <_gp+0xffff7cac>

00001b10 <__mulsi3>:
    1b10:	0005883a 	mov	r2,zero
    1b14:	20000726 	beq	r4,zero,1b34 <__mulsi3+0x24>
    1b18:	20c0004c 	andi	r3,r4,1
    1b1c:	2008d07a 	srli	r4,r4,1
    1b20:	18000126 	beq	r3,zero,1b28 <__mulsi3+0x18>
    1b24:	1145883a 	add	r2,r2,r5
    1b28:	294b883a 	add	r5,r5,r5
    1b2c:	203ffa1e 	bne	r4,zero,1b18 <_gp+0xffff7cd8>
    1b30:	f800283a 	ret
    1b34:	f800283a 	ret

00001b38 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1b38:	deffff04 	addi	sp,sp,-4
    1b3c:	01000034 	movhi	r4,0
    1b40:	01400034 	movhi	r5,0
    1b44:	dfc00015 	stw	ra,0(sp)
    1b48:	21075804 	addi	r4,r4,7520
    1b4c:	29479504 	addi	r5,r5,7764

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1b50:	2140061e 	bne	r4,r5,1b6c <alt_load+0x34>
    1b54:	01000034 	movhi	r4,0
    1b58:	01400034 	movhi	r5,0
    1b5c:	21040804 	addi	r4,r4,4128
    1b60:	29440804 	addi	r5,r5,4128
    1b64:	2140121e 	bne	r4,r5,1bb0 <alt_load+0x78>
    1b68:	00000b06 	br	1b98 <alt_load+0x60>
    1b6c:	00c00034 	movhi	r3,0
    1b70:	18c79504 	addi	r3,r3,7764
    1b74:	1907c83a 	sub	r3,r3,r4
    1b78:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1b7c:	10fff526 	beq	r2,r3,1b54 <_gp+0xffff7d14>
    {
      *to++ = *from++;
    1b80:	114f883a 	add	r7,r2,r5
    1b84:	39c00017 	ldw	r7,0(r7)
    1b88:	110d883a 	add	r6,r2,r4
    1b8c:	10800104 	addi	r2,r2,4
    1b90:	31c00015 	stw	r7,0(r6)
    1b94:	003ff906 	br	1b7c <_gp+0xffff7d3c>
    1b98:	01000034 	movhi	r4,0
    1b9c:	01400034 	movhi	r5,0
    1ba0:	21074304 	addi	r4,r4,7436
    1ba4:	29474304 	addi	r5,r5,7436

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1ba8:	2140101e 	bne	r4,r5,1bec <alt_load+0xb4>
    1bac:	00000b06 	br	1bdc <alt_load+0xa4>
    1bb0:	00c00034 	movhi	r3,0
    1bb4:	18c40804 	addi	r3,r3,4128
    1bb8:	1907c83a 	sub	r3,r3,r4
    1bbc:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1bc0:	10fff526 	beq	r2,r3,1b98 <_gp+0xffff7d58>
    {
      *to++ = *from++;
    1bc4:	114f883a 	add	r7,r2,r5
    1bc8:	39c00017 	ldw	r7,0(r7)
    1bcc:	110d883a 	add	r6,r2,r4
    1bd0:	10800104 	addi	r2,r2,4
    1bd4:	31c00015 	stw	r7,0(r6)
    1bd8:	003ff906 	br	1bc0 <_gp+0xffff7d80>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1bdc:	0001cfc0 	call	1cfc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    1be0:	dfc00017 	ldw	ra,0(sp)
    1be4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    1be8:	0001d001 	jmpi	1d00 <alt_icache_flush_all>
    1bec:	00c00034 	movhi	r3,0
    1bf0:	18c75804 	addi	r3,r3,7520
    1bf4:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1bf8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1bfc:	18bff726 	beq	r3,r2,1bdc <_gp+0xffff7d9c>
    {
      *to++ = *from++;
    1c00:	114f883a 	add	r7,r2,r5
    1c04:	39c00017 	ldw	r7,0(r7)
    1c08:	110d883a 	add	r6,r2,r4
    1c0c:	10800104 	addi	r2,r2,4
    1c10:	31c00015 	stw	r7,0(r6)
    1c14:	003ff906 	br	1bfc <_gp+0xffff7dbc>

00001c18 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1c18:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1c1c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1c20:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1c24:	0001ca40 	call	1ca4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1c28:	0001cc40 	call	1cc4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1c2c:	d1a04517 	ldw	r6,-32492(gp)
    1c30:	d1604617 	ldw	r5,-32488(gp)
    1c34:	d1204717 	ldw	r4,-32484(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    1c38:	dfc00017 	ldw	ra,0(sp)
    1c3c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1c40:	00011281 	jmpi	1128 <main>

00001c44 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    1c44:	00800044 	movi	r2,1
    1c48:	20800226 	beq	r4,r2,1c54 <write+0x10>
    1c4c:	00800084 	movi	r2,2
    1c50:	2080041e 	bne	r4,r2,1c64 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    1c54:	01000034 	movhi	r4,0
    1c58:	000f883a 	mov	r7,zero
    1c5c:	21079304 	addi	r4,r4,7756
    1c60:	0001cc81 	jmpi	1cc8 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    1c64:	d0a00417 	ldw	r2,-32752(gp)
    1c68:	10000926 	beq	r2,zero,1c90 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    1c6c:	deffff04 	addi	sp,sp,-4
    1c70:	dfc00015 	stw	ra,0(sp)
    1c74:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    1c78:	00c01444 	movi	r3,81
    1c7c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    1c80:	00bfffc4 	movi	r2,-1
    1c84:	dfc00017 	ldw	ra,0(sp)
    1c88:	dec00104 	addi	sp,sp,4
    1c8c:	f800283a 	ret
    1c90:	d0a04404 	addi	r2,gp,-32496
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    1c94:	00c01444 	movi	r3,81
    1c98:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    1c9c:	00bfffc4 	movi	r2,-1
    1ca0:	f800283a 	ret

00001ca4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1ca4:	deffff04 	addi	sp,sp,-4
    1ca8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    1cac:	0001d040 	call	1d04 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1cb0:	00800044 	movi	r2,1
    1cb4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1cb8:	dfc00017 	ldw	ra,0(sp)
    1cbc:	dec00104 	addi	sp,sp,4
    1cc0:	f800283a 	ret

00001cc4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1cc4:	f800283a 	ret

00001cc8 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    1cc8:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1ccc:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    1cd0:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1cd4:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    1cd8:	2980072e 	bgeu	r5,r6,1cf8 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1cdc:	38c00037 	ldwio	r3,0(r7)
    1ce0:	18ffffec 	andhi	r3,r3,65535
    1ce4:	183ffc26 	beq	r3,zero,1cd8 <_gp+0xffff7e98>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1ce8:	28c00007 	ldb	r3,0(r5)
    1cec:	20c00035 	stwio	r3,0(r4)
    1cf0:	29400044 	addi	r5,r5,1
    1cf4:	003ff806 	br	1cd8 <_gp+0xffff7e98>

  return count;
}
    1cf8:	f800283a 	ret

00001cfc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1cfc:	f800283a 	ret

00001d00 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1d00:	f800283a 	ret

00001d04 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1d04:	000170fa 	wrctl	ienable,zero
    1d08:	f800283a 	ret
