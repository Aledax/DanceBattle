
slave_de1.elf:     file format elf32-littlenios2
slave_de1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001020

Program Header:
    LOAD off    0x00001000 vaddr 0x00001000 paddr 0x00001000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00001020 paddr 0x00001020 align 2**12
         filesz 0x00000d30 memsz 0x00000d30 flags r-x
    LOAD off    0x00001d50 vaddr 0x00001d50 paddr 0x00001e44 align 2**12
         filesz 0x000000f4 memsz 0x000000f4 flags rw-
    LOAD off    0x00001f38 vaddr 0x00001f38 paddr 0x00001f38 align 2**12
         filesz 0x00000000 memsz 0x0000001c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00001000  00001000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00001020  00001020  00001e44  2**0
                  CONTENTS
  2 .text         00000cf8  00001020  00001020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000038  00001d18  00001d18  00001d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f4  00001d50  00001e44  00001d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000001c  00001f38  00001f38  00001f38  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00001f54  00001f54  00001e44  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001e44  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002e0  00000000  00000000  00001e68  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00004377  00000000  00000000  00002148  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001692  00000000  00000000  000064bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000196c  00000000  00000000  00007b51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000400  00000000  00000000  000094c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000010c7  00000000  00000000  000098c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000015aa  00000000  00000000  0000a987  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000bf34  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000258  00000000  00000000  0000bf48  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000d2de  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000d2e1  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000d2ed  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000d2ee  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0000d2ef  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000d2fa  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0000d305  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  0000d310  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000030  00000000  00000000  0000d31c  2**0
                  CONTENTS, READONLY
 26 .jdi          000053cc  00000000  00000000  0000d34c  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003860c  00000000  00000000  00012718  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00001000 l    d  .entry	00000000 .entry
00001020 l    d  .exceptions	00000000 .exceptions
00001020 l    d  .text	00000000 .text
00001d18 l    d  .rodata	00000000 .rodata
00001d50 l    d  .rwdata	00000000 .rwdata
00001f38 l    d  .bss	00000000 .bss
00001f54 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../slave_de1_bsp//obj/HAL/src/crt0.o
00001058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 vfprintf.c
000011dc l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00001d50 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
000011c0 g     F .text	0000001c putchar
00001c24 g     F .text	0000002c alt_main
00001e44 g       *ABS*	00000000 __flash_rwdata_start
0000116c g     F .text	0000004c printf
00001d10 g     F .text	00000008 altera_nios2_gen2_irq_init
00001000 g     F .entry	0000000c __reset
00001020 g       *ABS*	00000000 __flash_exceptions_start
00001f44 g     O .bss	00000004 errno
00001f4c g     O .bss	00000004 alt_argv
00009e30 g       *ABS*	00000000 _gp
000011b8 g     F .text	00000008 _putchar_r
00001130 g     F .text	0000003c _printf_r
00001000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00001a60 g     F .text	00000064 .hidden __udivsi3
00001e30 g     O .rwdata	00000004 _global_impure_ptr
00001f54 g       *ABS*	00000000 __bss_end
00001098 g     F .text	0000001c updateCoords
00001d08 g     F .text	00000004 alt_dcache_flush_all
00001e44 g       *ABS*	00000000 __ram_rwdata_end
00001c50 g     F .text	00000060 write
0000189c g     F .text	00000058 _putc_r
00001d50 g       *ABS*	00000000 __ram_rodata_end
00001e3c g     O .rwdata	00000004 jtag_uart_0
00001ac4 g     F .text	00000058 .hidden __umodsi3
00001f54 g       *ABS*	00000000 end
0000105c g     F .text	0000003c writeThresholds
00002000 g       *ABS*	00000000 __alt_stack_pointer
00001cd4 g     F .text	00000034 altera_avalon_jtag_uart_write
00001248 g     F .text	0000052c ___vfprintf_internal_r
00001020 g     F .text	0000003c _start
00001cd0 g     F .text	00000004 alt_sys_init
00001b1c g     F .text	00000028 .hidden __mulsi3
00001d50 g       *ABS*	00000000 __ram_rwdata_start
00001d18 g       *ABS*	00000000 __ram_rodata_start
00001f38 g     O .bss	00000004 camera_base
00001f54 g       *ABS*	00000000 __alt_stack_base
00001790 g     F .text	000000b8 __sfvwrite_small_dev
00001f38 g       *ABS*	00000000 __bss_start
000010b4 g     F .text	0000007c main
00001f48 g     O .bss	00000004 alt_envp
00001e38 g     O .rwdata	00000004 uart_0
00001e40 g     O .rwdata	00000004 alt_errno
00001848 g     F .text	00000054 putc
00001968 g     F .text	00000084 .hidden __divsi3
00001d18 g       *ABS*	00000000 __flash_rodata_start
00001cb0 g     F .text	00000020 alt_irq_init
00001910 g     F .text	00000058 _write_r
00001e34 g     O .rwdata	00000004 _impure_ptr
00001f50 g     O .bss	00000004 alt_argc
00001f3c g     O .bss	00000008 coords
00001020 g       *ABS*	00000000 __ram_exceptions_start
00001e44 g       *ABS*	00000000 _edata
00001f54 g       *ABS*	00000000 _end
00001020 g       *ABS*	00000000 __ram_exceptions_end
000019ec g     F .text	00000074 .hidden __modsi3
00002000 g       *ABS*	00000000 __alt_data_end
0000100c g       .entry	00000000 _exit
000018f4 g     F .text	0000001c strlen
00001d0c g     F .text	00000004 alt_icache_flush_all
00001774 g     F .text	0000001c __vfprintf_internal
00001b44 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00001000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    1000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    1004:	08440814 	ori	at,at,4128
    jmp r1
    1008:	0800683a 	jmp	at

0000100c <_exit>:
	...

Disassembly of section .text:

00001020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    1020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    1024:	dec80014 	ori	sp,sp,8192
    movhi gp, %hi(_gp)
    1028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    102c:	d6a78c14 	ori	gp,gp,40496
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    1030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    1034:	1087ce14 	ori	r2,r2,7992

    movhi r3, %hi(__bss_end)
    1038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    103c:	18c7d514 	ori	r3,r3,8020

    beq r2, r3, 1f
    1040:	10c00326 	beq	r2,r3,1050 <_start+0x30>

0:
    stw zero, (r2)
    1044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    1048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    104c:	10fffd36 	bltu	r2,r3,1044 <_gp+0xffff7214>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    1050:	0001b440 	call	1b44 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    1054:	0001c240 	call	1c24 <alt_main>

00001058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    1058:	003fff06 	br	1058 <_gp+0xffff7228>

0000105c <writeThresholds>:
uint32_t coords[NUM_POINT_FINDERS]; 
volatile uint32_t *camera_base = (uint32_t*)COORDS_SLAVE_0_BASE;

void writeThresholds(int i, uint8_t cbLow, uint8_t cbHigh, uint8_t crLow, uint8_t crHigh)
{
	*(camera_base + i) = (cbLow << 24) | (cbHigh << 16) | (crLow << 8) | crHigh;
    105c:	d0a04217 	ldw	r2,-32504(gp)
    1060:	2109883a 	add	r4,r4,r4
    1064:	2109883a 	add	r4,r4,r4
    1068:	39c03fcc 	andi	r7,r7,255
    106c:	1109883a 	add	r4,r2,r4
    1070:	380e923a 	slli	r7,r7,8
    1074:	d8800003 	ldbu	r2,0(sp)
    1078:	31803fcc 	andi	r6,r6,255
    107c:	300c943a 	slli	r6,r6,16
    1080:	280a963a 	slli	r5,r5,24
    1084:	388eb03a 	or	r7,r7,r2
    1088:	398cb03a 	or	r6,r7,r6
    108c:	314cb03a 	or	r6,r6,r5
    1090:	21800015 	stw	r6,0(r4)
    1094:	f800283a 	ret

00001098 <updateCoords>:
}

void updateCoords() {	
	for (int i = 0; i < NUM_POINT_FINDERS; i++) {
		coords[i] = *(camera_base + i);
    1098:	d0e04217 	ldw	r3,-32504(gp)
    109c:	d0a04304 	addi	r2,gp,-32500
    10a0:	19000017 	ldw	r4,0(r3)
    10a4:	11000015 	stw	r4,0(r2)
    10a8:	18c00117 	ldw	r3,4(r3)
    10ac:	10c00115 	stw	r3,4(r2)
    10b0:	f800283a 	ret

000010b4 <main>:
}

int main()
{
	const int __programNumber__ = 420;
	printf("\n === Program start number: %i === \n", __programNumber__);
    10b4:	01000034 	movhi	r4,0
		coords[i] = *(camera_base + i);
	}
}

int main()
{
    10b8:	deffff04 	addi	sp,sp,-4
	const int __programNumber__ = 420;
	printf("\n === Program start number: %i === \n", __programNumber__);
    10bc:	01406904 	movi	r5,420
    10c0:	21074604 	addi	r4,r4,7448
		coords[i] = *(camera_base + i);
	}
}

int main()
{
    10c4:	dfc00015 	stw	ra,0(sp)
	const int __programNumber__ = 420;
	printf("\n === Program start number: %i === \n", __programNumber__);
    10c8:	000116c0 	call	116c <printf>
uint32_t coords[NUM_POINT_FINDERS]; 
volatile uint32_t *camera_base = (uint32_t*)COORDS_SLAVE_0_BASE;

void writeThresholds(int i, uint8_t cbLow, uint8_t cbHigh, uint8_t crLow, uint8_t crHigh)
{
	*(camera_base + i) = (cbLow << 24) | (cbHigh << 16) | (crLow << 8) | crHigh;
    10cc:	d0a04217 	ldw	r2,-32504(gp)
    10d0:	00d91bb4 	movhi	r3,25710
    10d4:	18d91b84 	addi	r3,r3,25710
    10d8:	10c00015 	stw	r3,0(r2)
    10dc:	00db9e34 	movhi	r3,28280
    10e0:	18db9e04 	addi	r3,r3,28280
    10e4:	10c00115 	stw	r3,4(r2)
	printf("\n === Program start number: %i === \n", __programNumber__);

	writeThresholds(0, 100, 110, 100, 110);
	writeThresholds(1, 110, 120, 110, 120);
    while (1) {
		updateCoords();
    10e8:	00010980 	call	1098 <updateCoords>
    	for (int i = 0; i < NUM_POINT_FINDERS; i++) {
			uint32_t raw_coords = coords[i];
    10ec:	d1a04317 	ldw	r6,-32500(gp)
			uint16_t smallUpBigDown = raw_coords >> 16;
			uint16_t smallLeftBigRight = raw_coords & 0xFFFF;
			printf("%i: (%i, %i), ", i, smallLeftBigRight, smallUpBigDown);
    10f0:	01000034 	movhi	r4,0
    10f4:	000b883a 	mov	r5,zero
    10f8:	300ed43a 	srli	r7,r6,16
    10fc:	21075004 	addi	r4,r4,7488
    1100:	31bfffcc 	andi	r6,r6,65535
    1104:	000116c0 	call	116c <printf>
	writeThresholds(0, 100, 110, 100, 110);
	writeThresholds(1, 110, 120, 110, 120);
    while (1) {
		updateCoords();
    	for (int i = 0; i < NUM_POINT_FINDERS; i++) {
			uint32_t raw_coords = coords[i];
    1108:	d1a04417 	ldw	r6,-32496(gp)
			uint16_t smallUpBigDown = raw_coords >> 16;
			uint16_t smallLeftBigRight = raw_coords & 0xFFFF;
			printf("%i: (%i, %i), ", i, smallLeftBigRight, smallUpBigDown);
    110c:	01000034 	movhi	r4,0
    1110:	01400044 	movi	r5,1
    1114:	300ed43a 	srli	r7,r6,16
    1118:	21075004 	addi	r4,r4,7488
    111c:	31bfffcc 	andi	r6,r6,65535
    1120:	000116c0 	call	116c <printf>
		}
		printf("\n");
    1124:	01000284 	movi	r4,10
    1128:	00011c00 	call	11c0 <putchar>
    112c:	003fee06 	br	10e8 <_gp+0xffff72b8>

00001130 <_printf_r>:
    1130:	defffd04 	addi	sp,sp,-12
    1134:	dfc00015 	stw	ra,0(sp)
    1138:	d9800115 	stw	r6,4(sp)
    113c:	d9c00215 	stw	r7,8(sp)
    1140:	20c00217 	ldw	r3,8(r4)
    1144:	01800034 	movhi	r6,0
    1148:	3185e404 	addi	r6,r6,6032
    114c:	19800115 	stw	r6,4(r3)
    1150:	280d883a 	mov	r6,r5
    1154:	21400217 	ldw	r5,8(r4)
    1158:	d9c00104 	addi	r7,sp,4
    115c:	00012480 	call	1248 <___vfprintf_internal_r>
    1160:	dfc00017 	ldw	ra,0(sp)
    1164:	dec00304 	addi	sp,sp,12
    1168:	f800283a 	ret

0000116c <printf>:
    116c:	defffc04 	addi	sp,sp,-16
    1170:	dfc00015 	stw	ra,0(sp)
    1174:	d9400115 	stw	r5,4(sp)
    1178:	d9800215 	stw	r6,8(sp)
    117c:	d9c00315 	stw	r7,12(sp)
    1180:	00800034 	movhi	r2,0
    1184:	10878d04 	addi	r2,r2,7732
    1188:	10800017 	ldw	r2,0(r2)
    118c:	01400034 	movhi	r5,0
    1190:	2945e404 	addi	r5,r5,6032
    1194:	10c00217 	ldw	r3,8(r2)
    1198:	d9800104 	addi	r6,sp,4
    119c:	19400115 	stw	r5,4(r3)
    11a0:	200b883a 	mov	r5,r4
    11a4:	11000217 	ldw	r4,8(r2)
    11a8:	00017740 	call	1774 <__vfprintf_internal>
    11ac:	dfc00017 	ldw	ra,0(sp)
    11b0:	dec00404 	addi	sp,sp,16
    11b4:	f800283a 	ret

000011b8 <_putchar_r>:
    11b8:	21800217 	ldw	r6,8(r4)
    11bc:	000189c1 	jmpi	189c <_putc_r>

000011c0 <putchar>:
    11c0:	00800034 	movhi	r2,0
    11c4:	10878d04 	addi	r2,r2,7732
    11c8:	10800017 	ldw	r2,0(r2)
    11cc:	200b883a 	mov	r5,r4
    11d0:	11800217 	ldw	r6,8(r2)
    11d4:	1009883a 	mov	r4,r2
    11d8:	000189c1 	jmpi	189c <_putc_r>

000011dc <print_repeat>:
    11dc:	defffb04 	addi	sp,sp,-20
    11e0:	dc800315 	stw	r18,12(sp)
    11e4:	dc400215 	stw	r17,8(sp)
    11e8:	dc000115 	stw	r16,4(sp)
    11ec:	dfc00415 	stw	ra,16(sp)
    11f0:	2025883a 	mov	r18,r4
    11f4:	2823883a 	mov	r17,r5
    11f8:	d9800005 	stb	r6,0(sp)
    11fc:	3821883a 	mov	r16,r7
    1200:	04000a0e 	bge	zero,r16,122c <print_repeat+0x50>
    1204:	88800117 	ldw	r2,4(r17)
    1208:	01c00044 	movi	r7,1
    120c:	d80d883a 	mov	r6,sp
    1210:	880b883a 	mov	r5,r17
    1214:	9009883a 	mov	r4,r18
    1218:	103ee83a 	callr	r2
    121c:	843fffc4 	addi	r16,r16,-1
    1220:	103ff726 	beq	r2,zero,1200 <_gp+0xffff73d0>
    1224:	00bfffc4 	movi	r2,-1
    1228:	00000106 	br	1230 <print_repeat+0x54>
    122c:	0005883a 	mov	r2,zero
    1230:	dfc00417 	ldw	ra,16(sp)
    1234:	dc800317 	ldw	r18,12(sp)
    1238:	dc400217 	ldw	r17,8(sp)
    123c:	dc000117 	ldw	r16,4(sp)
    1240:	dec00504 	addi	sp,sp,20
    1244:	f800283a 	ret

00001248 <___vfprintf_internal_r>:
    1248:	deffe504 	addi	sp,sp,-108
    124c:	d8c00804 	addi	r3,sp,32
    1250:	ddc01815 	stw	r23,96(sp)
    1254:	dd801715 	stw	r22,92(sp)
    1258:	dd401615 	stw	r21,88(sp)
    125c:	dd001515 	stw	r20,84(sp)
    1260:	dcc01415 	stw	r19,80(sp)
    1264:	dc801315 	stw	r18,76(sp)
    1268:	dc401215 	stw	r17,72(sp)
    126c:	dc001115 	stw	r16,68(sp)
    1270:	dfc01a15 	stw	ra,104(sp)
    1274:	df001915 	stw	fp,100(sp)
    1278:	2029883a 	mov	r20,r4
    127c:	2823883a 	mov	r17,r5
    1280:	382d883a 	mov	r22,r7
    1284:	d9800f15 	stw	r6,60(sp)
    1288:	0021883a 	mov	r16,zero
    128c:	d8000e15 	stw	zero,56(sp)
    1290:	d8000a15 	stw	zero,40(sp)
    1294:	002b883a 	mov	r21,zero
    1298:	0027883a 	mov	r19,zero
    129c:	0025883a 	mov	r18,zero
    12a0:	d8000c15 	stw	zero,48(sp)
    12a4:	d8000b15 	stw	zero,44(sp)
    12a8:	002f883a 	mov	r23,zero
    12ac:	d8c00915 	stw	r3,36(sp)
    12b0:	d8c00f17 	ldw	r3,60(sp)
    12b4:	19000003 	ldbu	r4,0(r3)
    12b8:	20803fcc 	andi	r2,r4,255
    12bc:	1080201c 	xori	r2,r2,128
    12c0:	10bfe004 	addi	r2,r2,-128
    12c4:	10011e26 	beq	r2,zero,1740 <___vfprintf_internal_r+0x4f8>
    12c8:	00c00044 	movi	r3,1
    12cc:	b8c01426 	beq	r23,r3,1320 <___vfprintf_internal_r+0xd8>
    12d0:	1dc00216 	blt	r3,r23,12dc <___vfprintf_internal_r+0x94>
    12d4:	b8000626 	beq	r23,zero,12f0 <___vfprintf_internal_r+0xa8>
    12d8:	00011506 	br	1730 <___vfprintf_internal_r+0x4e8>
    12dc:	01400084 	movi	r5,2
    12e0:	b9401d26 	beq	r23,r5,1358 <___vfprintf_internal_r+0x110>
    12e4:	014000c4 	movi	r5,3
    12e8:	b9402b26 	beq	r23,r5,1398 <___vfprintf_internal_r+0x150>
    12ec:	00011006 	br	1730 <___vfprintf_internal_r+0x4e8>
    12f0:	01400944 	movi	r5,37
    12f4:	1140fc26 	beq	r2,r5,16e8 <___vfprintf_internal_r+0x4a0>
    12f8:	88800117 	ldw	r2,4(r17)
    12fc:	d9000005 	stb	r4,0(sp)
    1300:	01c00044 	movi	r7,1
    1304:	d80d883a 	mov	r6,sp
    1308:	880b883a 	mov	r5,r17
    130c:	a009883a 	mov	r4,r20
    1310:	103ee83a 	callr	r2
    1314:	1000d81e 	bne	r2,zero,1678 <___vfprintf_internal_r+0x430>
    1318:	84000044 	addi	r16,r16,1
    131c:	00010406 	br	1730 <___vfprintf_internal_r+0x4e8>
    1320:	01400c04 	movi	r5,48
    1324:	1140fa26 	beq	r2,r5,1710 <___vfprintf_internal_r+0x4c8>
    1328:	01400944 	movi	r5,37
    132c:	11400a1e 	bne	r2,r5,1358 <___vfprintf_internal_r+0x110>
    1330:	d8800005 	stb	r2,0(sp)
    1334:	88800117 	ldw	r2,4(r17)
    1338:	b80f883a 	mov	r7,r23
    133c:	d80d883a 	mov	r6,sp
    1340:	880b883a 	mov	r5,r17
    1344:	a009883a 	mov	r4,r20
    1348:	103ee83a 	callr	r2
    134c:	1000ca1e 	bne	r2,zero,1678 <___vfprintf_internal_r+0x430>
    1350:	84000044 	addi	r16,r16,1
    1354:	0000f506 	br	172c <___vfprintf_internal_r+0x4e4>
    1358:	25fff404 	addi	r23,r4,-48
    135c:	bdc03fcc 	andi	r23,r23,255
    1360:	00c00244 	movi	r3,9
    1364:	1dc00936 	bltu	r3,r23,138c <___vfprintf_internal_r+0x144>
    1368:	00bfffc4 	movi	r2,-1
    136c:	90800426 	beq	r18,r2,1380 <___vfprintf_internal_r+0x138>
    1370:	01400284 	movi	r5,10
    1374:	9009883a 	mov	r4,r18
    1378:	0001b1c0 	call	1b1c <__mulsi3>
    137c:	00000106 	br	1384 <___vfprintf_internal_r+0x13c>
    1380:	0005883a 	mov	r2,zero
    1384:	b8a5883a 	add	r18,r23,r2
    1388:	0000e206 	br	1714 <___vfprintf_internal_r+0x4cc>
    138c:	01400b84 	movi	r5,46
    1390:	1140e426 	beq	r2,r5,1724 <___vfprintf_internal_r+0x4dc>
    1394:	05c00084 	movi	r23,2
    1398:	213ff404 	addi	r4,r4,-48
    139c:	27003fcc 	andi	fp,r4,255
    13a0:	00c00244 	movi	r3,9
    13a4:	1f000936 	bltu	r3,fp,13cc <___vfprintf_internal_r+0x184>
    13a8:	00bfffc4 	movi	r2,-1
    13ac:	98800426 	beq	r19,r2,13c0 <___vfprintf_internal_r+0x178>
    13b0:	01400284 	movi	r5,10
    13b4:	9809883a 	mov	r4,r19
    13b8:	0001b1c0 	call	1b1c <__mulsi3>
    13bc:	00000106 	br	13c4 <___vfprintf_internal_r+0x17c>
    13c0:	0005883a 	mov	r2,zero
    13c4:	e0a7883a 	add	r19,fp,r2
    13c8:	0000d906 	br	1730 <___vfprintf_internal_r+0x4e8>
    13cc:	00c01b04 	movi	r3,108
    13d0:	10c0d226 	beq	r2,r3,171c <___vfprintf_internal_r+0x4d4>
    13d4:	013fffc4 	movi	r4,-1
    13d8:	99000226 	beq	r19,r4,13e4 <___vfprintf_internal_r+0x19c>
    13dc:	d8000b15 	stw	zero,44(sp)
    13e0:	00000106 	br	13e8 <___vfprintf_internal_r+0x1a0>
    13e4:	04c00044 	movi	r19,1
    13e8:	01001a44 	movi	r4,105
    13ec:	11001626 	beq	r2,r4,1448 <___vfprintf_internal_r+0x200>
    13f0:	20800916 	blt	r4,r2,1418 <___vfprintf_internal_r+0x1d0>
    13f4:	010018c4 	movi	r4,99
    13f8:	11008826 	beq	r2,r4,161c <___vfprintf_internal_r+0x3d4>
    13fc:	01001904 	movi	r4,100
    1400:	11001126 	beq	r2,r4,1448 <___vfprintf_internal_r+0x200>
    1404:	01001604 	movi	r4,88
    1408:	1100c81e 	bne	r2,r4,172c <___vfprintf_internal_r+0x4e4>
    140c:	00c00044 	movi	r3,1
    1410:	d8c00e15 	stw	r3,56(sp)
    1414:	00001506 	br	146c <___vfprintf_internal_r+0x224>
    1418:	01001cc4 	movi	r4,115
    141c:	11009826 	beq	r2,r4,1680 <___vfprintf_internal_r+0x438>
    1420:	20800416 	blt	r4,r2,1434 <___vfprintf_internal_r+0x1ec>
    1424:	01001bc4 	movi	r4,111
    1428:	1100c01e 	bne	r2,r4,172c <___vfprintf_internal_r+0x4e4>
    142c:	05400204 	movi	r21,8
    1430:	00000f06 	br	1470 <___vfprintf_internal_r+0x228>
    1434:	01001d44 	movi	r4,117
    1438:	11000d26 	beq	r2,r4,1470 <___vfprintf_internal_r+0x228>
    143c:	01001e04 	movi	r4,120
    1440:	11000a26 	beq	r2,r4,146c <___vfprintf_internal_r+0x224>
    1444:	0000b906 	br	172c <___vfprintf_internal_r+0x4e4>
    1448:	d8c00a17 	ldw	r3,40(sp)
    144c:	b7000104 	addi	fp,r22,4
    1450:	18000726 	beq	r3,zero,1470 <___vfprintf_internal_r+0x228>
    1454:	df000d15 	stw	fp,52(sp)
    1458:	b5c00017 	ldw	r23,0(r22)
    145c:	b800080e 	bge	r23,zero,1480 <___vfprintf_internal_r+0x238>
    1460:	05efc83a 	sub	r23,zero,r23
    1464:	02400044 	movi	r9,1
    1468:	00000606 	br	1484 <___vfprintf_internal_r+0x23c>
    146c:	05400404 	movi	r21,16
    1470:	b0c00104 	addi	r3,r22,4
    1474:	d8c00d15 	stw	r3,52(sp)
    1478:	b5c00017 	ldw	r23,0(r22)
    147c:	d8000a15 	stw	zero,40(sp)
    1480:	0013883a 	mov	r9,zero
    1484:	d839883a 	mov	fp,sp
    1488:	b8001726 	beq	r23,zero,14e8 <___vfprintf_internal_r+0x2a0>
    148c:	a80b883a 	mov	r5,r21
    1490:	b809883a 	mov	r4,r23
    1494:	da401015 	stw	r9,64(sp)
    1498:	0001a600 	call	1a60 <__udivsi3>
    149c:	a80b883a 	mov	r5,r21
    14a0:	1009883a 	mov	r4,r2
    14a4:	102d883a 	mov	r22,r2
    14a8:	0001b1c0 	call	1b1c <__mulsi3>
    14ac:	b885c83a 	sub	r2,r23,r2
    14b0:	00c00244 	movi	r3,9
    14b4:	da401017 	ldw	r9,64(sp)
    14b8:	18800216 	blt	r3,r2,14c4 <___vfprintf_internal_r+0x27c>
    14bc:	10800c04 	addi	r2,r2,48
    14c0:	00000506 	br	14d8 <___vfprintf_internal_r+0x290>
    14c4:	d8c00e17 	ldw	r3,56(sp)
    14c8:	18000226 	beq	r3,zero,14d4 <___vfprintf_internal_r+0x28c>
    14cc:	10800dc4 	addi	r2,r2,55
    14d0:	00000106 	br	14d8 <___vfprintf_internal_r+0x290>
    14d4:	108015c4 	addi	r2,r2,87
    14d8:	e0800005 	stb	r2,0(fp)
    14dc:	b02f883a 	mov	r23,r22
    14e0:	e7000044 	addi	fp,fp,1
    14e4:	003fe806 	br	1488 <_gp+0xffff7658>
    14e8:	e6efc83a 	sub	r23,fp,sp
    14ec:	9dc5c83a 	sub	r2,r19,r23
    14f0:	0080090e 	bge	zero,r2,1518 <___vfprintf_internal_r+0x2d0>
    14f4:	e085883a 	add	r2,fp,r2
    14f8:	01400c04 	movi	r5,48
    14fc:	d8c00917 	ldw	r3,36(sp)
    1500:	e009883a 	mov	r4,fp
    1504:	e0c0032e 	bgeu	fp,r3,1514 <___vfprintf_internal_r+0x2cc>
    1508:	e7000044 	addi	fp,fp,1
    150c:	21400005 	stb	r5,0(r4)
    1510:	e0bffa1e 	bne	fp,r2,14fc <_gp+0xffff76cc>
    1514:	e6efc83a 	sub	r23,fp,sp
    1518:	d8c00b17 	ldw	r3,44(sp)
    151c:	4dd1883a 	add	r8,r9,r23
    1520:	922dc83a 	sub	r22,r18,r8
    1524:	18001626 	beq	r3,zero,1580 <___vfprintf_internal_r+0x338>
    1528:	48000a26 	beq	r9,zero,1554 <___vfprintf_internal_r+0x30c>
    152c:	00800b44 	movi	r2,45
    1530:	d8800805 	stb	r2,32(sp)
    1534:	88800117 	ldw	r2,4(r17)
    1538:	01c00044 	movi	r7,1
    153c:	d9800804 	addi	r6,sp,32
    1540:	880b883a 	mov	r5,r17
    1544:	a009883a 	mov	r4,r20
    1548:	103ee83a 	callr	r2
    154c:	10004a1e 	bne	r2,zero,1678 <___vfprintf_internal_r+0x430>
    1550:	84000044 	addi	r16,r16,1
    1554:	0580070e 	bge	zero,r22,1574 <___vfprintf_internal_r+0x32c>
    1558:	b00f883a 	mov	r7,r22
    155c:	01800c04 	movi	r6,48
    1560:	880b883a 	mov	r5,r17
    1564:	a009883a 	mov	r4,r20
    1568:	00011dc0 	call	11dc <print_repeat>
    156c:	1000421e 	bne	r2,zero,1678 <___vfprintf_internal_r+0x430>
    1570:	85a1883a 	add	r16,r16,r22
    1574:	e02d883a 	mov	r22,fp
    1578:	bf2fc83a 	sub	r23,r23,fp
    157c:	00002006 	br	1600 <___vfprintf_internal_r+0x3b8>
    1580:	0580090e 	bge	zero,r22,15a8 <___vfprintf_internal_r+0x360>
    1584:	b00f883a 	mov	r7,r22
    1588:	01800804 	movi	r6,32
    158c:	880b883a 	mov	r5,r17
    1590:	a009883a 	mov	r4,r20
    1594:	da401015 	stw	r9,64(sp)
    1598:	00011dc0 	call	11dc <print_repeat>
    159c:	da401017 	ldw	r9,64(sp)
    15a0:	1000351e 	bne	r2,zero,1678 <___vfprintf_internal_r+0x430>
    15a4:	85a1883a 	add	r16,r16,r22
    15a8:	483ff226 	beq	r9,zero,1574 <_gp+0xffff7744>
    15ac:	00800b44 	movi	r2,45
    15b0:	d8800805 	stb	r2,32(sp)
    15b4:	88800117 	ldw	r2,4(r17)
    15b8:	01c00044 	movi	r7,1
    15bc:	d9800804 	addi	r6,sp,32
    15c0:	880b883a 	mov	r5,r17
    15c4:	a009883a 	mov	r4,r20
    15c8:	103ee83a 	callr	r2
    15cc:	10002a1e 	bne	r2,zero,1678 <___vfprintf_internal_r+0x430>
    15d0:	84000044 	addi	r16,r16,1
    15d4:	003fe706 	br	1574 <_gp+0xffff7744>
    15d8:	b5bfffc4 	addi	r22,r22,-1
    15dc:	b0800003 	ldbu	r2,0(r22)
    15e0:	01c00044 	movi	r7,1
    15e4:	d9800804 	addi	r6,sp,32
    15e8:	d8800805 	stb	r2,32(sp)
    15ec:	88800117 	ldw	r2,4(r17)
    15f0:	880b883a 	mov	r5,r17
    15f4:	a009883a 	mov	r4,r20
    15f8:	103ee83a 	callr	r2
    15fc:	10001e1e 	bne	r2,zero,1678 <___vfprintf_internal_r+0x430>
    1600:	8585c83a 	sub	r2,r16,r22
    1604:	b5c9883a 	add	r4,r22,r23
    1608:	e085883a 	add	r2,fp,r2
    160c:	013ff216 	blt	zero,r4,15d8 <_gp+0xffff77a8>
    1610:	1021883a 	mov	r16,r2
    1614:	dd800d17 	ldw	r22,52(sp)
    1618:	00004406 	br	172c <___vfprintf_internal_r+0x4e4>
    161c:	00800044 	movi	r2,1
    1620:	1480080e 	bge	r2,r18,1644 <___vfprintf_internal_r+0x3fc>
    1624:	95ffffc4 	addi	r23,r18,-1
    1628:	b80f883a 	mov	r7,r23
    162c:	01800804 	movi	r6,32
    1630:	880b883a 	mov	r5,r17
    1634:	a009883a 	mov	r4,r20
    1638:	00011dc0 	call	11dc <print_repeat>
    163c:	10000e1e 	bne	r2,zero,1678 <___vfprintf_internal_r+0x430>
    1640:	85e1883a 	add	r16,r16,r23
    1644:	b0800017 	ldw	r2,0(r22)
    1648:	01c00044 	movi	r7,1
    164c:	d80d883a 	mov	r6,sp
    1650:	d8800005 	stb	r2,0(sp)
    1654:	88800117 	ldw	r2,4(r17)
    1658:	880b883a 	mov	r5,r17
    165c:	a009883a 	mov	r4,r20
    1660:	b5c00104 	addi	r23,r22,4
    1664:	103ee83a 	callr	r2
    1668:	1000031e 	bne	r2,zero,1678 <___vfprintf_internal_r+0x430>
    166c:	84000044 	addi	r16,r16,1
    1670:	b82d883a 	mov	r22,r23
    1674:	00002d06 	br	172c <___vfprintf_internal_r+0x4e4>
    1678:	00bfffc4 	movi	r2,-1
    167c:	00003106 	br	1744 <___vfprintf_internal_r+0x4fc>
    1680:	b5c00017 	ldw	r23,0(r22)
    1684:	b7000104 	addi	fp,r22,4
    1688:	b809883a 	mov	r4,r23
    168c:	00018f40 	call	18f4 <strlen>
    1690:	9091c83a 	sub	r8,r18,r2
    1694:	102d883a 	mov	r22,r2
    1698:	0200090e 	bge	zero,r8,16c0 <___vfprintf_internal_r+0x478>
    169c:	400f883a 	mov	r7,r8
    16a0:	01800804 	movi	r6,32
    16a4:	880b883a 	mov	r5,r17
    16a8:	a009883a 	mov	r4,r20
    16ac:	da001015 	stw	r8,64(sp)
    16b0:	00011dc0 	call	11dc <print_repeat>
    16b4:	da001017 	ldw	r8,64(sp)
    16b8:	103fef1e 	bne	r2,zero,1678 <_gp+0xffff7848>
    16bc:	8221883a 	add	r16,r16,r8
    16c0:	88800117 	ldw	r2,4(r17)
    16c4:	b00f883a 	mov	r7,r22
    16c8:	b80d883a 	mov	r6,r23
    16cc:	880b883a 	mov	r5,r17
    16d0:	a009883a 	mov	r4,r20
    16d4:	103ee83a 	callr	r2
    16d8:	103fe71e 	bne	r2,zero,1678 <_gp+0xffff7848>
    16dc:	85a1883a 	add	r16,r16,r22
    16e0:	e02d883a 	mov	r22,fp
    16e4:	00001106 	br	172c <___vfprintf_internal_r+0x4e4>
    16e8:	00c00044 	movi	r3,1
    16ec:	04ffffc4 	movi	r19,-1
    16f0:	d8000e15 	stw	zero,56(sp)
    16f4:	d8c00a15 	stw	r3,40(sp)
    16f8:	05400284 	movi	r21,10
    16fc:	9825883a 	mov	r18,r19
    1700:	d8000c15 	stw	zero,48(sp)
    1704:	d8000b15 	stw	zero,44(sp)
    1708:	182f883a 	mov	r23,r3
    170c:	00000806 	br	1730 <___vfprintf_internal_r+0x4e8>
    1710:	ddc00b15 	stw	r23,44(sp)
    1714:	05c00084 	movi	r23,2
    1718:	00000506 	br	1730 <___vfprintf_internal_r+0x4e8>
    171c:	00c00044 	movi	r3,1
    1720:	d8c00c15 	stw	r3,48(sp)
    1724:	05c000c4 	movi	r23,3
    1728:	00000106 	br	1730 <___vfprintf_internal_r+0x4e8>
    172c:	002f883a 	mov	r23,zero
    1730:	d8c00f17 	ldw	r3,60(sp)
    1734:	18c00044 	addi	r3,r3,1
    1738:	d8c00f15 	stw	r3,60(sp)
    173c:	003edc06 	br	12b0 <_gp+0xffff7480>
    1740:	8005883a 	mov	r2,r16
    1744:	dfc01a17 	ldw	ra,104(sp)
    1748:	df001917 	ldw	fp,100(sp)
    174c:	ddc01817 	ldw	r23,96(sp)
    1750:	dd801717 	ldw	r22,92(sp)
    1754:	dd401617 	ldw	r21,88(sp)
    1758:	dd001517 	ldw	r20,84(sp)
    175c:	dcc01417 	ldw	r19,80(sp)
    1760:	dc801317 	ldw	r18,76(sp)
    1764:	dc401217 	ldw	r17,72(sp)
    1768:	dc001117 	ldw	r16,68(sp)
    176c:	dec01b04 	addi	sp,sp,108
    1770:	f800283a 	ret

00001774 <__vfprintf_internal>:
    1774:	00800034 	movhi	r2,0
    1778:	10878d04 	addi	r2,r2,7732
    177c:	300f883a 	mov	r7,r6
    1780:	280d883a 	mov	r6,r5
    1784:	200b883a 	mov	r5,r4
    1788:	11000017 	ldw	r4,0(r2)
    178c:	00012481 	jmpi	1248 <___vfprintf_internal_r>

00001790 <__sfvwrite_small_dev>:
    1790:	2880000b 	ldhu	r2,0(r5)
    1794:	1080020c 	andi	r2,r2,8
    1798:	10002126 	beq	r2,zero,1820 <__sfvwrite_small_dev+0x90>
    179c:	2880008f 	ldh	r2,2(r5)
    17a0:	defffa04 	addi	sp,sp,-24
    17a4:	dc000015 	stw	r16,0(sp)
    17a8:	dfc00515 	stw	ra,20(sp)
    17ac:	dd000415 	stw	r20,16(sp)
    17b0:	dcc00315 	stw	r19,12(sp)
    17b4:	dc800215 	stw	r18,8(sp)
    17b8:	dc400115 	stw	r17,4(sp)
    17bc:	2821883a 	mov	r16,r5
    17c0:	10001216 	blt	r2,zero,180c <__sfvwrite_small_dev+0x7c>
    17c4:	2027883a 	mov	r19,r4
    17c8:	3025883a 	mov	r18,r6
    17cc:	3823883a 	mov	r17,r7
    17d0:	05010004 	movi	r20,1024
    17d4:	04400b0e 	bge	zero,r17,1804 <__sfvwrite_small_dev+0x74>
    17d8:	880f883a 	mov	r7,r17
    17dc:	a440010e 	bge	r20,r17,17e4 <__sfvwrite_small_dev+0x54>
    17e0:	01c10004 	movi	r7,1024
    17e4:	8140008f 	ldh	r5,2(r16)
    17e8:	900d883a 	mov	r6,r18
    17ec:	9809883a 	mov	r4,r19
    17f0:	00019100 	call	1910 <_write_r>
    17f4:	0080050e 	bge	zero,r2,180c <__sfvwrite_small_dev+0x7c>
    17f8:	88a3c83a 	sub	r17,r17,r2
    17fc:	90a5883a 	add	r18,r18,r2
    1800:	003ff406 	br	17d4 <_gp+0xffff79a4>
    1804:	0005883a 	mov	r2,zero
    1808:	00000706 	br	1828 <__sfvwrite_small_dev+0x98>
    180c:	8080000b 	ldhu	r2,0(r16)
    1810:	10801014 	ori	r2,r2,64
    1814:	8080000d 	sth	r2,0(r16)
    1818:	00bfffc4 	movi	r2,-1
    181c:	00000206 	br	1828 <__sfvwrite_small_dev+0x98>
    1820:	00bfffc4 	movi	r2,-1
    1824:	f800283a 	ret
    1828:	dfc00517 	ldw	ra,20(sp)
    182c:	dd000417 	ldw	r20,16(sp)
    1830:	dcc00317 	ldw	r19,12(sp)
    1834:	dc800217 	ldw	r18,8(sp)
    1838:	dc400117 	ldw	r17,4(sp)
    183c:	dc000017 	ldw	r16,0(sp)
    1840:	dec00604 	addi	sp,sp,24
    1844:	f800283a 	ret

00001848 <putc>:
    1848:	defffd04 	addi	sp,sp,-12
    184c:	00800034 	movhi	r2,0
    1850:	dc000115 	stw	r16,4(sp)
    1854:	dfc00215 	stw	ra,8(sp)
    1858:	1085e404 	addi	r2,r2,6032
    185c:	28800115 	stw	r2,4(r5)
    1860:	00800034 	movhi	r2,0
    1864:	10878d04 	addi	r2,r2,7732
    1868:	d9000005 	stb	r4,0(sp)
    186c:	2021883a 	mov	r16,r4
    1870:	11000017 	ldw	r4,0(r2)
    1874:	01c00044 	movi	r7,1
    1878:	d80d883a 	mov	r6,sp
    187c:	00017900 	call	1790 <__sfvwrite_small_dev>
    1880:	00ffffc4 	movi	r3,-1
    1884:	10c00126 	beq	r2,r3,188c <putc+0x44>
    1888:	8005883a 	mov	r2,r16
    188c:	dfc00217 	ldw	ra,8(sp)
    1890:	dc000117 	ldw	r16,4(sp)
    1894:	dec00304 	addi	sp,sp,12
    1898:	f800283a 	ret

0000189c <_putc_r>:
    189c:	defffd04 	addi	sp,sp,-12
    18a0:	00800034 	movhi	r2,0
    18a4:	dc000115 	stw	r16,4(sp)
    18a8:	dfc00215 	stw	ra,8(sp)
    18ac:	1085e404 	addi	r2,r2,6032
    18b0:	30800115 	stw	r2,4(r6)
    18b4:	00800034 	movhi	r2,0
    18b8:	10878d04 	addi	r2,r2,7732
    18bc:	11000017 	ldw	r4,0(r2)
    18c0:	2821883a 	mov	r16,r5
    18c4:	01c00044 	movi	r7,1
    18c8:	300b883a 	mov	r5,r6
    18cc:	d80d883a 	mov	r6,sp
    18d0:	dc000005 	stb	r16,0(sp)
    18d4:	00017900 	call	1790 <__sfvwrite_small_dev>
    18d8:	00ffffc4 	movi	r3,-1
    18dc:	10c00126 	beq	r2,r3,18e4 <_putc_r+0x48>
    18e0:	8005883a 	mov	r2,r16
    18e4:	dfc00217 	ldw	ra,8(sp)
    18e8:	dc000117 	ldw	r16,4(sp)
    18ec:	dec00304 	addi	sp,sp,12
    18f0:	f800283a 	ret

000018f4 <strlen>:
    18f4:	2005883a 	mov	r2,r4
    18f8:	10c00007 	ldb	r3,0(r2)
    18fc:	18000226 	beq	r3,zero,1908 <strlen+0x14>
    1900:	10800044 	addi	r2,r2,1
    1904:	003ffc06 	br	18f8 <_gp+0xffff7ac8>
    1908:	1105c83a 	sub	r2,r2,r4
    190c:	f800283a 	ret

00001910 <_write_r>:
    1910:	defffd04 	addi	sp,sp,-12
    1914:	dc000015 	stw	r16,0(sp)
    1918:	04000034 	movhi	r16,0
    191c:	dc400115 	stw	r17,4(sp)
    1920:	8407d104 	addi	r16,r16,8004
    1924:	2023883a 	mov	r17,r4
    1928:	2809883a 	mov	r4,r5
    192c:	300b883a 	mov	r5,r6
    1930:	380d883a 	mov	r6,r7
    1934:	dfc00215 	stw	ra,8(sp)
    1938:	80000015 	stw	zero,0(r16)
    193c:	0001c500 	call	1c50 <write>
    1940:	00ffffc4 	movi	r3,-1
    1944:	10c0031e 	bne	r2,r3,1954 <_write_r+0x44>
    1948:	80c00017 	ldw	r3,0(r16)
    194c:	18000126 	beq	r3,zero,1954 <_write_r+0x44>
    1950:	88c00015 	stw	r3,0(r17)
    1954:	dfc00217 	ldw	ra,8(sp)
    1958:	dc400117 	ldw	r17,4(sp)
    195c:	dc000017 	ldw	r16,0(sp)
    1960:	dec00304 	addi	sp,sp,12
    1964:	f800283a 	ret

00001968 <__divsi3>:
    1968:	20001b16 	blt	r4,zero,19d8 <__divsi3+0x70>
    196c:	000f883a 	mov	r7,zero
    1970:	28001616 	blt	r5,zero,19cc <__divsi3+0x64>
    1974:	200d883a 	mov	r6,r4
    1978:	29001a2e 	bgeu	r5,r4,19e4 <__divsi3+0x7c>
    197c:	00800804 	movi	r2,32
    1980:	00c00044 	movi	r3,1
    1984:	00000106 	br	198c <__divsi3+0x24>
    1988:	10000d26 	beq	r2,zero,19c0 <__divsi3+0x58>
    198c:	294b883a 	add	r5,r5,r5
    1990:	10bfffc4 	addi	r2,r2,-1
    1994:	18c7883a 	add	r3,r3,r3
    1998:	293ffb36 	bltu	r5,r4,1988 <_gp+0xffff7b58>
    199c:	0005883a 	mov	r2,zero
    19a0:	18000726 	beq	r3,zero,19c0 <__divsi3+0x58>
    19a4:	0005883a 	mov	r2,zero
    19a8:	31400236 	bltu	r6,r5,19b4 <__divsi3+0x4c>
    19ac:	314dc83a 	sub	r6,r6,r5
    19b0:	10c4b03a 	or	r2,r2,r3
    19b4:	1806d07a 	srli	r3,r3,1
    19b8:	280ad07a 	srli	r5,r5,1
    19bc:	183ffa1e 	bne	r3,zero,19a8 <_gp+0xffff7b78>
    19c0:	38000126 	beq	r7,zero,19c8 <__divsi3+0x60>
    19c4:	0085c83a 	sub	r2,zero,r2
    19c8:	f800283a 	ret
    19cc:	014bc83a 	sub	r5,zero,r5
    19d0:	39c0005c 	xori	r7,r7,1
    19d4:	003fe706 	br	1974 <_gp+0xffff7b44>
    19d8:	0109c83a 	sub	r4,zero,r4
    19dc:	01c00044 	movi	r7,1
    19e0:	003fe306 	br	1970 <_gp+0xffff7b40>
    19e4:	00c00044 	movi	r3,1
    19e8:	003fee06 	br	19a4 <_gp+0xffff7b74>

000019ec <__modsi3>:
    19ec:	20001716 	blt	r4,zero,1a4c <__modsi3+0x60>
    19f0:	000f883a 	mov	r7,zero
    19f4:	2005883a 	mov	r2,r4
    19f8:	28001216 	blt	r5,zero,1a44 <__modsi3+0x58>
    19fc:	2900162e 	bgeu	r5,r4,1a58 <__modsi3+0x6c>
    1a00:	01800804 	movi	r6,32
    1a04:	00c00044 	movi	r3,1
    1a08:	00000106 	br	1a10 <__modsi3+0x24>
    1a0c:	30000a26 	beq	r6,zero,1a38 <__modsi3+0x4c>
    1a10:	294b883a 	add	r5,r5,r5
    1a14:	31bfffc4 	addi	r6,r6,-1
    1a18:	18c7883a 	add	r3,r3,r3
    1a1c:	293ffb36 	bltu	r5,r4,1a0c <_gp+0xffff7bdc>
    1a20:	18000526 	beq	r3,zero,1a38 <__modsi3+0x4c>
    1a24:	1806d07a 	srli	r3,r3,1
    1a28:	11400136 	bltu	r2,r5,1a30 <__modsi3+0x44>
    1a2c:	1145c83a 	sub	r2,r2,r5
    1a30:	280ad07a 	srli	r5,r5,1
    1a34:	183ffb1e 	bne	r3,zero,1a24 <_gp+0xffff7bf4>
    1a38:	38000126 	beq	r7,zero,1a40 <__modsi3+0x54>
    1a3c:	0085c83a 	sub	r2,zero,r2
    1a40:	f800283a 	ret
    1a44:	014bc83a 	sub	r5,zero,r5
    1a48:	003fec06 	br	19fc <_gp+0xffff7bcc>
    1a4c:	0109c83a 	sub	r4,zero,r4
    1a50:	01c00044 	movi	r7,1
    1a54:	003fe706 	br	19f4 <_gp+0xffff7bc4>
    1a58:	00c00044 	movi	r3,1
    1a5c:	003ff106 	br	1a24 <_gp+0xffff7bf4>

00001a60 <__udivsi3>:
    1a60:	200d883a 	mov	r6,r4
    1a64:	2900152e 	bgeu	r5,r4,1abc <__udivsi3+0x5c>
    1a68:	28001416 	blt	r5,zero,1abc <__udivsi3+0x5c>
    1a6c:	00800804 	movi	r2,32
    1a70:	00c00044 	movi	r3,1
    1a74:	00000206 	br	1a80 <__udivsi3+0x20>
    1a78:	10000e26 	beq	r2,zero,1ab4 <__udivsi3+0x54>
    1a7c:	28000516 	blt	r5,zero,1a94 <__udivsi3+0x34>
    1a80:	294b883a 	add	r5,r5,r5
    1a84:	10bfffc4 	addi	r2,r2,-1
    1a88:	18c7883a 	add	r3,r3,r3
    1a8c:	293ffa36 	bltu	r5,r4,1a78 <_gp+0xffff7c48>
    1a90:	18000826 	beq	r3,zero,1ab4 <__udivsi3+0x54>
    1a94:	0005883a 	mov	r2,zero
    1a98:	31400236 	bltu	r6,r5,1aa4 <__udivsi3+0x44>
    1a9c:	314dc83a 	sub	r6,r6,r5
    1aa0:	10c4b03a 	or	r2,r2,r3
    1aa4:	1806d07a 	srli	r3,r3,1
    1aa8:	280ad07a 	srli	r5,r5,1
    1aac:	183ffa1e 	bne	r3,zero,1a98 <_gp+0xffff7c68>
    1ab0:	f800283a 	ret
    1ab4:	0005883a 	mov	r2,zero
    1ab8:	f800283a 	ret
    1abc:	00c00044 	movi	r3,1
    1ac0:	003ff406 	br	1a94 <_gp+0xffff7c64>

00001ac4 <__umodsi3>:
    1ac4:	2005883a 	mov	r2,r4
    1ac8:	2900122e 	bgeu	r5,r4,1b14 <__umodsi3+0x50>
    1acc:	28001116 	blt	r5,zero,1b14 <__umodsi3+0x50>
    1ad0:	01800804 	movi	r6,32
    1ad4:	00c00044 	movi	r3,1
    1ad8:	00000206 	br	1ae4 <__umodsi3+0x20>
    1adc:	30000c26 	beq	r6,zero,1b10 <__umodsi3+0x4c>
    1ae0:	28000516 	blt	r5,zero,1af8 <__umodsi3+0x34>
    1ae4:	294b883a 	add	r5,r5,r5
    1ae8:	31bfffc4 	addi	r6,r6,-1
    1aec:	18c7883a 	add	r3,r3,r3
    1af0:	293ffa36 	bltu	r5,r4,1adc <_gp+0xffff7cac>
    1af4:	18000626 	beq	r3,zero,1b10 <__umodsi3+0x4c>
    1af8:	1806d07a 	srli	r3,r3,1
    1afc:	11400136 	bltu	r2,r5,1b04 <__umodsi3+0x40>
    1b00:	1145c83a 	sub	r2,r2,r5
    1b04:	280ad07a 	srli	r5,r5,1
    1b08:	183ffb1e 	bne	r3,zero,1af8 <_gp+0xffff7cc8>
    1b0c:	f800283a 	ret
    1b10:	f800283a 	ret
    1b14:	00c00044 	movi	r3,1
    1b18:	003ff706 	br	1af8 <_gp+0xffff7cc8>

00001b1c <__mulsi3>:
    1b1c:	0005883a 	mov	r2,zero
    1b20:	20000726 	beq	r4,zero,1b40 <__mulsi3+0x24>
    1b24:	20c0004c 	andi	r3,r4,1
    1b28:	2008d07a 	srli	r4,r4,1
    1b2c:	18000126 	beq	r3,zero,1b34 <__mulsi3+0x18>
    1b30:	1145883a 	add	r2,r2,r5
    1b34:	294b883a 	add	r5,r5,r5
    1b38:	203ffa1e 	bne	r4,zero,1b24 <_gp+0xffff7cf4>
    1b3c:	f800283a 	ret
    1b40:	f800283a 	ret

00001b44 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1b44:	deffff04 	addi	sp,sp,-4
    1b48:	01000034 	movhi	r4,0
    1b4c:	01400034 	movhi	r5,0
    1b50:	dfc00015 	stw	ra,0(sp)
    1b54:	21075404 	addi	r4,r4,7504
    1b58:	29479104 	addi	r5,r5,7748

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1b5c:	2140061e 	bne	r4,r5,1b78 <alt_load+0x34>
    1b60:	01000034 	movhi	r4,0
    1b64:	01400034 	movhi	r5,0
    1b68:	21040804 	addi	r4,r4,4128
    1b6c:	29440804 	addi	r5,r5,4128
    1b70:	2140121e 	bne	r4,r5,1bbc <alt_load+0x78>
    1b74:	00000b06 	br	1ba4 <alt_load+0x60>
    1b78:	00c00034 	movhi	r3,0
    1b7c:	18c79104 	addi	r3,r3,7748
    1b80:	1907c83a 	sub	r3,r3,r4
    1b84:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1b88:	10fff526 	beq	r2,r3,1b60 <_gp+0xffff7d30>
    {
      *to++ = *from++;
    1b8c:	114f883a 	add	r7,r2,r5
    1b90:	39c00017 	ldw	r7,0(r7)
    1b94:	110d883a 	add	r6,r2,r4
    1b98:	10800104 	addi	r2,r2,4
    1b9c:	31c00015 	stw	r7,0(r6)
    1ba0:	003ff906 	br	1b88 <_gp+0xffff7d58>
    1ba4:	01000034 	movhi	r4,0
    1ba8:	01400034 	movhi	r5,0
    1bac:	21074604 	addi	r4,r4,7448
    1bb0:	29474604 	addi	r5,r5,7448

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1bb4:	2140101e 	bne	r4,r5,1bf8 <alt_load+0xb4>
    1bb8:	00000b06 	br	1be8 <alt_load+0xa4>
    1bbc:	00c00034 	movhi	r3,0
    1bc0:	18c40804 	addi	r3,r3,4128
    1bc4:	1907c83a 	sub	r3,r3,r4
    1bc8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1bcc:	10fff526 	beq	r2,r3,1ba4 <_gp+0xffff7d74>
    {
      *to++ = *from++;
    1bd0:	114f883a 	add	r7,r2,r5
    1bd4:	39c00017 	ldw	r7,0(r7)
    1bd8:	110d883a 	add	r6,r2,r4
    1bdc:	10800104 	addi	r2,r2,4
    1be0:	31c00015 	stw	r7,0(r6)
    1be4:	003ff906 	br	1bcc <_gp+0xffff7d9c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1be8:	0001d080 	call	1d08 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    1bec:	dfc00017 	ldw	ra,0(sp)
    1bf0:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    1bf4:	0001d0c1 	jmpi	1d0c <alt_icache_flush_all>
    1bf8:	00c00034 	movhi	r3,0
    1bfc:	18c75404 	addi	r3,r3,7504
    1c00:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    1c04:	0005883a 	mov	r2,zero
  {
    while( to != end )
    1c08:	18bff726 	beq	r3,r2,1be8 <_gp+0xffff7db8>
    {
      *to++ = *from++;
    1c0c:	114f883a 	add	r7,r2,r5
    1c10:	39c00017 	ldw	r7,0(r7)
    1c14:	110d883a 	add	r6,r2,r4
    1c18:	10800104 	addi	r2,r2,4
    1c1c:	31c00015 	stw	r7,0(r6)
    1c20:	003ff906 	br	1c08 <_gp+0xffff7dd8>

00001c24 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1c24:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1c28:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1c2c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1c30:	0001cb00 	call	1cb0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1c34:	0001cd00 	call	1cd0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1c38:	d1a04617 	ldw	r6,-32488(gp)
    1c3c:	d1604717 	ldw	r5,-32484(gp)
    1c40:	d1204817 	ldw	r4,-32480(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    1c44:	dfc00017 	ldw	ra,0(sp)
    1c48:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    1c4c:	00010b41 	jmpi	10b4 <main>

00001c50 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    1c50:	00800044 	movi	r2,1
    1c54:	20800226 	beq	r4,r2,1c60 <write+0x10>
    1c58:	00800084 	movi	r2,2
    1c5c:	2080041e 	bne	r4,r2,1c70 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    1c60:	01000034 	movhi	r4,0
    1c64:	000f883a 	mov	r7,zero
    1c68:	21078f04 	addi	r4,r4,7740
    1c6c:	0001cd41 	jmpi	1cd4 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    1c70:	d0a00417 	ldw	r2,-32752(gp)
    1c74:	10000926 	beq	r2,zero,1c9c <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    1c78:	deffff04 	addi	sp,sp,-4
    1c7c:	dfc00015 	stw	ra,0(sp)
    1c80:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    1c84:	00c01444 	movi	r3,81
    1c88:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    1c8c:	00bfffc4 	movi	r2,-1
    1c90:	dfc00017 	ldw	ra,0(sp)
    1c94:	dec00104 	addi	sp,sp,4
    1c98:	f800283a 	ret
    1c9c:	d0a04504 	addi	r2,gp,-32492
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    1ca0:	00c01444 	movi	r3,81
    1ca4:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    1ca8:	00bfffc4 	movi	r2,-1
    1cac:	f800283a 	ret

00001cb0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    1cb0:	deffff04 	addi	sp,sp,-4
    1cb4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    1cb8:	0001d100 	call	1d10 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    1cbc:	00800044 	movi	r2,1
    1cc0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    1cc4:	dfc00017 	ldw	ra,0(sp)
    1cc8:	dec00104 	addi	sp,sp,4
    1ccc:	f800283a 	ret

00001cd0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    1cd0:	f800283a 	ret

00001cd4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    1cd4:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1cd8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
    1cdc:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1ce0:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    1ce4:	2980072e 	bgeu	r5,r6,1d04 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1ce8:	38c00037 	ldwio	r3,0(r7)
    1cec:	18ffffec 	andhi	r3,r3,65535
    1cf0:	183ffc26 	beq	r3,zero,1ce4 <_gp+0xffff7eb4>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1cf4:	28c00007 	ldb	r3,0(r5)
    1cf8:	20c00035 	stwio	r3,0(r4)
    1cfc:	29400044 	addi	r5,r5,1
    1d00:	003ff806 	br	1ce4 <_gp+0xffff7eb4>

  return count;
}
    1d04:	f800283a 	ret

00001d08 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    1d08:	f800283a 	ret

00001d0c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1d0c:	f800283a 	ret

00001d10 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    1d10:	000170fa 	wrctl	ienable,zero
    1d14:	f800283a 	ret
